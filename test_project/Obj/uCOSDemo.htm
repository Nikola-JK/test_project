<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\uCOSDemo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\uCOSDemo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Fri Jun 24 17:31:20 2016
<BR><P>
<H3>Maximum Stack Usage =       2912 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
AppTaskT_VSample &rArr; FSmain &rArr; copy_to_udisk &rArr; flash_to_udisk &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[9c]">OS_CPU_SR_Save</a>
 <LI><a href="#[9d]">OS_CPU_SR_Restore</a>
 <LI><a href="#[19a]">OSStartHighRdy</a>
 <LI><a href="#[198]">OSCtxSw</a>
 <LI><a href="#[195]">OSIntCtxSw</a>
 <LI><a href="#[18]">OSPendSV</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[11]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">NMI_Handler</a><BR>
 <LI><a href="#[13]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">MemManage_Handler</a><BR>
 <LI><a href="#[14]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">BusFault_Handler</a><BR>
 <LI><a href="#[15]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">UsageFault_Handler</a><BR>
 <LI><a href="#[16]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">SVC_Handler</a><BR>
 <LI><a href="#[17]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">DebugMon_Handler</a><BR>
 <LI><a href="#[2c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">ADC3_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5b]">AppTaskCom_485</a> from app.o(.text) referenced from app.o(.text)
 <LI><a href="#[5d]">AppTaskGSM</a> from app.o(.text) referenced from app.o(.text)
 <LI><a href="#[5c]">AppTaskInsideCom_485</a> from app.o(.text) referenced from app.o(.text)
 <LI><a href="#[5e]">AppTaskNrf905</a> from app.o(.text) referenced from app.o(.text)
 <LI><a href="#[5f]">AppTaskStart</a> from app.o(.text) referenced from app.o(.text)
 <LI><a href="#[5a]">AppTaskT_VSample</a> from app.o(.text) referenced from app.o(.text)
 <LI><a href="#[59]">AppTaskUserif</a> from app.o(.text) referenced from app.o(.text)
 <LI><a href="#[14]">BusFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[52]">DMA2_Channel1_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[53]">DMA2_Channel2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[54]">DMA2_Channel3_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[55]">DMA2_Channel4_5_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DebugMon_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[0]">EP1_IN_Callback</a> from usb_endp.o(.text) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[2]">EP2_OUT_Callback</a> from usb_endp.o(.text) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[20]">EXTI0_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">EXTI15_10_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI1_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">EXTI2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">EXTI3_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">EXTI4_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">EXTI9_5_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">FLASH_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">FSMC_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[273]">Get_Max_Lun</a> from usb_prop.o(.text) referenced from usb_prop.o(.text)
 <LI><a href="#[12]">HardFaultException</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">I2C1_ER_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">I2C1_EV_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">I2C2_ER_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">I2C2_EV_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">MASS_Data_Setup</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[b]">MASS_GetConfigDescriptor</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[a]">MASS_GetDeviceDescriptor</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[c]">MASS_GetStringDescriptor</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[9]">MASS_Get_Interface_Setting</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[8]">MASS_NoData_Setup</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[4]">MASS_Reset</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[5]">MASS_Status_In</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[6]">MASS_Status_Out</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[3]">MASS_init</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[e]">Mass_Storage_ClearFeature</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[d]">Mass_Storage_SetConfiguration</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[f]">Mass_Storage_SetDeviceAddress</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[13]">MemManage_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">NMI_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NOP_Process</a> from usb_core.o(.text) referenced 36 times from usb_istr.o(.data)
 <LI><a href="#[61]">OSIntExit</a> from os_core.o(.text) referenced from os_cpu_a.o(.text)
 <LI><a href="#[18]">OSPendSV</a> from os_cpu_a.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[60]">OSTaskSwHook</a> from os_cpu_c.o(.text) referenced from os_cpu_a.o(.text)
 <LI><a href="#[62]">OSTmr_Task</a> from os_tmr.o(.text) referenced from os_tmr.o(.text)
 <LI><a href="#[18b]">OS_TaskIdle</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[188]">OS_TaskStat</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[1b]">PVD_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">RCC_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">RTCAlarm_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">RTC_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">SDIO_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI1_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">SPI2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">SPI3_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">SVC_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[287]">Standard_GetConfiguration</a> from usb_core.o(.text) referenced from usb_core.o(.text)
 <LI><a href="#[288]">Standard_GetInterface</a> from usb_core.o(.text) referenced from usb_core.o(.text)
 <LI><a href="#[286]">Standard_GetStatus</a> from usb_core.o(.text) referenced from usb_core.o(.text)
 <LI><a href="#[19]">SysTickHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[57]">SystemInit_ExtMemCtl</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[1c]">TAMPER_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">TIM1_BRK_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM1_CC_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">TIM1_TRG_COM_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">TIM1_UP_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM3_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM4_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">TIM5_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">TIM6_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">TIM7_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">TIM8_BRK_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">TIM8_CC_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">TIM8_TRG_COM_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">TIM8_UP_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">UART4_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4f]">UART5_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">USART1_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">USART2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">USART3_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">USBWakeUp_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">USB_HP_CAN1_TX_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">USB_LP_CAN1_RX0_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">UsageFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">WWDG_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[67]">__backspace</a> from fgetc_b.o(.text) referenced from scanf_char_file.o(.text)
 <LI><a href="#[58]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[64]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[68]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[63]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[6a]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[66]">fgetc</a> from usart_printf.o(.text) referenced from scanf_char_file.o(.text)
 <LI><a href="#[69]">fputc</a> from usart_printf.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[65]">isspace</a> from isspace_o.o(.text) referenced 2 times from strtod.o(.text)
 <LI><a href="#[56]">main</a> from app.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[58]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[305]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[6b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2f3]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[306]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[307]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[308]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[309]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[30a]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[57]"></a>SystemInit_ExtMemCtl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[10]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>wtd</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wtd
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClearFlag
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[56]"></a>main</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = main &rArr; OSInit &rArr; OSTmr_Init &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[95]"></a>Channel_Select</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Channel_Select &rArr; r485_Sendout
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r485_Sendout
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_CalibrationIF
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com
</UL>

<P><STRONG><a name="[97]"></a>ParaCal</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ParaCal &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_CalibrationIF
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com
</UL>

<P><STRONG><a name="[98]"></a>NMIException</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>

<P><STRONG><a name="[12]"></a>HardFaultException</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>MemManageException</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>

<P><STRONG><a name="[9a]"></a>BusFaultException</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>

<P><STRONG><a name="[9b]"></a>UsageFaultException</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>

<P><STRONG><a name="[30b]"></a>DebugMonitor</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[30c]"></a>SVCHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[30d]"></a>PendSVC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[19]"></a>SysTickHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = SysTickHandler &rArr; OSTimeTick &rArr; OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ISR
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>PVD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RTC_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_IRQHandler &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RCC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = EXTI4_IRQHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30e]"></a>DMAChannel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[30f]"></a>DMAChannel2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[310]"></a>DMAChannel3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[311]"></a>DMAChannel4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[312]"></a>DMAChannel5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[313]"></a>DMAChannel6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[314]"></a>DMAChannel7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[315]"></a>ADC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_HP_CAN1_TX_IRQHandler &rArr; CTR_HP
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_HP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USB_LP_CAN1_RX0_IRQHandler &rArr; USB_Istr &rArr; CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[316]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[317]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USART1_IRQHandler</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USART2_IRQHandler</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = USART2_IRQHandler &rArr; OSMboxPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USART3_IRQHandler</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = USART3_IRQHandler &rArr; OSMboxPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>ADC3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>UART4_IRQHandler</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = UART4_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>UART5_IRQHandler</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = UART5_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>USART_Configuration</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, usart_printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USART_Configuration &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBoard
</UL>

<P><STRONG><a name="[69]"></a>fputc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usart_printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[66]"></a>fgetc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usart_printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char_file.o(.text)
</UL>
<P><STRONG><a name="[b5]"></a>nRF905_GPIO_Configuration</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, nrf905.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nRF905_GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n95_Init_IO
</UL>

<P><STRONG><a name="[75]"></a>n95_Init_IO</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, nrf905.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = n95_Init_IO &rArr; nRF905_GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF905_GPIO_Configuration
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskNrf905
</UL>

<P><STRONG><a name="[b6]"></a>n95_SPI_WR_Byte</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, nrf905.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = n95_SPI_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n95_Sendout
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n95_Init_Dev
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n95_Check_DR
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nrf905_Test
</UL>

<P><STRONG><a name="[76]"></a>n95_Init_Dev</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, nrf905.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = n95_Init_Dev &rArr; n95_SPI_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n95_SPI_WR_Byte
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskNrf905
</UL>

<P><STRONG><a name="[7b]"></a>n95_Sendout</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, nrf905.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = n95_Sendout &rArr; n95_SPI_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n95_SPI_WR_Byte
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf905_return_para_all
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskNrf905
</UL>

<P><STRONG><a name="[77]"></a>Nrf905_Test</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, nrf905.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = Nrf905_Test &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n95_SPI_WR_Byte
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskNrf905
</UL>

<P><STRONG><a name="[79]"></a>n95_Check_DR</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, nrf905.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = n95_Check_DR &rArr; n95_SPI_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n95_SPI_WR_Byte
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskNrf905
</UL>

<P><STRONG><a name="[bc]"></a>return_para_all</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = return_para_all &rArr; OSMboxPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_SendData
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com
</UL>

<P><STRONG><a name="[81]"></a>com</STRONG> (Thumb, 1920 bytes, Stack size 160 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = com &rArr; return_all_capacity &rArr; OSMboxPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteVariable
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_para_all
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_version
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_config
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_all_capacity
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_id
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_all_res
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_SendData
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_cal
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_addr
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_ack
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaCal
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCom_485
</UL>

<P><STRONG><a name="[c9]"></a>nrf905_return_para_all</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, com.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n95_Sendout
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
</UL>

<P><STRONG><a name="[96]"></a>r485_Sendout</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = r485_Sendout
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_Select
</UL>

<P><STRONG><a name="[7e]"></a>sim900a</STRONG> (Thumb, 442 bytes, Stack size 24 bytes, sim900a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = sim900a &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89printf
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskGSM
</UL>

<P><STRONG><a name="[cd]"></a>Send_Message</STRONG> (Thumb, 1540 bytes, Stack size 32 bytes, sim900a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[d0]"></a>Abnor_BatteryIF</STRONG> (Thumb, 786 bytes, Stack size 48 bytes, hmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Abnor_BatteryIF &rArr; SetTextValue &rArr; SetControlValue &rArr; SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextValue
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetProgressValue
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analysis
</UL>

<P><STRONG><a name="[d5]"></a>Calib_PassWorldIF</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, hmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Calib_PassWorldIF &rArr; SetTextValue &rArr; SetControlValue &rArr; SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextValue
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analysis
</UL>

<P><STRONG><a name="[d7]"></a>Show</STRONG> (Thumb, 1406 bytes, Stack size 80 bytes, hmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Show &rArr; SetTextValue &rArr; SetControlValue &rArr; SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextValue
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_CalibrationIF
</UL>

<P><STRONG><a name="[da]"></a>Param_CalibrationIF</STRONG> (Thumb, 1836 bytes, Stack size 184 bytes, hmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = Param_CalibrationIF &rArr; Show &rArr; SetTextValue &rArr; SetControlValue &rArr; SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextValue
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetButtonValue
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteVariable
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaCal
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_Select
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analysis
</UL>

<P><STRONG><a name="[dd]"></a>PassW_ChangeIF</STRONG> (Thumb, 578 bytes, Stack size 48 bytes, hmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = PassW_ChangeIF &rArr; SetTextValue &rArr; SetControlValue &rArr; SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextValue
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analysis
</UL>

<P><STRONG><a name="[df]"></a>PassW_InputIF</STRONG> (Thumb, 516 bytes, Stack size 80 bytes, hmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = PassW_InputIF &rArr; SetTextValue &rArr; SetControlValue &rArr; SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextValue
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analysis
</UL>

<P><STRONG><a name="[e0]"></a>Set_IF</STRONG> (Thumb, 1258 bytes, Stack size 24 bytes, hmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Set_IF &rArr; EE_WriteVariable &rArr; EE_PageTransfer &rArr; EE_VerifyPageFullWriteVariable &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteVariable
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analysis
</UL>

<P><STRONG><a name="[e1]"></a>RingSet_Save_IF</STRONG> (Thumb, 714 bytes, Stack size 24 bytes, hmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = RingSet_Save_IF &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analysis
</UL>

<P><STRONG><a name="[85]"></a>Analysis</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, hmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = Analysis &rArr; Param_CalibrationIF &rArr; Show &rArr; SetTextValue &rArr; SetControlValue &rArr; SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingSet_Save_IF
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_IF
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassW_InputIF
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassW_ChangeIF
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_CalibrationIF
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calib_PassWorldIF
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abnor_BatteryIF
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskUserif
</UL>

<P><STRONG><a name="[86]"></a>Param_IF</STRONG> (Thumb, 762 bytes, Stack size 40 bytes, hmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Param_IF &rArr; SetTextValue &rArr; SetControlValue &rArr; SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextValue
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskUserif
</UL>

<P><STRONG><a name="[e2]"></a>Abnormal_show</STRONG> (Thumb, 670 bytes, Stack size 40 bytes, hmi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextValue
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetProgressValue
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetButtonValue
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[83]"></a>EE_ReadVariable</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EE_ReadVariable
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_FindValidPage
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskT_VSample
</UL>

<P><STRONG><a name="[e7]"></a>EE_Init</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, eeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Format
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_VerifyPageFullWriteVariable
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadVariable
</UL>

<P><STRONG><a name="[c8]"></a>EE_WriteVariable</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = EE_WriteVariable &rArr; EE_PageTransfer &rArr; EE_VerifyPageFullWriteVariable &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_VerifyPageFullWriteVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_IF
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_CalibrationIF
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com
</UL>

<P><STRONG><a name="[eb]"></a>conf_file_name</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = conf_file_name &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_conf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_configure
</UL>

<P><STRONG><a name="[ec]"></a>led_all_on</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = led_all_on
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOn
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_to_udisk
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_error
</UL>

<P><STRONG><a name="[ee]"></a>led_all_off</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = led_all_off
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOff
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_error
</UL>

<P><STRONG><a name="[13c]"></a>beeper_on</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_hour
</UL>

<P><STRONG><a name="[13d]"></a>beeper_off</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_hour
</UL>

<P><STRONG><a name="[f0]"></a>br_con_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, common.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery
</UL>

<P><STRONG><a name="[f1]"></a>br_con_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, common.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery
</UL>

<P><STRONG><a name="[f2]"></a>load_con_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, common.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge
</UL>

<P><STRONG><a name="[f3]"></a>load_con_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, common.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge
</UL>

<P><STRONG><a name="[f4]"></a>charge_con_on</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, common.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge
</UL>

<P><STRONG><a name="[f5]"></a>charge_con_off</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, common.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge
</UL>

<P><STRONG><a name="[f6]"></a>sys_error</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_error &rArr; led_all_off
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_all_off
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_all_on
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSmain
</UL>

<P><STRONG><a name="[103]"></a>copy_to_udisk</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, udisk_ch374.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2592<LI>Call Chain = copy_to_udisk &rArr; flash_to_udisk &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374LibInit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskReady
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopIfError
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_to_udisk
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_all_on
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch374_DiskSize
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch374_DetectOk
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitCH374
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSmain
</UL>

<P><STRONG><a name="[10a]"></a>struct_malloc</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, user_configure.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = struct_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSmain
</UL>

<P><STRONG><a name="[10c]"></a>user_configure</STRONG> (Thumb, 328 bytes, Stack size 120 bytes, user_configure.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_file_name
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Scanf
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0scanf
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[112]"></a>get_conf</STRONG> (Thumb, 448 bytes, Stack size 1320 bytes, user_configure.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = get_conf &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_file_name
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSmain
</UL>

<P><STRONG><a name="[84]"></a>FSmain</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2592 + Unknown Stack Size
<LI>Call Chain = FSmain &rArr; copy_to_udisk &rArr; flash_to_udisk &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_to_udisk
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_error
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Check
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsbDev
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBoard
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_conf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;struct_malloc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskT_VSample
</UL>

<P><STRONG><a name="[116]"></a>DispMenu</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, board_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DispMenu &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSmain
</UL>

<P><STRONG><a name="[11b]"></a>GPIO_Configuration</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, board_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = GPIO_Configuration &rArr; bsp_InitLed &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitLed
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBoard
</UL>

<P><STRONG><a name="[115]"></a>InitBoard</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, board_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = InitBoard &rArr; USART_Configuration &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitLed
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSmain
</UL>

<P><STRONG><a name="[10d]"></a>USART_Scanf</STRONG> (Thumb, 302 bytes, Stack size 56 bytes, board_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART_Scanf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Regulate
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_configure
</UL>

<P><STRONG><a name="[11d]"></a>Time_Regulate</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, board_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Time_Regulate &rArr; USART_Scanf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Scanf
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Adjust
</UL>

<P><STRONG><a name="[11e]"></a>Time_Adjust</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, board_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Time_Adjust &rArr; Time_Regulate &rArr; USART_Scanf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Regulate
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Check
</UL>

<P><STRONG><a name="[11f]"></a>RTC_Configuration</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, board_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_Configuration &rArr; BKP_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Check
</UL>

<P><STRONG><a name="[117]"></a>RTC_Check</STRONG> (Thumb, 518 bytes, Stack size 8 bytes, board_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = RTC_Check &rArr; Time_Adjust &rArr; Time_Regulate &rArr; USART_Scanf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Adjust
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSmain
</UL>

<P><STRONG><a name="[136]"></a>tosecond</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, board_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tosecond
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ISR
</UL>

<P><STRONG><a name="[119]"></a>NVIC_Configuration</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, board_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSmain
</UL>

<P><STRONG><a name="[12a]"></a>Time_Display</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, board_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Time_Display &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SAMPLING
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_hour
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery
</UL>

<P><STRONG><a name="[12b]"></a>ADC_Configuration</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, board_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>

<P><STRONG><a name="[9f]"></a>SysTick_ISR</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SysTick_ISR &rArr; tosecond
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcPro
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tosecond
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickHandler
</UL>

<P><STRONG><a name="[f7]"></a>delay_ms</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_to_udisk
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_error
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge_timeout
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_hour
</UL>

<P><STRONG><a name="[13e]"></a>StartTimer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_hour
</UL>

<P><STRONG><a name="[13f]"></a>CheckTimer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_hour
</UL>

<P><STRONG><a name="[318]"></a>GetRunTime</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, systick.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>show_dis_time</STRONG> (Thumb, 346 bytes, Stack size 1216 bytes, battery.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568<LI>Call Chain = show_dis_time &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery
</UL>

<P><STRONG><a name="[13a]"></a>record_time</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, battery.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = record_time
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_hour
</UL>

<P><STRONG><a name="[13b]"></a>delay_hour</STRONG> (Thumb, 444 bytes, Stack size 1560 bytes, battery.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = delay_hour &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOn
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOff
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeper_off
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeper_on
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SAMPLING
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_time
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimer
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Display
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery
</UL>

<P><STRONG><a name="[141]"></a>dis_charge_timeout</STRONG> (Thumb, 372 bytes, Stack size 8 bytes, battery.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dis_charge_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge
</UL>

<P><STRONG><a name="[142]"></a>dis_charge</STRONG> (Thumb, 462 bytes, Stack size 1560 bytes, battery.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = dis_charge &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOn
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOff
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_con_off
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_con_on
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeper_off
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeper_on
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SAMPLING
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge_timeout
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_time
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimer
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery
</UL>

<P><STRONG><a name="[143]"></a>charge</STRONG> (Thumb, 546 bytes, Stack size 1560 bytes, battery.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = charge &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOn
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOff
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge_con_off
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge_con_on
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_con_off
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeper_off
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beeper_on
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetADC
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SAMPLING
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_time
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimer
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery
</UL>

<P><STRONG><a name="[147]"></a>show_inf</STRONG> (Thumb, 508 bytes, Stack size 1320 bytes, battery.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = show_inf &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery
</UL>

<P><STRONG><a name="[11a]"></a>battery</STRONG> (Thumb, 350 bytes, Stack size 16 bytes, battery.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928<LI>Call Chain = battery &rArr; charge &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;br_con_off
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;br_con_on
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_inf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_hour
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_dis_time
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Display
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSmain
</UL>

<P><STRONG><a name="[135]"></a>AdcPro</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AdcPro
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ISR
</UL>

<P><STRONG><a name="[144]"></a>GetADC</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SAMPLING
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge
</UL>

<P><STRONG><a name="[140]"></a>ADC_SAMPLING</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ADC_SAMPLING &rArr; Time_Display &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetADC
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Display
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_hour
</UL>

<P><STRONG><a name="[14a]"></a>GPIO_Config</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[8a]"></a>BSP_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = BSP_Init &rArr; USART_Configuration &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ClearFlag
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[319]"></a>BSP_IntDisAll</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>beep</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_IF
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_CalibrationIF
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[14d]"></a>NVICConfig</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, bsp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>

<P><STRONG><a name="[168]"></a>NAND_ReadID</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bsp_nand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_DispBadBlockInfo
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_GetStatus
</UL>

<P><STRONG><a name="[157]"></a>NAND_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = NAND_Init &rArr; FSMC_NAND_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_GetStatus
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_BuildLUT
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[159]"></a>NAND_WriteToNewBlock</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, bsp_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_MarkUsedBlock
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_MarkBadBlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_EraseBlock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_PageCopyBackEx
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_PageCopyBack
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_IsBadBlock
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_BuildLUT
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_ReadPage
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Write
</UL>

<P><STRONG><a name="[15f]"></a>NAND_Write</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, bsp_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteToNewBlock
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_AddrToPhyBlockNo
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_IsBufOk
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_MarkUsedBlock
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_ReadData
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_WritePage
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Write
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[163]"></a>NAND_Read</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bsp_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NAND_Read &rArr; FSMC_NAND_ReadData &rArr; FSMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_AddrToPhyBlockNo
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Read
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[164]"></a>NAND_ScanBlock</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, bsp_nand.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_IsBufOk
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_EraseBlock
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_IsBadBlock
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_ReadPage
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_WritePage
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[165]"></a>NAND_Format</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, bsp_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NAND_Format &rArr; NAND_BuildLUT &rArr; FSMC_NAND_ReadSpare &rArr; FSMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_EraseBlock
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_WriteSpare
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_IsBadBlock
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_BuildLUT
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Format_Cmd
</UL>

<P><STRONG><a name="[31a]"></a>NAND_FormatCapacity</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_nand.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>NAND_DispBadBlockInfo</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, bsp_nand.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ReadID
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_IsBadBlock
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[11c]"></a>bsp_InitLed</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, bsp_led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bsp_InitLed &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBoard
</UL>

<P><STRONG><a name="[ed]"></a>bsp_LedOn</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bsp_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_all_on
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_hour
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configured_LED
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_RW_ON
</UL>

<P><STRONG><a name="[ef]"></a>bsp_LedOff</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bsp_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_all_off
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_hour
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_NotConfigured_LED
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_RW_OFF
</UL>

<P><STRONG><a name="[31b]"></a>bsp_LedToggle</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, bsp_led.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wtd
</UL>

<P><STRONG><a name="[71]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wtd
</UL>

<P><STRONG><a name="[72]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wtd
</UL>

<P><STRONG><a name="[73]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ISR
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wtd
</UL>

<P><STRONG><a name="[74]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wtd
</UL>

<P><STRONG><a name="[31c]"></a>IWDG_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text), UNUSED)

<P><STRONG><a name="[31d]"></a>EXTI_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[31e]"></a>EXTI_Init</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[31f]"></a>EXTI_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[320]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[321]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[322]"></a>EXTI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>EXTI_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[128]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVICConfig
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsbDev
</UL>

<P><STRONG><a name="[129]"></a>NVIC_Init</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVICConfig
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsbDev
</UL>

<P><STRONG><a name="[92]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVICConfig
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[323]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[324]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>BKP_DeInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f10x_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_BackupResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[325]"></a>BKP_TamperPinLevelConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[326]"></a>BKP_TamperPinCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[327]"></a>BKP_ITConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[328]"></a>BKP_RTCOutputConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[329]"></a>BKP_SetRTCCalibrationValue</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>BKP_WriteBackupRegister</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f10x_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingSet_Save_IF
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassW_ChangeIF
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Check
</UL>

<P><STRONG><a name="[bd]"></a>BKP_ReadBackupRegister</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f10x_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassW_InputIF
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Message
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_IF
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Check
</UL>

<P><STRONG><a name="[32a]"></a>BKP_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>BKP_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[32b]"></a>BKP_GetITStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[32c]"></a>BKP_ClearITPendingBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>RTC_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Check
</UL>

<P><STRONG><a name="[16b]"></a>RTC_EnterConfigMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
</UL>

<P><STRONG><a name="[16c]"></a>RTC_ExitConfigMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
</UL>

<P><STRONG><a name="[a0]"></a>RTC_GetCounter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SAMPLING
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_hour
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery
</UL>

<P><STRONG><a name="[a2]"></a>RTC_SetCounter</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ISR
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SAMPLING
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Adjust
</UL>

<P><STRONG><a name="[127]"></a>RTC_SetPrescaler</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetPrescaler
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[16d]"></a>RTC_SetAlarm</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f10x_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>

<P><STRONG><a name="[32d]"></a>RTC_GetDivider</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>RTC_WaitForLastTask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ISR
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SAMPLING
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Adjust
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Check
</UL>

<P><STRONG><a name="[125]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Check
</UL>

<P><STRONG><a name="[32e]"></a>RTC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[32f]"></a>RTC_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[330]"></a>RTC_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[16e]"></a>PWR_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[de]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingSet_Save_IF
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassW_ChangeIF
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ISR
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[331]"></a>PWR_PVDCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[332]"></a>PWR_PVDLevelConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[333]"></a>PWR_WakeUpPinCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[334]"></a>PWR_EnterSTOPMode</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[335]"></a>PWR_EnterSTANDBYMode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[336]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[337]"></a>PWR_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>GPIO_DeInit</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[172]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[b0]"></a>GPIO_Init</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF905_GPIO_Configuration
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n95_Init_IO
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitLed
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsbDev
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitCH374
</UL>

<P><STRONG><a name="[338]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n95_SPI_WR_Byte
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n95_Sendout
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n95_Check_DR
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nrf905_Test
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSmain
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_PageCopyBackEx
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_PageCopyBack
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_ReadPage
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueryInterrupt
</UL>

<P><STRONG><a name="[339]"></a>GPIO_ReadInputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[33a]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[33b]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_to_udisk
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge_con_on
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_con_on
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;br_con_off
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingSet_Save_IF
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassW_ChangeIF
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_CalibrationIF
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n95_SPI_WR_Byte
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n95_Sendout
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n95_Init_IO
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n95_Init_Dev
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n95_Check_DR
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nrf905_Test
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSmain
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_Select
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCom_485
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskInsideCom_485
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitLed
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
</UL>

<P><STRONG><a name="[90]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_to_udisk
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_to_udisk
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge_con_off
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_con_off
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;br_con_on
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingSet_Save_IF
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassW_ChangeIF
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n95_SPI_WR_Byte
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFaultException
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFaultException
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManageException
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFaultException
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMIException
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n95_Sendout
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n95_Init_IO
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n95_Init_Dev
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n95_Check_DR
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nrf905_Test
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_Select
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
</UL>

<P><STRONG><a name="[33c]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[33d]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[33e]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[33f]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[340]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[341]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[342]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[343]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[344]"></a>FLASH_SetLatency</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[345]"></a>FLASH_HalfCycleAccessCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[346]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[347]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[348]"></a>FLASH_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>FLASH_GetStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[173]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_UserOptionByteConfig
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtection
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EnableWriteProtection
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramOptionByteData
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllPages
</UL>

<P><STRONG><a name="[e8]"></a>FLASH_ErasePage</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Format
</UL>

<P><STRONG><a name="[175]"></a>FLASH_EraseAllPages</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[176]"></a>FLASH_EraseOptionBytes</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[177]"></a>FLASH_ProgramWord</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[e6]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Format
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_VerifyPageFullWriteVariable
</UL>

<P><STRONG><a name="[178]"></a>FLASH_ProgramOptionByteData</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[179]"></a>FLASH_EnableWriteProtection</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[17a]"></a>FLASH_ReadOutProtection</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[17b]"></a>FLASH_UserOptionByteConfig</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[349]"></a>FLASH_GetUserOptionByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[34a]"></a>FLASH_GetWriteProtectionOptionByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[34b]"></a>FLASH_GetReadOutProtectionStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[34c]"></a>FLASH_GetPrefetchBufferStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[34d]"></a>FLASH_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[34e]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[34f]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>USART_DeInit</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[b1]"></a>USART_Init</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[350]"></a>USART_StructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[351]"></a>USART_ClockInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[352]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[aa]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ISR
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[353]"></a>USART_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[354]"></a>USART_SetAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[355]"></a>USART_WakeUpConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[356]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[357]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[358]"></a>USART_LINCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_SendData
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r485_Sendout
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[a9]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Scanf
</UL>

<P><STRONG><a name="[359]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[35a]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[35b]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[35c]"></a>USART_SmartCardCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[35d]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[35e]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[35f]"></a>USART_IrDAConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[360]"></a>USART_IrDACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_SendData
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r485_Sendout
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Scanf
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[b3]"></a>USART_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[a8]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[ac]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[361]"></a>FSMC_NORSRAMDeInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[362]"></a>FSMC_NANDDeInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[363]"></a>FSMC_PCCARDDeInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[2ad]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, stm32f10x_fsmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FSMC_NORSRAMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch374_CfgFSMC
</UL>

<P><STRONG><a name="[150]"></a>FSMC_NANDInit</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, stm32f10x_fsmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FSMC_NANDInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_Init
</UL>

<P><STRONG><a name="[364]"></a>FSMC_PCCARDInit</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[365]"></a>FSMC_NORSRAMStructInit</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[366]"></a>FSMC_NANDStructInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[367]"></a>FSMC_PCCARDStructInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[2ae]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch374_CfgFSMC
</UL>

<P><STRONG><a name="[151]"></a>FSMC_NANDCmd</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_Init
</UL>

<P><STRONG><a name="[368]"></a>FSMC_PCCARDCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[369]"></a>FSMC_NANDECCCmd</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[36a]"></a>FSMC_GetECC</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[36b]"></a>FSMC_ITConfig</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[36c]"></a>FSMC_GetFlagStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[36d]"></a>FSMC_ClearFlag</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[36e]"></a>FSMC_GetITStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[36f]"></a>FSMC_ClearITPendingBit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>ADC_DeInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[12c]"></a>ADC_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[370]"></a>ADC_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>ADC_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[12e]"></a>ADC_DMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[371]"></a>ADC_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[131]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[132]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[133]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[134]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcPro
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[372]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[373]"></a>ADC_DiscModeChannelCountConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[374]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f10x_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[375]"></a>ADC_ExternalTrigConvCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>ADC_GetConversionValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcPro
</UL>

<P><STRONG><a name="[376]"></a>ADC_GetDualModeConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[377]"></a>ADC_AutoInjectedConvCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[378]"></a>ADC_InjectedDiscModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[379]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[37a]"></a>ADC_ExternalTrigInjectedConvCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[37b]"></a>ADC_SoftwareStartInjectedConvCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[37c]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[37d]"></a>ADC_InjectedChannelConfig</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[37e]"></a>ADC_InjectedSequencerLengthConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[37f]"></a>ADC_SetInjectedOffset</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[380]"></a>ADC_GetInjectedConversionValue</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[381]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[382]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[383]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[384]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[385]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[386]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[387]"></a>ADC_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[388]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[389]"></a>RCC_DeInit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[38a]"></a>RCC_HSEConfig</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wtd
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Check
</UL>

<P><STRONG><a name="[17f]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[38b]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[38c]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[38d]"></a>RCC_PLLConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[38e]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[38f]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[390]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[391]"></a>RCC_HCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[392]"></a>RCC_PCLK1Config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[393]"></a>RCC_PCLK2Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[394]"></a>RCC_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[260]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsbDev
</UL>

<P><STRONG><a name="[395]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>RCC_LSEConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[396]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[124]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[17d]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[14f]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitCH374
</UL>

<P><STRONG><a name="[af]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF905_GPIO_Configuration
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitLed
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsbDev
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitCH374
</UL>

<P><STRONG><a name="[120]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ISR
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsbDev
</UL>

<P><STRONG><a name="[171]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[16f]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_DeInit
</UL>

<P><STRONG><a name="[16a]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
</UL>

<P><STRONG><a name="[397]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[398]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>RCC_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wtd
</UL>

<P><STRONG><a name="[399]"></a>RCC_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[39a]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>OSInitHookBegin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[193]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[19d]"></a>OSTaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[1ce]"></a>OSTaskDelHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[18c]"></a>OSTaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[18a]"></a>OSTaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[1ca]"></a>OSTaskStkInit</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[60]"></a>OSTaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(.text)
</UL>
<P><STRONG><a name="[19c]"></a>OSTCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[180]"></a>OSTimeTickHook</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[9c]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickHandler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelReq
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemQuery
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxQuery
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPostOpt
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPendAbort
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxDel
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxAccept
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendGetFlagsRdy
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
</UL>

<P><STRONG><a name="[9d]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickHandler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelReq
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemQuery
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxQuery
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPostOpt
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPendAbort
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxDel
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxAccept
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendGetFlagsRdy
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
</UL>

<P><STRONG><a name="[19a]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[198]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[195]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[18]"></a>OSPendSV</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[183]"></a>OS_StrCopy</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrNameGet
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
</UL>

<P><STRONG><a name="[182]"></a>OSEventNameGet</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[185]"></a>OS_StrLen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
</UL>

<P><STRONG><a name="[184]"></a>OSEventNameSet</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSEventNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[186]"></a>OS_TaskStatStkChk</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[188]"></a>OS_TaskStat</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OS_TaskStat &rArr; OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[18b]"></a>OS_TaskIdle</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[18e]"></a>OS_MemClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[93]"></a>OSInit</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OSTmr_Init &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[39b]"></a>OSIntEnter</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>OSIntExit</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(.text)
</UL>
<P><STRONG><a name="[196]"></a>OSSchedLock</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[197]"></a>OS_Sched</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPostOpt
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPendAbort
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxDel
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
</UL>

<P><STRONG><a name="[199]"></a>OSSchedUnlock</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[94]"></a>OSStart</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>OSStatInit</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSStatInit &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[9e]"></a>OSTimeTick</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = OSTimeTick &rArr; OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickHandler
</UL>

<P><STRONG><a name="[39c]"></a>OSVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>OS_Dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[1ad]"></a>OS_EventTaskRdy</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPostOpt
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPendAbort
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxDel
</UL>

<P><STRONG><a name="[1ae]"></a>OS_EventTaskWait</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_EventTaskWait
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>

<P><STRONG><a name="[1af]"></a>OS_EventTOAbort</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTOAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>

<P><STRONG><a name="[1ab]"></a>OS_EventWaitListInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
</UL>

<P><STRONG><a name="[1d4]"></a>OS_MemCopy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
</UL>

<P><STRONG><a name="[19b]"></a>OS_TCBInit</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[19e]"></a>OSFlagAccept</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[19f]"></a>OSFlagCreate</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1a1]"></a>OS_FlagUnlink</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
</UL>

<P><STRONG><a name="[1a2]"></a>OSFlagDel</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1a3]"></a>OSFlagNameGet</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[1a4]"></a>OSFlagNameSet</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[1a5]"></a>OSFlagPend</STRONG> (Thumb, 380 bytes, Stack size 64 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagBlock
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1a7]"></a>OSFlagPendGetFlagsRdy</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1a8]"></a>OSFlagPost</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1a9]"></a>OSFlagQuery</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[18f]"></a>OS_FlagInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, os_flag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_FlagInit
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1aa]"></a>OSMboxAccept</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, os_mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[8c]"></a>OSMboxCreate</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, os_mbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSMboxCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[1ac]"></a>OSMboxDel</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, os_mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[80]"></a>OSMboxPend</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, os_mbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSMboxPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTOAbort
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf905_return_para_all
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_para_all
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_all_capacity
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_all_res
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskUserif
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCom_485
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskInsideCom_485
</UL>

<P><STRONG><a name="[1b0]"></a>OSMboxPendAbort</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, os_mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[7a]"></a>OSMboxPost</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, os_mbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = OSMboxPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskInsideCom_485
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskNrf905
</UL>

<P><STRONG><a name="[1b1]"></a>OSMboxPostOpt</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, os_mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1b2]"></a>OSMboxQuery</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, os_mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1b3]"></a>OSMemCreate</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1b4]"></a>OSMemGet</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1b5]"></a>OSMemNameGet</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[1b6]"></a>OSMemNameSet</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[1b7]"></a>OSMemPut</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1b8]"></a>OSMemQuery</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[190]"></a>OS_MemInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, os_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_MemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1b9]"></a>OSQAccept</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1ba]"></a>OSQCreate</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>

<P><STRONG><a name="[1bb]"></a>OSQDel</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1bc]"></a>OSQFlush</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1bd]"></a>OSQPend</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTOAbort
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1be]"></a>OSQPendAbort</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1bf]"></a>OSQPost</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1c0]"></a>OSQPostFront</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1c1]"></a>OSQPostOpt</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1c2]"></a>OSQQuery</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[191]"></a>OS_QInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1c3]"></a>OSSemAccept</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[8d]"></a>OSSemCreate</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[1c4]"></a>OSSemDel</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[78]"></a>OSSemPend</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTOAbort
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_CalibrationIF
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskGSM
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskNrf905
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Lock
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[1c5]"></a>OSSemPendAbort</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[7d]"></a>OSSemPost</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_CalibrationIF
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Message
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nrf905_Test
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskNrf905
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlock
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
</UL>

<P><STRONG><a name="[1c6]"></a>OSSemQuery</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1c7]"></a>OSSemSet</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1c8]"></a>OSTaskChangePrio</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1c9]"></a>OSTaskCreate</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
</UL>

<P><STRONG><a name="[1cb]"></a>OS_TaskStkClr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, os_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[88]"></a>OSTaskCreateExt</STRONG> (Thumb, 152 bytes, Stack size 64 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkClr
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[1cc]"></a>OSTaskDel</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dummy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
</UL>

<P><STRONG><a name="[1cf]"></a>OSTaskDelReq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1d0]"></a>OSTaskNameGet</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[89]"></a>OSTaskNameSet</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTaskNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[1d1]"></a>OSTaskResume</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[187]"></a>OSTaskStkChk</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>

<P><STRONG><a name="[1d2]"></a>OSTaskSuspend</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1d3]"></a>OSTaskQuery</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemCopy
</UL>

<P><STRONG><a name="[189]"></a>OSTimeDly</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[7c]"></a>OSTimeDlyHMSM</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingSet_Save_IF
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassW_ChangeIF
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_CalibrationIF
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nrf905_Test
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSmain
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaCal
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskNrf905
</UL>

<P><STRONG><a name="[1d5]"></a>OSTimeDlyResume</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1d6]"></a>OSTimeGet</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1d7]"></a>OSTimeSet</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1d8]"></a>OSTmrCreate</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Lock
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlock
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[1db]"></a>OSTmrDel</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Lock
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlock
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Free
</UL>

<P><STRONG><a name="[1de]"></a>OSTmrNameGet</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Lock
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlock
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[1df]"></a>OSTmrRemainGet</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Lock
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlock
</UL>

<P><STRONG><a name="[1e0]"></a>OSTmrStateGet</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Lock
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlock
</UL>

<P><STRONG><a name="[1e1]"></a>OSTmrStart</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Lock
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlock
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Link
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
</UL>

<P><STRONG><a name="[1e3]"></a>OSTmrStop</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Lock
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlock
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
</UL>

<P><STRONG><a name="[181]"></a>OSTmrSignal</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>

<P><STRONG><a name="[192]"></a>OSTmr_Init</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OSTmr_Init &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[14b]"></a>SystemInit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemInit &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[1e5]"></a>SendBeginCMD</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[1e7]"></a>SendEndCmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hmi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetControlValue
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetScreen
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplyLayer
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLayer
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouchScreen
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTouchScreen_Adj
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTouchScreen
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCommBps
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBuzzer
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBackLight
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PolygonFill
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_EllipseFill
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Ellipse
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AreaInycolor
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectangleFill
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Rectangle
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Arc
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CircleFill
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Circle
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ConDots
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Dot
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisFlashImage
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCut_Image
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisArea_Image
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisFull_Image
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCursor
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisText
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFilterColor
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFont_Region
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextSpace
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CleanScreen
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorPicker
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBcolor
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFcolor
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHandShake
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetProg_Meter_Slider_Value
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlValue
</UL>

<P><STRONG><a name="[1e8]"></a>SetHandShake</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>

<P><STRONG><a name="[1e9]"></a>SetFcolor</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>

<P><STRONG><a name="[1ea]"></a>SetBcolor</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Welcome
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainDis
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Confirm
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmSet
</UL>

<P><STRONG><a name="[1eb]"></a>ColorPicker</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>

<P><STRONG><a name="[1ec]"></a>GUI_CleanScreen</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Welcome
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainDis
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Confirm
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmSet
</UL>

<P><STRONG><a name="[1ed]"></a>SetTextSpace</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>

<P><STRONG><a name="[1ee]"></a>SetFont_Region</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>

<P><STRONG><a name="[1ef]"></a>SetFilterColor</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>

<P><STRONG><a name="[1f0]"></a>DisText</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStrings
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>

<P><STRONG><a name="[1f2]"></a>DisCursor</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>

<P><STRONG><a name="[1f3]"></a>DisFull_Image</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Welcome
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Confirm
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmSet
</UL>

<P><STRONG><a name="[1f4]"></a>DisArea_Image</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainDis
</UL>

<P><STRONG><a name="[1f5]"></a>DisCut_Image</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>

<P><STRONG><a name="[1f6]"></a>DisFlashImage</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainDis
</UL>

<P><STRONG><a name="[1f7]"></a>GUI_Dot</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>

<P><STRONG><a name="[1f8]"></a>GUI_Line</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>

<P><STRONG><a name="[1f9]"></a>GUI_ConDots</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>

<P><STRONG><a name="[1fa]"></a>GUI_Circle</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>

<P><STRONG><a name="[1fb]"></a>GUI_CircleFill</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>

<P><STRONG><a name="[1fc]"></a>GUI_Arc</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>

<P><STRONG><a name="[1fd]"></a>GUI_Rectangle</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>

<P><STRONG><a name="[1fe]"></a>GUI_RectangleFill</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>

<P><STRONG><a name="[1ff]"></a>GUI_AreaInycolor</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>

<P><STRONG><a name="[200]"></a>GUI_Ellipse</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>

<P><STRONG><a name="[201]"></a>GUI_EllipseFill</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>

<P><STRONG><a name="[202]"></a>GUI_PolygonFill</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>

<P><STRONG><a name="[203]"></a>SetBackLight</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>

<P><STRONG><a name="[204]"></a>SetBuzzer</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>

<P><STRONG><a name="[205]"></a>SetCommBps</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>

<P><STRONG><a name="[206]"></a>SetTouchScreen</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>

<P><STRONG><a name="[207]"></a>SetTouchScreen_Adj</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>

<P><STRONG><a name="[208]"></a>TestTouchScreen</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>

<P><STRONG><a name="[209]"></a>WriteLayer</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>

<P><STRONG><a name="[20a]"></a>DisplyLayer</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>

<P><STRONG><a name="[d6]"></a>SetScreen</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hmi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetScreen &rArr; SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abnormal_show
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassW_InputIF
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassW_ChangeIF
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calib_PassWorldIF
</UL>

<P><STRONG><a name="[20b]"></a>GetScreen</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>

<P><STRONG><a name="[db]"></a>SetButtonValue</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, hmi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SetButtonValue &rArr; SetControlValue &rArr; SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlValue
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abnormal_show
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_CalibrationIF
</UL>

<P><STRONG><a name="[d1]"></a>SetTextValue</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hmi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetTextValue &rArr; SetControlValue &rArr; SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlValue
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abnormal_show
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassW_InputIF
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassW_ChangeIF
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_CalibrationIF
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calib_PassWorldIF
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abnor_BatteryIF
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_IF
</UL>

<P><STRONG><a name="[d4]"></a>SetProgressValue</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hmi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetProgressValue &rArr; SetProg_Meter_Slider_Value &rArr; SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetProg_Meter_Slider_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abnormal_show
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abnor_BatteryIF
</UL>

<P><STRONG><a name="[20e]"></a>SetMeterValue</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetProg_Meter_Slider_Value
</UL>

<P><STRONG><a name="[20f]"></a>SetSliderValue</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetProg_Meter_Slider_Value
</UL>

<P><STRONG><a name="[210]"></a>GetControlValue</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>

<P><STRONG><a name="[211]"></a>AlarmSet</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisFull_Image
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CleanScreen
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBcolor
</UL>

<P><STRONG><a name="[212]"></a>Confirm</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisFull_Image
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CleanScreen
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBcolor
</UL>

<P><STRONG><a name="[213]"></a>MainDis</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisFlashImage
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisArea_Image
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CleanScreen
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBcolor
</UL>

<P><STRONG><a name="[214]"></a>Welcome</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hmi_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisFull_Image
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CleanScreen
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBcolor
</UL>

<P><STRONG><a name="[39d]"></a>UartInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hmi_user_uart.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>SendChar</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hmi_user_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScreen
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStrings
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetControlValue
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetScreen
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplyLayer
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLayer
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouchScreen
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTouchScreen_Adj
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTouchScreen
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCommBps
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBuzzer
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBackLight
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PolygonFill
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_EllipseFill
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Ellipse
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AreaInycolor
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectangleFill
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Rectangle
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Arc
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CircleFill
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Circle
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ConDots
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Dot
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisFlashImage
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCut_Image
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisArea_Image
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisFull_Image
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCursor
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisText
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFilterColor
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFont_Region
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextSpace
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CleanScreen
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorPicker
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBcolor
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFcolor
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHandShake
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetProg_Meter_Slider_Value
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetControlValue
</UL>

<P><STRONG><a name="[1f1]"></a>SendStrings</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hmi_user_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisText
</UL>

<P><STRONG><a name="[215]"></a>disk_initialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = disk_initialize &rArr; NAND_Init &rArr; FSMC_NAND_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_mount
</UL>

<P><STRONG><a name="[22c]"></a>disk_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_mount
</UL>

<P><STRONG><a name="[22d]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[216]"></a>disk_read</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = disk_read &rArr; NAND_Read &rArr; FSMC_NAND_ReadData &rArr; FSMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_mount
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[217]"></a>disk_write</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = disk_write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[21b]"></a>disk_ioctl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
</UL>

<P><STRONG><a name="[f9]"></a>f_mount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_to_udisk
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_inf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_hour
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_dis_time
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_conf
</UL>

<P><STRONG><a name="[fb]"></a>f_open</STRONG> (Thumb, 354 bytes, Stack size 88 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_mount
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_to_udisk
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_inf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_hour
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_dis_time
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_conf
</UL>

<P><STRONG><a name="[ff]"></a>f_read</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; disk_write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_to_udisk
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
</UL>

<P><STRONG><a name="[139]"></a>f_write</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_inf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_hour
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_dis_time
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_putc
</UL>

<P><STRONG><a name="[22f]"></a>f_sync</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = f_sync &rArr; sync &rArr; move_window &rArr; disk_write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[102]"></a>f_close</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = f_close &rArr; f_sync &rArr; sync &rArr; move_window &rArr; disk_write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_to_udisk
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_inf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_hour
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_dis_time
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_conf
</UL>

<P><STRONG><a name="[138]"></a>f_lseek</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_inf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_hour
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_dis_time
</UL>

<P><STRONG><a name="[fa]"></a>f_opendir</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_mount
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_to_udisk
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_inf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_hour
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_dis_time
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_conf
</UL>

<P><STRONG><a name="[230]"></a>f_readdir</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_seek
</UL>

<P><STRONG><a name="[232]"></a>f_stat</STRONG> (Thumb, 58 bytes, Stack size 64 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_mount
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
</UL>

<P><STRONG><a name="[233]"></a>f_getfree</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_mount
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[234]"></a>f_truncate</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>

<P><STRONG><a name="[235]"></a>f_unlink</STRONG> (Thumb, 144 bytes, Stack size 80 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_mount
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_seek
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
</UL>

<P><STRONG><a name="[236]"></a>f_mkdir</STRONG> (Thumb, 396 bytes, Stack size 104 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_mount
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>

<P><STRONG><a name="[237]"></a>f_chmod</STRONG> (Thumb, 74 bytes, Stack size 64 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_mount
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
</UL>

<P><STRONG><a name="[238]"></a>f_utime</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_mount
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
</UL>

<P><STRONG><a name="[239]"></a>f_rename</STRONG> (Thumb, 244 bytes, Stack size 112 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_mount
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[114]"></a>f_gets</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = f_gets &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; disk_write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_conf
</UL>

<P><STRONG><a name="[23a]"></a>f_putc</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
</UL>

<P><STRONG><a name="[23b]"></a>f_puts</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
</UL>

<P><STRONG><a name="[23c]"></a>f_printf</STRONG> (Thumb, 300 bytes, Stack size 64 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_putc
</UL>

<P><STRONG><a name="[23d]"></a>MAL_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mass_mal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MAL_Init &rArr; NAND_Init &rArr; FSMC_NAND_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsbDev
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Config
</UL>

<P><STRONG><a name="[23e]"></a>MAL_Write</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mass_mal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MAL_Write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Write
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Memory
</UL>

<P><STRONG><a name="[23f]"></a>MAL_Read</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mass_mal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MAL_Read &rArr; NAND_Read &rArr; FSMC_NAND_ReadData &rArr; FSMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Read
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Memory
</UL>

<P><STRONG><a name="[240]"></a>MAL_GetStatus</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, mass_mal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MAL_GetStatus &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ReadID
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_TestUnitReady_Cmd
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity_Cmd
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10_Cmd
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Format_Cmd
</UL>

<P><STRONG><a name="[241]"></a>Read_Memory</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Read_Memory &rArr; MAL_Read &rArr; NAND_Read &rArr; FSMC_NAND_ReadData &rArr; FSMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_RW_ON
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_RW_OFF
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10_Cmd
</UL>

<P><STRONG><a name="[247]"></a>Write_Memory</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Write_Memory &rArr; MAL_Write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_RW_ON
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_RW_OFF
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
</UL>

<P><STRONG><a name="[249]"></a>Set_CSW</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usb_bot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Set_CSW &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Verify10_Cmd
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_TestUnitReady_Cmd
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Start_Stop_Unit_Cmd
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity_Cmd
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10_Cmd
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10_Cmd
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Invalid_Cmd
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Format_Cmd
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_Out
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_In
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Memory
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Valid_Cmd
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Address_Management
</UL>

<P><STRONG><a name="[24a]"></a>Mass_Storage_In</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, usb_bot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Mass_Storage_In &rArr; SCSI_Read10_Cmd &rArr; Read_Memory &rArr; MAL_Read &rArr; NAND_Read &rArr; FSMC_NAND_ReadData &rArr; FSMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10_Cmd
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP1_IN_Callback
</UL>

<P><STRONG><a name="[24c]"></a>Bot_Abort</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usb_bot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bot_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Verify10_Cmd
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_TestUnitReady_Cmd
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity_Cmd
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10_Cmd
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10_Cmd
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Invalid_Cmd
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Format_Cmd
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_Out
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Valid_Cmd
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Address_Management
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_ClearFeature
</UL>

<P><STRONG><a name="[24d]"></a>CBW_Decode</STRONG> (Thumb, 388 bytes, Stack size 16 bytes, usb_bot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CBW_Decode &rArr; SCSI_Write10_Cmd &rArr; Write_Memory &rArr; MAL_Write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Verify10_Cmd
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_TestUnitReady_Cmd
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Start_Stop_Unit_Cmd
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_RequestSense_Cmd
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity_Cmd
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10_Cmd
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10_Cmd
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ModeSense6_Cmd
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ModeSense10_Cmd
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Invalid_Cmd
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Inquiry_Cmd
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Format_Cmd
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_Out
</UL>

<P><STRONG><a name="[25b]"></a>Mass_Storage_Out</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usb_bot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Mass_Storage_Out &rArr; CBW_Decode &rArr; SCSI_Write10_Cmd &rArr; Write_Memory &rArr; MAL_Write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP2_OUT_Callback
</UL>

<P><STRONG><a name="[25d]"></a>Transfer_Data_Request</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usb_bot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Transfer_Data_Request &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_RequestSense_Cmd
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity_Cmd
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10_Cmd
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ModeSense6_Cmd
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ModeSense10_Cmd
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Inquiry_Cmd
</UL>

<P><STRONG><a name="[0]"></a>EP1_IN_Callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usb_endp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EP1_IN_Callback &rArr; Mass_Storage_In &rArr; SCSI_Read10_Cmd &rArr; Read_Memory &rArr; MAL_Read &rArr; NAND_Read &rArr; FSMC_NAND_ReadData &rArr; FSMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_In
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>EP2_OUT_Callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usb_endp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = EP2_OUT_Callback &rArr; Mass_Storage_Out &rArr; CBW_Decode &rArr; SCSI_Write10_Cmd &rArr; Write_Memory &rArr; MAL_Write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_Out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[25e]"></a>MAL_Config</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_hw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Init
</UL>

<P><STRONG><a name="[25f]"></a>USB_Cable_Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_hw.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsbDev
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOff
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
</UL>

<P><STRONG><a name="[118]"></a>InitUsbDev</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, usb_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = InitUsbDev &rArr; MAL_Init &rArr; NAND_Init &rArr; FSMC_NAND_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_USBCLKConfig
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSmain
</UL>

<P><STRONG><a name="[245]"></a>Led_RW_ON</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_hw.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOn
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Memory
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Memory
</UL>

<P><STRONG><a name="[246]"></a>Led_RW_OFF</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_hw.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOff
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Memory
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Memory
</UL>

<P><STRONG><a name="[262]"></a>USB_Configured_LED</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_hw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOn
</UL>

<P><STRONG><a name="[263]"></a>USB_NotConfigured_LED</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_hw.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOff
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[264]"></a>Get_SerialNum</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usb_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_init
</UL>

<P><STRONG><a name="[277]"></a>Enter_LowPowerMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_hw.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suspend
</UL>

<P><STRONG><a name="[279]"></a>Leave_LowPowerMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb_hw.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_Init
</UL>

<P><STRONG><a name="[a7]"></a>USB_Istr</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usb_istr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USB_Istr &rArr; CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[3]"></a>MASS_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usb_prop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MASS_init &rArr; Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Init
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>MASS_Reset</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, usb_prop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MASS_Reset &rArr; SetDeviceAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_NotConfigured_LED
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPType
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxAddr
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxValid
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxAddr
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceAddress
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBTABLE
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Status_Out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>Mass_Storage_SetConfiguration</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usb_prop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Mass_Storage_SetConfiguration
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_TX
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_RX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>Mass_Storage_ClearFeature</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Mass_Storage_ClearFeature &rArr; Bot_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>Mass_Storage_SetDeviceAddress</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>MASS_Status_In</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>MASS_Status_Out</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[273]"></a>Get_Max_Lun</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Data_Setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.text)
</UL>
<P><STRONG><a name="[7]"></a>MASS_Data_Setup</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, usb_prop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MASS_Data_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Max_Lun
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>MASS_NoData_Setup</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usb_prop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MASS_NoData_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_TX
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_RX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>MASS_Get_Interface_Setting</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>MASS_GetDeviceDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>MASS_GetConfigDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>MASS_GetStringDescriptor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[267]"></a>PowerOn</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usb_pwr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PowerOn
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_init
</UL>

<P><STRONG><a name="[275]"></a>PowerOff</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
</UL>

<P><STRONG><a name="[276]"></a>Suspend</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_LowPowerMode
</UL>

<P><STRONG><a name="[278]"></a>Resume_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_LowPowerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume
</UL>

<P><STRONG><a name="[27a]"></a>Resume</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, usb_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_Init
</UL>

<P><STRONG><a name="[250]"></a>SCSI_Inquiry_Cmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usb_scsi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SCSI_Inquiry_Cmd &rArr; Transfer_Data_Request &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[24e]"></a>Set_Scsi_Sense_Data</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_scsi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Verify10_Cmd
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_TestUnitReady_Cmd
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity_Cmd
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10_Cmd
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10_Cmd
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Invalid_Cmd
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Format_Cmd
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_Out
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Valid_Cmd
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Address_Management
</UL>

<P><STRONG><a name="[254]"></a>SCSI_ReadFormatCapacity_Cmd</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, usb_scsi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCSI_ReadFormatCapacity_Cmd &rArr; Transfer_Data_Request &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[255]"></a>SCSI_ReadCapacity10_Cmd</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, usb_scsi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCSI_ReadCapacity10_Cmd &rArr; Transfer_Data_Request &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[252]"></a>SCSI_ModeSense6_Cmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_scsi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SCSI_ModeSense6_Cmd &rArr; Transfer_Data_Request &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[253]"></a>SCSI_ModeSense10_Cmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_scsi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SCSI_ModeSense10_Cmd &rArr; Transfer_Data_Request &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[24f]"></a>SCSI_RequestSense_Cmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_scsi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SCSI_RequestSense_Cmd &rArr; Transfer_Data_Request &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[251]"></a>SCSI_Start_Stop_Unit_Cmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_scsi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SCSI_Start_Stop_Unit_Cmd &rArr; Set_CSW &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[27b]"></a>SCSI_Address_Management</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, usb_scsi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCSI_Address_Management &rArr; Set_CSW &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10_Cmd
</UL>

<P><STRONG><a name="[24b]"></a>SCSI_Read10_Cmd</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, usb_scsi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SCSI_Read10_Cmd &rArr; Read_Memory &rArr; MAL_Read &rArr; NAND_Read &rArr; FSMC_NAND_ReadData &rArr; FSMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Memory
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Address_Management
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_In
</UL>

<P><STRONG><a name="[257]"></a>SCSI_Write10_Cmd</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, usb_scsi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SCSI_Write10_Cmd &rArr; Write_Memory &rArr; MAL_Write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Memory
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Address_Management
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_Out
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[258]"></a>SCSI_Verify10_Cmd</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usb_scsi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCSI_Verify10_Cmd &rArr; Set_CSW &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[27c]"></a>SCSI_Valid_Cmd</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usb_scsi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
</UL>

<P><STRONG><a name="[256]"></a>SCSI_TestUnitReady_Cmd</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usb_scsi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCSI_TestUnitReady_Cmd &rArr; Set_CSW &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[259]"></a>SCSI_Format_Cmd</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usb_scsi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SCSI_Format_Cmd &rArr; NAND_Format &rArr; NAND_BuildLUT &rArr; FSMC_NAND_ReadSpare &rArr; FSMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Format
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[25a]"></a>SCSI_Invalid_Cmd</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usb_scsi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCSI_Invalid_Cmd &rArr; Set_CSW &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[287]"></a>Standard_GetConfiguration</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetConfiguration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(.text)
</UL>
<P><STRONG><a name="[282]"></a>Standard_SetConfiguration</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[288]"></a>Standard_GetInterface</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(.text)
</UL>
<P><STRONG><a name="[284]"></a>Standard_SetInterface</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[286]"></a>Standard_GetStatus</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(.text)
</UL>
<P><STRONG><a name="[27d]"></a>Standard_ClearFeature</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Standard_ClearFeature
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_TX
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_RX
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[285]"></a>Standard_SetEndPointFeature</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Standard_SetEndPointFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[283]"></a>Standard_SetDeviceFeature</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetDeviceFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[274]"></a>Standard_GetDescriptorData</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_GetStringDescriptor
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_GetConfigDescriptor
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_GetDeviceDescriptor
</UL>

<P><STRONG><a name="[28a]"></a>Post0_Process</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Post0_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[28b]"></a>Setup0_Process</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSwap
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[270]"></a>SetDeviceAddress</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetDeviceAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[28d]"></a>In0_Process</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = In0_Process &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[28e]"></a>Out0_Process</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Out0_Process &rArr; DataStageOut
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[1]"></a>NOP_Process</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR>[Address Reference Count : 3]<UL><LI> usb_prop.o(.data)
<LI> usb_istr.o(.data)
<LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[261]"></a>USB_Init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsbDev
</UL>

<P><STRONG><a name="[266]"></a>CTR_LP</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, usb_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[a6]"></a>CTR_HP</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, usb_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CTR_HP
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HP_CAN1_TX_IRQHandler
</UL>

<P><STRONG><a name="[280]"></a>UserToPMABufferCopy</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usb_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserToPMABufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>

<P><STRONG><a name="[291]"></a>PMAToUserBufferCopy</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb_mem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>

<P><STRONG><a name="[39e]"></a>SetCNTR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[39f]"></a>GetCNTR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[3a0]"></a>SetISTR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[3a1]"></a>GetISTR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[3a2]"></a>GetFNR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[3a3]"></a>SetDADDR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[3a4]"></a>GetDADDR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[269]"></a>SetBTABLE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[3a5]"></a>GetBTABLE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[3a6]"></a>SetENDPOINT</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[293]"></a>GetENDPOINT</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDouBleBuffEPStall
</UL>

<P><STRONG><a name="[26a]"></a>SetEPType</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[3a7]"></a>GetEPType</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>SetEPTxStatus</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Memory
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[248]"></a>SetEPRxStatus</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_In
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Memory
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[292]"></a>SetDouBleBuffEPStall</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, usb_regs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetENDPOINT
</UL>

<P><STRONG><a name="[3a8]"></a>GetEPTxStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[3a9]"></a>GetEPRxStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[3aa]"></a>SetEPTxValid</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>SetEPRxValid</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[3ab]"></a>SetEP_KIND</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[3ac]"></a>ClearEP_KIND</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>Clear_Status_Out</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[3ad]"></a>Set_Status_Out</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[3ae]"></a>SetEPDoubleBuff</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[3af]"></a>ClearEPDoubleBuff</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[3b0]"></a>GetTxStallStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[3b1]"></a>GetRxStallStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[3b2]"></a>ClearEP_CTR_RX</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[3b3]"></a>ClearEP_CTR_TX</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[3b4]"></a>ToggleDTOG_RX</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[3b5]"></a>ToggleDTOG_TX</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>ClearDTOG_RX</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_NoData_Setup
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_SetConfiguration
</UL>

<P><STRONG><a name="[271]"></a>ClearDTOG_TX</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_NoData_Setup
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_SetConfiguration
</UL>

<P><STRONG><a name="[3b6]"></a>SetEPAddress</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[3b7]"></a>GetEPAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[26d]"></a>SetEPTxAddr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[26b]"></a>SetEPRxAddr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[27f]"></a>GetEPTxAddr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>

<P><STRONG><a name="[290]"></a>GetEPRxAddr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>

<P><STRONG><a name="[243]"></a>SetEPTxCount</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Memory
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>

<P><STRONG><a name="[3b8]"></a>SetEPCountRxReg</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>SetEPRxCount</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[3b9]"></a>GetEPTxCount</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[294]"></a>GetEPRxCount</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
</UL>

<P><STRONG><a name="[3ba]"></a>SetEPDblBuffAddr</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[3bb]"></a>SetEPDblBuf0Addr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[3bc]"></a>SetEPDblBuf1Addr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[3bd]"></a>GetEPDblBuf0Addr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[3be]"></a>GetEPDblBuf1Addr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[3bf]"></a>SetEPDblBuffCount</STRONG> (Thumb, 156 bytes, Stack size 28 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[3c0]"></a>SetEPDblBuf0Count</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[3c1]"></a>SetEPDblBuf1Count</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[3c2]"></a>GetEPDblBuf0Count</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[3c3]"></a>GetEPDblBuf1Count</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[3c4]"></a>GetEPDblBufDir</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[3c5]"></a>FreeUserBuffer</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[3c6]"></a>ToWord</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[28c]"></a>ByteSwap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[268]"></a>USB_SIL_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_sil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_init
</UL>

<P><STRONG><a name="[242]"></a>USB_SIL_Write</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_sil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPTxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Memory
</UL>

<P><STRONG><a name="[25c]"></a>USB_SIL_Read</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usb_sil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_SIL_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxCount
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMAToUserBufferCopy
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_Out
</UL>

<P><STRONG><a name="[295]"></a>xQueryInterrupt</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_ch374.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xQueryInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374HostTransact
</UL>

<P><STRONG><a name="[2c7]"></a>xDelayAfterWrite</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_ch374.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
</UL>

<P><STRONG><a name="[2d3]"></a>xFileNameEnumer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_ch374.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileOpen
</UL>

<P><STRONG><a name="[106]"></a>CH374LibInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_ch374.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CH374LibInit &rArr; CH374Init &rArr; CH374s29
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374Init
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374GetVer
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_to_udisk
</UL>

<P><STRONG><a name="[104]"></a>bsp_InitCH374</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, bsp_ch374.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bsp_InitCH374 &rArr; ch374_CfgFSMC &rArr; FSMC_NORSRAMInit
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch374_CfgFSMC
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_to_udisk
</UL>

<P><STRONG><a name="[29a]"></a>Read374Data</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_ch374.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_BLOCK64
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_BLOCK
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
</UL>

<P><STRONG><a name="[299]"></a>CH374_READ_REGISTER</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_ch374.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read374Data
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch374_DetectOk
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374EmbHubEnable
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374CtrlTransfer
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374HostTransact
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374EmbHubAttach
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DelaymS
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374Init
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
</UL>

<P><STRONG><a name="[105]"></a>ch374_DetectOk</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, bsp_ch374.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ch374_DetectOk
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_to_udisk
</UL>

<P><STRONG><a name="[109]"></a>ch374_DiskSize</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_ch374.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ch374_DiskSize &rArr; CH374DiskSize &rArr; CH374s22 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskSize
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_to_udisk
</UL>

<P><STRONG><a name="[29c]"></a>ch374_OpenFile</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_ch374.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileOpen
</UL>

<P><STRONG><a name="[101]"></a>ch374_CloseFile</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_ch374.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ch374_CloseFile &rArr; CH374FileClose &rArr; CH374s15 &rArr; CH374s07 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileClose
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_to_udisk
</UL>

<P><STRONG><a name="[fc]"></a>ch374_CreateFile</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_ch374.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ch374_CreateFile &rArr; CH374FileCreate &rArr; CH374FileErase &rArr; CH374FileOpen &rArr; CH374s10 &rArr; CH374s09 &rArr; CH374s07 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_to_udisk
</UL>

<P><STRONG><a name="[2a0]"></a>ch374_SeekFile</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_ch374.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374ByteLocate
</UL>

<P><STRONG><a name="[2a2]"></a>ch374_ReadFile</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, bsp_ch374.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374ByteRead
</UL>

<P><STRONG><a name="[100]"></a>ch374_WriteFile</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, bsp_ch374.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ch374_WriteFile &rArr; CH374ByteWrite &rArr; CH374s20 &rArr; CH374s32 &rArr; CH374s10 &rArr; CH374s09 &rArr; CH374s07 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374ByteWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_to_udisk
</UL>

<P><STRONG><a name="[2a5]"></a>ch374_FindFile</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, bsp_ch374.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileOpen
</UL>

<P><STRONG><a name="[fe]"></a>ch374_ModifyFileDate</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp_ch374.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ch374_ModifyFileDate &rArr; CH374FileModify &rArr; CH374s07 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileModify
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_to_udisk
</UL>

<P><STRONG><a name="[2a7]"></a>ch374_DeleteFile</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_ch374.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileErase
</UL>

<P><STRONG><a name="[3c7]"></a>Write374Index</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_ch374.o(.text), UNUSED)

<P><STRONG><a name="[3c8]"></a>Write374Data</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_ch374.o(.text), UNUSED)

<P><STRONG><a name="[2aa]"></a>Read374Data0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_ch374.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modify374Byte
</UL>

<P><STRONG><a name="[2b1]"></a>CH374_WRITE_REGISTER</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_ch374.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s18
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s13
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s17
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s21
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s23
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374EmbHubEnable
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374CtrlTransfer
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374HostTransact
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s30
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s31
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s29
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374Init
</UL>

<P><STRONG><a name="[2a9]"></a>Modify374Byte</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, bsp_ch374.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read374Data0
</UL>

<P><STRONG><a name="[2ab]"></a>CH374_READ_BLOCK</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, bsp_ch374.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CH374_READ_BLOCK
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read374Data
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374CtrlTransfer
</UL>

<P><STRONG><a name="[2bf]"></a>CH374_WRITE_BLOCK</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp_ch374.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s18
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
</UL>

<P><STRONG><a name="[2ac]"></a>CH374_READ_BLOCK64</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, bsp_ch374.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CH374_READ_BLOCK64
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read374Data
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
</UL>

<P><STRONG><a name="[2c6]"></a>CH374_WRITE_BLOCK64</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, bsp_ch374.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
</UL>

<P><STRONG><a name="[2b7]"></a>CH374_WRITE_BLOCK_C</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bsp_ch374.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s18
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s21
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s23
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s30
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s31
</UL>

<P><STRONG><a name="[296]"></a>CH374GetVer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, CH374MAI.O(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374LibInit
</UL>

<P><STRONG><a name="[2cc]"></a>CH374s01</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, CH374MAI.O(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s08
</UL>

<P><STRONG><a name="[2af]"></a>CH374DelaymS</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CH374DelaymS
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskReady
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s25
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s13
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s21
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374CtrlTransfer
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s26
</UL>

<P><STRONG><a name="[2b2]"></a>CH374EmbHubAttach</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s13
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374HostTransact
</UL>

<P><STRONG><a name="[2b3]"></a>CH374HostTransact</STRONG> (Thumb, 428 bytes, Stack size 16 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374EmbHubAttach
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueryInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s18
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374CtrlTransfer
</UL>

<P><STRONG><a name="[2b5]"></a>CH374DirtyBuffer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, CH374MAI.O(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s08
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374CtrlTransfer
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
</UL>

<P><STRONG><a name="[2b4]"></a>CH374CtrlTransfer</STRONG> (Thumb, 330 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CH374CtrlTransfer &rArr; CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DirtyBuffer
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374HostTransact
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DelaymS
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_BLOCK
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s21
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s23
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s30
</UL>

<P><STRONG><a name="[107]"></a>CH374DiskConnect</STRONG> (Thumb, 352 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374CtrlTransfer
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374EmbHubAttach
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s30
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s31
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s29
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskReady
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_to_udisk
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskQuery
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s21
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s05
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskSize
</UL>

<P><STRONG><a name="[2b9]"></a>CH374s05</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CH374s05 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskQuery
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s16
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s08
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileOpen
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileErase
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileClose
</UL>

<P><STRONG><a name="[297]"></a>CH374Init</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CH374Init &rArr; CH374s29
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s29
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374LibInit
</UL>

<P><STRONG><a name="[2ba]"></a>CH374EmbHubEnable</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CH374EmbHubEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
</UL>

<P><STRONG><a name="[2bb]"></a>CH374s23</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CH374s23 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374CtrlTransfer
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK_C
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s21
</UL>

<P><STRONG><a name="[2bc]"></a>CH374s21</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s23
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374CtrlTransfer
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DelaymS
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK_C
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s08
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
</UL>

<P><STRONG><a name="[2bd]"></a>CH374s17</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CH374s17
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
</UL>

<P><STRONG><a name="[2be]"></a>CH374BulkOnlyCmd</STRONG> (Thumb, 444 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s17
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s21
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s23
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DirtyBuffer
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374HostTransact
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK_C
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_BLOCK
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskReady
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s25
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s13
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s26
</UL>

<P><STRONG><a name="[2c0]"></a>CH374s13</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374EmbHubAttach
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DelaymS
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s27
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s29
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskReady
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskSize
</UL>

<P><STRONG><a name="[2c4]"></a>mReturnErrClose</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, CH374MAI.O(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
</UL>

<P><STRONG><a name="[2c2]"></a>CH374s18</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CH374s18 &rArr; CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374HostTransact
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK_C
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
</UL>

<P><STRONG><a name="[2c3]"></a>CH374s06</STRONG> (Thumb, 480 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CH374s06 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s18
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mReturnErrClose
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s13
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s17
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s21
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s23
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DirtyBuffer
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374HostTransact
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_BLOCK64
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskQuery
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s20
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s15
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s12
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s10
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s08
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileOpen
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileModify
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileErase
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374ByteWrite
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374ByteRead
</UL>

<P><STRONG><a name="[2c5]"></a>CH374s07</STRONG> (Thumb, 474 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CH374s07 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s18
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mReturnErrClose
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s13
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s21
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s23
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DirtyBuffer
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374HostTransact
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK64
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xDelayAfterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s20
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s15
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s12
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s09
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileModify
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileErase
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374ByteWrite
</UL>

<P><STRONG><a name="[2c9]"></a>CH374s25</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CH374s25 &rArr; CH374s26 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DelaymS
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s26
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s27
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskReady
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s08
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskSize
</UL>

<P><STRONG><a name="[2ca]"></a>CH374s22</STRONG> (Thumb, 1324 bytes, Stack size 16 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CH374s22 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s13
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s23
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374EmbHubEnable
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s05
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374CtrlTransfer
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374EmbHubAttach
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DelaymS
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s27
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s30
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s31
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK_C
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskReady
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s08
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskSize
</UL>

<P><STRONG><a name="[2cb]"></a>CH374s08</STRONG> (Thumb, 758 bytes, Stack size 24 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CH374s08 &rArr; CH374s22 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s25
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s21
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s05
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DirtyBuffer
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s01
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s02
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskQuery
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileOpen
</UL>

<P><STRONG><a name="[2ce]"></a>CH374s09</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CH374s09 &rArr; CH374s07 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s20
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s10
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileErase
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374ByteWrite
</UL>

<P><STRONG><a name="[2cf]"></a>CH374s10</STRONG> (Thumb, 826 bytes, Stack size 32 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CH374s10 &rArr; CH374s09 &rArr; CH374s07 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s09
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskQuery
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s19
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s32
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileOpen
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileErase
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374ByteWrite
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374ByteRead
</UL>

<P><STRONG><a name="[2d0]"></a>CH374s32</STRONG> (Thumb, 368 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CH374s32 &rArr; CH374s10 &rArr; CH374s09 &rArr; CH374s07 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s10
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s20
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s11
</UL>

<P><STRONG><a name="[2d1]"></a>CH374s11</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CH374s11 &rArr; CH374s32 &rArr; CH374s10 &rArr; CH374s09 &rArr; CH374s07 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s32
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374ByteWrite
</UL>

<P><STRONG><a name="[2d2]"></a>CH374s12</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CH374s12 &rArr; CH374s07 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileErase
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374ByteWrite
</UL>

<P><STRONG><a name="[29d]"></a>CH374FileOpen</STRONG> (Thumb, 1426 bytes, Stack size 48 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = CH374FileOpen &rArr; CH374s10 &rArr; CH374s09 &rArr; CH374s07 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s10
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s08
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s05
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xFileNameEnumer
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileErase
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch374_FindFile
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch374_OpenFile
</UL>

<P><STRONG><a name="[2d4]"></a>CH374s15</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CH374s15 &rArr; CH374s07 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileClose
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374ByteWrite
</UL>

<P><STRONG><a name="[29e]"></a>CH374FileClose</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CH374FileClose &rArr; CH374s15 &rArr; CH374s07 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s15
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s05
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch374_CloseFile
</UL>

<P><STRONG><a name="[2a8]"></a>CH374FileErase</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CH374FileErase &rArr; CH374FileOpen &rArr; CH374s10 &rArr; CH374s09 &rArr; CH374s07 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s12
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s10
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s09
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s05
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileOpen
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch374_DeleteFile
</UL>

<P><STRONG><a name="[2d5]"></a>CH374s14</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, CH374MAI.O(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s19
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileCreate
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374ByteWrite
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374ByteRead
</UL>

<P><STRONG><a name="[29f]"></a>CH374FileCreate</STRONG> (Thumb, 852 bytes, Stack size 64 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = CH374FileCreate &rArr; CH374FileErase &rArr; CH374FileOpen &rArr; CH374s10 &rArr; CH374s09 &rArr; CH374s07 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s14
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s12
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s11
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s10
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s09
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s05
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DirtyBuffer
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileOpen
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374FileErase
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_READ_REGISTER
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch374_CreateFile
</UL>

<P><STRONG><a name="[2a6]"></a>CH374FileModify</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CH374FileModify &rArr; CH374s07 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch374_ModifyFileDate
</UL>

<P><STRONG><a name="[108]"></a>CH374DiskReady</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CH374DiskReady &rArr; CH374s22 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s25
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s13
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DelaymS
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s26
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s27
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_to_udisk
</UL>

<P><STRONG><a name="[2d6]"></a>CH374s19</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, CH374MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s14
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s10
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374ByteLocate
</UL>

<P><STRONG><a name="[2d7]"></a>CH374s20</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CH374s20 &rArr; CH374s32 &rArr; CH374s10 &rArr; CH374s09 &rArr; CH374s07 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s32
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s09
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374ByteWrite
</UL>

<P><STRONG><a name="[2a1]"></a>CH374ByteLocate</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, CH374BYT.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s16
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s19
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch374_SeekFile
</UL>

<P><STRONG><a name="[2a3]"></a>CH374ByteRead</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, CH374BYT.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s16
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s14
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s10
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch374_ReadFile
</UL>

<P><STRONG><a name="[2a4]"></a>CH374ByteWrite</STRONG> (Thumb, 508 bytes, Stack size 40 bytes, CH374BYT.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CH374ByteWrite &rArr; CH374s20 &rArr; CH374s32 &rArr; CH374s10 &rArr; CH374s09 &rArr; CH374s07 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s16
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s20
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s14
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s15
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s12
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s11
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s10
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s09
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s07
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch374_WriteFile
</UL>

<P><STRONG><a name="[29b]"></a>CH374DiskSize</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, CH374DSZ.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CH374DiskSize &rArr; CH374s22 &rArr; CH374s13 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s25
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s13
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch374_DiskSize
</UL>

<P><STRONG><a name="[2d9]"></a>CH374DiskQuery</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, CH374DSZ.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s10
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s08
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s06
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s05
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_all_capacity
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_all_res
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch374_WriteFile
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch374_ReadFile
</UL>

<P><STRONG><a name="[3c9]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[3ca]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[2da]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[3cb]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3cc]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abnormal_show
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Message
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ScanBlock
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_to_udisk
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassW_InputIF
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskT_VSample
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_inf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_hour
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_dis_time
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_conf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_configure
</UL>

<P><STRONG><a name="[3cd]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2db]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[ce]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_to_udisk
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_file_name
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Message
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_IF
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_inf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_hour
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_time
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_dis_time
</UL>

<P><STRONG><a name="[cb]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abnormal_show
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch374_FindFile
</UL>

<P><STRONG><a name="[113]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_conf
</UL>

<P><STRONG><a name="[e3]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abnormal_show
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch374_CreateFile
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch374_DeleteFile
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch374_FindFile
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch374_OpenFile
</UL>

<P><STRONG><a name="[10e]"></a>__0scanf</STRONG> (Thumb, 26 bytes, Stack size 56 bytes, __0scanf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_configure
</UL>

<P><STRONG><a name="[2fb]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[dc]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_to_udisk
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abnormal_show
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingSet_Save_IF
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_CalibrationIF
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_conf
</UL>

<P><STRONG><a name="[2df]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[2e2]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[d3]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abnormal_show
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abnor_BatteryIF
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_CalibrationIF
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_CalibrationIF
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_IF
</UL>

<P><STRONG><a name="[145]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2e7]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2e8]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[146]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SAMPLING
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abnormal_show
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_CalibrationIF
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abnor_BatteryIF
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_IF
</UL>

<P><STRONG><a name="[149]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SAMPLING
</UL>

<P><STRONG><a name="[c6]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abnormal_show
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_CalibrationIF
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abnor_BatteryIF
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abnormal_show
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abnor_BatteryIF
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_IF
</UL>

<P><STRONG><a name="[3ce]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SAMPLING
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge_timeout
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_configure
</UL>

<P><STRONG><a name="[110]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_configure
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3cf]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show
</UL>

<P><STRONG><a name="[d8]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show
</UL>

<P><STRONG><a name="[3d0]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2e9]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2e3]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[3d1]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[2e4]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3d2]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[2ed]"></a>__strtod_int</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[2de]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[2dc]"></a>__vfscanf_char_file</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char_file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0scanf
</UL>

<P><STRONG><a name="[3d3]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[2e1]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[2e0]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[2e6]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[2e5]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[2f1]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2f2]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[3d4]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[3d5]"></a>_fgetc$bs</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fgetc_b.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__backspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fgetc_b.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char_file.o(.text)
</UL>
<P><STRONG><a name="[2ea]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[3d6]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[2ee]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[65]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 2]<UL><LI> strtod.o(.text)
<LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[2ec]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[2f6]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[2f0]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char_file
</UL>

<P><STRONG><a name="[63]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[64]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[2ef]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[3d7]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[2fa]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[2f9]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[3d8]"></a>__I$use$semihosting$fgetc</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, iusesemig.o(.text), UNUSED)

<P><STRONG><a name="[2f5]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[2f8]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[3d9]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[3da]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2fc]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3db]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[8e]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_to_udisk
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopIfError
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_to_udisk
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSmain
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_DispBadBlockInfo
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SAMPLING
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_inf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_hour
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_dis_time
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Display
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Regulate
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Check
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Scanf
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_conf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_configure
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;struct_malloc
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_GetStatus
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Read
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Write
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Init
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_init
</UL>

<P><STRONG><a name="[cc]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __c89printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a
</UL>

<P><STRONG><a name="[3dc]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[2fe]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3dd]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[cf]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_to_udisk
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_file_name
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abnormal_show
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_CalibrationIF
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abnor_BatteryIF
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Message
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_IF
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_inf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_charge
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_hour
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_dis_time
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Display
</UL>

<P><STRONG><a name="[3de]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[3df]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[2dd]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[3e0]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[303]"></a>__read_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__read_errno))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[3e1]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[3e2]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[3e3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[304]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[2f7]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[10f]"></a>atof</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, atof.o(i.atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_conf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_configure
</UL>

<P><STRONG><a name="[10b]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;struct_malloc
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5e]"></a>AppTaskNrf905</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = AppTaskNrf905 &rArr; Nrf905_Test &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n95_Sendout
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n95_Init_IO
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n95_Init_Dev
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n95_Check_DR
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nrf905_Test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>AppTaskGSM</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = AppTaskGSM &rArr; sim900a &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim900a
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text)
</UL>
<P><STRONG><a name="[5c]"></a>AppTaskInsideCom_485</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = AppTaskInsideCom_485 &rArr; OSMboxPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text)
</UL>
<P><STRONG><a name="[5b]"></a>AppTaskCom_485</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = AppTaskCom_485 &rArr; com &rArr; return_all_capacity &rArr; OSMboxPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text)
</UL>
<P><STRONG><a name="[5a]"></a>AppTaskT_VSample</STRONG> (Thumb, 106 bytes, Stack size 320 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2912 + Unknown Stack Size
<LI>Call Chain = AppTaskT_VSample &rArr; FSmain &rArr; copy_to_udisk &rArr; flash_to_udisk &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSmain
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadVariable
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text)
</UL>
<P><STRONG><a name="[59]"></a>AppTaskUserif</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = AppTaskUserif &rArr; Analysis &rArr; Param_CalibrationIF &rArr; Show &rArr; SetTextValue &rArr; SetControlValue &rArr; SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_IF
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analysis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text)
</UL>
<P><STRONG><a name="[87]"></a>AppTaskCreate</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = AppTaskCreate &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[5f]"></a>AppTaskStart</STRONG> (Thumb, 334 bytes, Stack size 0 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = AppTaskStart &rArr; AppTaskCreate &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wtd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text)
</UL>
<P><STRONG><a name="[b8]"></a>CRC16</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_para_all
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_version
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_config
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_all_capacity
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_id
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_all_res
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_cal
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_addr
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_ack
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com
</UL>

<P><STRONG><a name="[b7]"></a>return_ack</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = return_ack &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_SendData
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com
</UL>

<P><STRONG><a name="[ba]"></a>return_addr</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = return_addr &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_SendData
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com
</UL>

<P><STRONG><a name="[bb]"></a>return_cal</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = return_cal &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_SendData
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com
</UL>

<P><STRONG><a name="[b9]"></a>USART2_SendData</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART2_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_para_all
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_version
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_config
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_all_capacity
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_id
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_all_res
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_cal
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_addr
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_ack
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com
</UL>

<P><STRONG><a name="[c2]"></a>return_all_res</STRONG> (Thumb, 114 bytes, Stack size 120 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = return_all_res &rArr; OSMboxPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_SendData
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com
</UL>

<P><STRONG><a name="[c1]"></a>return_id</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = return_id &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_SendData
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com
</UL>

<P><STRONG><a name="[c0]"></a>return_all_capacity</STRONG> (Thumb, 112 bytes, Stack size 120 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = return_all_capacity &rArr; OSMboxPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_SendData
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com
</UL>

<P><STRONG><a name="[bf]"></a>return_config</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = return_config &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_SendData
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com
</UL>

<P><STRONG><a name="[be]"></a>return_version</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = return_version &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_SendData
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com
</UL>

<P><STRONG><a name="[e5]"></a>EE_FindValidPage</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, eeprom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_VerifyPageFullWriteVariable
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadVariable
</UL>

<P><STRONG><a name="[e4]"></a>EE_VerifyPageFullWriteVariable</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = EE_VerifyPageFullWriteVariable &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_FindValidPage
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteVariable
</UL>

<P><STRONG><a name="[e9]"></a>EE_Format</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, eeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
</UL>

<P><STRONG><a name="[ea]"></a>EE_PageTransfer</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = EE_PageTransfer &rArr; EE_VerifyPageFullWriteVariable &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_VerifyPageFullWriteVariable
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_FindValidPage
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteVariable
</UL>

<P><STRONG><a name="[f8]"></a>flash_to_udisk</STRONG> (Thumb, 438 bytes, Stack size 2224 bytes, udisk_ch374.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2576<LI>Call Chain = flash_to_udisk &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopIfError
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch374_WriteFile
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch374_ModifyFileDate
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch374_CreateFile
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch374_CloseFile
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_to_udisk
</UL>

<P><STRONG><a name="[fd]"></a>StopIfError</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, udisk_ch374.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = StopIfError &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_to_udisk
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_to_udisk
</UL>

<P><STRONG><a name="[14e]"></a>FSMC_NAND_Init</STRONG> (Thumb, 148 bytes, Stack size 72 bytes, bsp_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = FSMC_NAND_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NANDInit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NANDCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_DispBadBlockInfo
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Init
</UL>

<P><STRONG><a name="[152]"></a>FSMC_NAND_WritePage</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, bsp_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FSMC_NAND_WritePage &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ScanBlock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Write
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_WriteSpare
</UL>

<P><STRONG><a name="[154]"></a>FSMC_NAND_ReadPage</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bsp_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FSMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ScanBlock
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteToNewBlock
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_ReadData
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_ReadSpare
</UL>

<P><STRONG><a name="[155]"></a>NAND_BuildLUT</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, bsp_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NAND_BuildLUT &rArr; FSMC_NAND_ReadSpare &rArr; FSMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_ReadSpare
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Format
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteToNewBlock
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Init
</UL>

<P><STRONG><a name="[158]"></a>NAND_IsBadBlock</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bsp_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NAND_IsBadBlock &rArr; FSMC_NAND_ReadSpare &rArr; FSMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_ReadSpare
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_DispBadBlockInfo
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Format
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ScanBlock
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteToNewBlock
</UL>

<P><STRONG><a name="[153]"></a>FSMC_NAND_GetStatus</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_ReadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_EraseBlock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_PageCopyBackEx
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_PageCopyBack
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_WritePage
</UL>

<P><STRONG><a name="[15c]"></a>FSMC_NAND_PageCopyBack</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, bsp_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FSMC_NAND_PageCopyBack &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteToNewBlock
</UL>

<P><STRONG><a name="[15a]"></a>FSMC_NAND_PageCopyBackEx</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, bsp_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteToNewBlock
</UL>

<P><STRONG><a name="[166]"></a>FSMC_NAND_WriteSpare</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_WritePage
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Format
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_MarkUsedBlock
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_MarkBadBlock
</UL>

<P><STRONG><a name="[156]"></a>FSMC_NAND_ReadSpare</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FSMC_NAND_ReadSpare &rArr; FSMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_ReadPage
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_IsBadBlock
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_BuildLUT
</UL>

<P><STRONG><a name="[161]"></a>FSMC_NAND_ReadData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FSMC_NAND_ReadData &rArr; FSMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_ReadPage
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Read
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Write
</UL>

<P><STRONG><a name="[15e]"></a>FSMC_NAND_EraseBlock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bsp_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FSMC_NAND_EraseBlock &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Format
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ScanBlock
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteToNewBlock
</UL>

<P><STRONG><a name="[15b]"></a>NAND_MarkBadBlock</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bsp_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NAND_MarkBadBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_WriteSpare
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteToNewBlock
</UL>

<P><STRONG><a name="[15d]"></a>NAND_MarkUsedBlock</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NAND_MarkUsedBlock &rArr; FSMC_NAND_WriteSpare &rArr; FSMC_NAND_WritePage &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_WriteSpare
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Write
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteToNewBlock
</UL>

<P><STRONG><a name="[162]"></a>NAND_IsBufOk</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NAND_IsBufOk
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ScanBlock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Write
</UL>

<P><STRONG><a name="[160]"></a>NAND_AddrToPhyBlockNo</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp_nand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Read
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Write
</UL>

<P><STRONG><a name="[169]"></a>FSMC_NAND_ReadStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bsp_nand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_GetStatus
</UL>

<P><STRONG><a name="[194]"></a>OS_SchedNew</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1a0]"></a>OS_FlagTaskRdy</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
</UL>

<P><STRONG><a name="[1a6]"></a>OS_FlagBlock</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
</UL>

<P><STRONG><a name="[1dd]"></a>OSTmr_Free</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
</UL>

<P><STRONG><a name="[1dc]"></a>OSTmr_Unlink</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTmr_Unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[1e2]"></a>OSTmr_Link</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, os_tmr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[62]"></a>OSTmr_Task</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = OSTmr_Task &rArr; OSTmr_Lock &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Lock
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlock
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Link
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tmr.o(.text)
</UL>
<P><STRONG><a name="[1da]"></a>OSTmr_Unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = OSTmr_Unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStateGet
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrRemainGet
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrNameGet
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[1d9]"></a>OSTmr_Lock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OSTmr_Lock &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStateGet
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrRemainGet
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrNameGet
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[1e4]"></a>SetSysClockTo72</STRONG> (Thumb, 168 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[20c]"></a>SetControlValue</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, hmi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetControlValue &rArr; SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextValue
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetButtonValue
</UL>

<P><STRONG><a name="[20d]"></a>SetProg_Meter_Slider_Value</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, hmi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetProg_Meter_Slider_Value &rArr; SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetProgressValue
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSliderValue
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMeterValue
</UL>

<P><STRONG><a name="[218]"></a>move_window</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = move_window &rArr; disk_write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
</UL>

<P><STRONG><a name="[219]"></a>sync</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sync &rArr; move_window &rArr; disk_write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[21c]"></a>get_fat</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = get_fat &rArr; move_window &rArr; disk_write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_seek
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[21d]"></a>put_fat</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = put_fat &rArr; move_window &rArr; disk_write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[21e]"></a>remove_chain</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
</UL>

<P><STRONG><a name="[21f]"></a>create_chain</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[220]"></a>dir_seek</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dir_seek &rArr; get_fat &rArr; move_window &rArr; disk_write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[222]"></a>dir_next</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[223]"></a>dir_read</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[224]"></a>dir_register</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = dir_register &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_seek
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[226]"></a>dir_remove</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_seek
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[227]"></a>create_name</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = create_name
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[231]"></a>get_fileinfo</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[228]"></a>follow_path</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; NAND_Write &rArr; NAND_WriteToNewBlock &rArr; FSMC_NAND_PageCopyBackEx &rArr; FSMC_NAND_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_seek
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
</UL>

<P><STRONG><a name="[22a]"></a>check_fs</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = check_fs &rArr; disk_read &rArr; NAND_Read &rArr; FSMC_NAND_ReadData &rArr; FSMC_NAND_ReadPage
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_mount
</UL>

<P><STRONG><a name="[22b]"></a>auto_mount</STRONG> (Thumb, 440 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = auto_mount &rArr; disk_initialize &rArr; NAND_Init &rArr; FSMC_NAND_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
</UL>

<P><STRONG><a name="[225]"></a>mem_cpy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[21a]"></a>mem_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
</UL>

<P><STRONG><a name="[229]"></a>mem_cmp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[221]"></a>clust2sect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_seek
</UL>

<P><STRONG><a name="[22e]"></a>validate</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[265]"></a>IntToUnicode</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, usb_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
</UL>

<P><STRONG><a name="[27e]"></a>DataStageIn</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPTxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0
</UL>

<P><STRONG><a name="[281]"></a>NoData_Setup0</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NoData_Setup0 &rArr; Standard_ClearFeature
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetDeviceFeature
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetEndPointFeature
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetInterface
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[289]"></a>Data_Setup0</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[28f]"></a>DataStageOut</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DataStageOut
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMAToUserBufferCopy
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
</UL>

<P><STRONG><a name="[298]"></a>ch374_CfgFSMC</STRONG> (Thumb, 82 bytes, Stack size 96 bytes, bsp_ch374.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ch374_CfgFSMC &rArr; FSMC_NORSRAMInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitCH374
</UL>

<P><STRONG><a name="[2cd]"></a>CH374s02</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, CH374MAI.O(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s08
</UL>

<P><STRONG><a name="[2b0]"></a>CH374s29</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CH374s29
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s13
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374Init
</UL>

<P><STRONG><a name="[2b6]"></a>CH374s31</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CH374s31
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK_C
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
</UL>

<P><STRONG><a name="[2b8]"></a>CH374s30</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374CtrlTransfer
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_BLOCK_C
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374_WRITE_REGISTER
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskConnect
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
</UL>

<P><STRONG><a name="[2c1]"></a>CH374s27</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, CH374MAI.O(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskReady
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s22
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s25
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s13
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s26
</UL>

<P><STRONG><a name="[2c8]"></a>CH374s26</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, CH374MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CH374s26 &rArr; CH374BulkOnlyCmd &rArr; CH374s21 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374BulkOnlyCmd
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DelaymS
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s27
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374DiskReady
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s25
</UL>

<P><STRONG><a name="[2d8]"></a>CH374s16</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, CH374BYT.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CH374s16 &rArr; CH374s05 &rArr; CH374DiskConnect &rArr; CH374s30 &rArr; CH374CtrlTransfer &rArr; CH374HostTransact &rArr; CH374EmbHubAttach
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374s05
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374ByteWrite
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374ByteRead
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH374ByteLocate
</UL>

<P><STRONG><a name="[2ff]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2fd]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[301]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[300]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6a]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[2eb]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[2f4]"></a>_fp_value</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[68]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
