; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\com.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\com.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\Source\APP -I.\Source\BSP -I.\Source\uCOS-II\Source -I.\Source\uCOS-II\uC-CPU -I.\Source\uCOS-II\uC-LIB -I.\Source\uCOS-II\Ports -I.\Source\uCGUI\Config -I.\Source\uCGUI\emWinDemo -I.\Source\uCGUI\inc -I.\Source\uCGUI\LCDDriver -I.\Source\uCGUI\uCGUIDemo -I.\Source\Libraries\STM32F10x_StdPeriph_Driver\inc -I.\Source\Libraries\CMSIS\Core\CM3 -I.\Source\APP\HMI -I"D:\Program Files (x86)\keil\ARM\RV31\INC" -I"D:\Program Files (x86)\keil\ARM\PACK\ARM\CMSIS\3.20.3\CMSIS\Include" -I"D:\Program Files (x86)\keil\ARM\PACK\Keil\STM32F1xx_DFP\1.0.2\Device\Include" -DSTM32F10X_HD --omf_browse=.\obj\com.crf Source\APP\com.c]
                          THUMB

                          AREA ||i.CRC16||, CODE, READONLY, ALIGN=2

                  CRC16 PROC
;;;98     
;;;99     uint16_t CRC16(unsigned char *puchMsg, unsigned int usDataLen)
000000  b570              PUSH     {r4-r6,lr}
;;;100    {
000002  4602              MOV      r2,r0
000004  460c              MOV      r4,r1
;;;101        unsigned char uIndex ;                              //*把CRC表*/
;;;102        unsigned char uchCRCHi = 0xff ;                     //* 初始化高字节*/
000006  25ff              MOVS     r5,#0xff
;;;103        unsigned char uchCRCLo = 0xff ;                     //* 初始化低字节*/
000008  23ff              MOVS     r3,#0xff
;;;104    
;;;105        while(usDataLen--) {                                //*通过数据缓冲器*/
00000a  e00b              B        |L1.36|
                  |L1.12|
;;;106            uIndex = uchCRCHi ^ *puchMsg++ ;                  //*计算CRC */
00000c  f8120b01          LDRB     r0,[r2],#1
000010  ea800105          EOR      r1,r0,r5
;;;107            uchCRCHi = uchCRCLo ^ auchCRCHi[uIndex] ;
000014  4807              LDR      r0,|L1.52|
000016  f8100021          LDRB     r0,[r0,r1,LSL #2]
00001a  4058              EORS     r0,r0,r3
00001c  b2c5              UXTB     r5,r0
;;;108            uchCRCLo = auchCRCLo[uIndex] ;
00001e  4806              LDR      r0,|L1.56|
000020  f8103021          LDRB     r3,[r0,r1,LSL #2]
                  |L1.36|
000024  0020              MOVS     r0,r4                 ;105
000026  f1a40401          SUB      r4,r4,#1              ;105
00002a  d1ef              BNE      |L1.12|
;;;109        }
;;;110    
;;;111        return (uchCRCHi << 8 | uchCRCLo);
00002c  ea432005          ORR      r0,r3,r5,LSL #8
;;;112    }
000030  bd70              POP      {r4-r6,pc}
;;;113    
                          ENDP

000032  0000              DCW      0x0000
                  |L1.52|
                          DCD      auchCRCHi
                  |L1.56|
                          DCD      auchCRCLo

                          AREA ||i.USART1_SendData||, CODE, READONLY, ALIGN=2

                  USART1_SendData PROC
;;;256     *************************************************/
;;;257    static void USART1_SendData(unsigned char ch)
000000  b510              PUSH     {r4,lr}
;;;258    {
000002  4604              MOV      r4,r0
;;;259        USART_SendData(USART1, ch);
000004  4621              MOV      r1,r4
000006  4805              LDR      r0,|L2.28|
000008  f7fffffe          BL       USART_SendData
;;;260    
;;;261        /* Loop until the end of transmission */
;;;262        while(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET) {
00000c  bf00              NOP      
                  |L2.14|
00000e  2140              MOVS     r1,#0x40
000010  4802              LDR      r0,|L2.28|
000012  f7fffffe          BL       USART_GetFlagStatus
000016  2800              CMP      r0,#0
000018  d0f9              BEQ      |L2.14|
;;;263        }
;;;264    }
00001a  bd10              POP      {r4,pc}
;;;265    /*************************************************
                          ENDP

                  |L2.28|
                          DCD      0x40013800

                          AREA ||i.USART2_SendData||, CODE, READONLY, ALIGN=2

                  USART2_SendData PROC
;;;240     *************************************************/
;;;241    static void USART2_SendData(unsigned char ch)
000000  b510              PUSH     {r4,lr}
;;;242    {
000002  4604              MOV      r4,r0
;;;243        USART_SendData(USART2, ch);
000004  4621              MOV      r1,r4
000006  4805              LDR      r0,|L3.28|
000008  f7fffffe          BL       USART_SendData
;;;244    
;;;245        /* Loop until the end of transmission */
;;;246        while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET) {
00000c  bf00              NOP      
                  |L3.14|
00000e  2140              MOVS     r1,#0x40
000010  4802              LDR      r0,|L3.28|
000012  f7fffffe          BL       USART_GetFlagStatus
000016  2800              CMP      r0,#0
000018  d0f9              BEQ      |L3.14|
;;;247        }
;;;248    }
00001a  bd10              POP      {r4,pc}
;;;249    
                          ENDP

                  |L3.28|
                          DCD      0x40004400

                          AREA ||i.com||, CODE, READONLY, ALIGN=1

                  ||com|| PROC
;;;144    //void com(unsigned char *com_buffer, unsigned char *DataBuffer)
;;;145    void com(unsigned char *com_buffer)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;146    {
000004  4604              MOV      r4,r0
;;;147        unsigned char *ext_buffer;
;;;148        uint8_t i = 0, err = 0;
000006  2500              MOVS     r5,#0
000008  2600              MOVS     r6,#0
;;;149    
;;;150    		uint16_t Rv = 0;
00000a  2700              MOVS     r7,#0
;;;151    		uint16_t Ri = 0;
00000c  46a8              MOV      r8,r5
;;;152    		uint16_t Rk = 0;
00000e  46a9              MOV      r9,r5
;;;153        uint16_t crc_receive, crc_result, data_len;
;;;154        unsigned char crc_data_buf[20];
;;;155    		if(com_buffer[1] == 0X00)	//广播地址
000010  7860              LDRB     r0,[r4,#1]
000012  b970              CBNZ     r0,|L4.50|
;;;156    		{
;;;157    			switch(com_buffer[2]) 
000014  78a0              LDRB     r0,[r4,#2]
000016  2802              CMP      r0,#2
000018  d002              BEQ      |L4.32|
00001a  2803              CMP      r0,#3
00001c  d107              BNE      |L4.46|
00001e  e003              B        |L4.40|
                  |L4.32|
;;;158    				{
;;;159    				    case R_ADDR: 		//0x02 地址
;;;160                    return_addr(R_ADDR);
000020  2002              MOVS     r0,#2
000022  f7fffffe          BL       return_addr
;;;161                    break;
000026  e003              B        |L4.48|
                  |L4.40|
;;;162    								
;;;163    						case DETECT: 		//0x03 检测各参数，因为检测需要时间所以先广播让所有的模块检测参数等待传送
;;;164                    detect();
000028  f7fffffe          BL       detect
;;;165                    break;
00002c  e000              B        |L4.48|
                  |L4.46|
;;;166    						
;;;167    						default:
;;;168                    break;
00002e  bf00              NOP      
                  |L4.48|
000030  e03b              B        |L4.170|
                  |L4.50|
;;;169    					}
;;;170    		}
;;;171        else if(com_buffer[1] == ((uint8_t)readADD()) )//是此地址
000032  f7fffffe          BL       readADD
000036  b2c0              UXTB     r0,r0
000038  7861              LDRB     r1,[r4,#1]
00003a  4288              CMP      r0,r1
00003c  d135              BNE      |L4.170|
;;;172    		{ 
;;;173            switch(com_buffer[2]) 
00003e  78a0              LDRB     r0,[r4,#2]
000040  2807              CMP      r0,#7
000042  d01f              BEQ      |L4.132|
000044  dc06              BGT      |L4.84|
000046  d22e              BCS      |L4.166|
000048  e8dff000          TBB      [pc,r0]
00004c  0d102d2d          DCB      0x0d,0x10,0x2d,0x2d
000050  13161900          DCB      0x13,0x16,0x19,0x00
                  |L4.84|
000054  280e              CMP      r0,#0xe
000056  d01a              BEQ      |L4.142|
000058  2811              CMP      r0,#0x11
00005a  d01b              BEQ      |L4.148|
00005c  2812              CMP      r0,#0x12
00005e  d01c              BEQ      |L4.154|
000060  28c7              CMP      r0,#0xc7
000062  d120              BNE      |L4.166|
000064  e01e              B        |L4.164|
;;;174    				{
;;;175                case HAND_SHAKE: 	//0x00 握手  
;;;176    								hand_shake();
000066  f7fffffe          BL       hand_shake
;;;177    								break;
00006a  e01d              B        |L4.168|
;;;178    								
;;;179                case R_VERSION: 	//0x01 版本
;;;180                    return_version();
00006c  f7fffffe          BL       return_version
;;;181                    break;
000070  e01a              B        |L4.168|
;;;182    								
;;;183                case R_B_V:	//0x04 电池的电压
;;;184                    return_all_voltage();
000072  f7fffffe          BL       return_all_voltage
;;;185                    break;
000076  e017              B        |L4.168|
;;;186    
;;;187                case R_B_T:	//0x05 电池的温度
;;;188                    return_all_temp();
000078  f7fffffe          BL       return_all_temp
;;;189                    break;
00007c  e014              B        |L4.168|
;;;190    
;;;191                case R_B_C:	//0x06 电池的容量
;;;192                    return_all_capacity();
00007e  f7fffffe          BL       return_all_capacity
;;;193                    break;
000082  e011              B        |L4.168|
                  |L4.132|
;;;194    
;;;195                case R_B_VTC:  //0x07 电池的 电压 内阻 容量 温度              
;;;196    								nrf905_return_para_all();
000084  f7fffffe          BL       nrf905_return_para_all
;;;197    								return_para_all();
000088  f7fffffe          BL       return_para_all
;;;198                    break;
00008c  e00c              B        |L4.168|
                  |L4.142|
;;;199    								
;;;200                case R_B_r:		//0x0E 电池的内阻
;;;201                    return_all_res();
00008e  f7fffffe          BL       return_all_res
;;;202                    break;
000092  e009              B        |L4.168|
                  |L4.148|
;;;203    
;;;204                case R_UNIQID: 	//0x11 设备ID
;;;205                    return_id();
000094  f7fffffe          BL       return_id
;;;206                    break;
000098  e006              B        |L4.168|
                  |L4.154|
;;;207    
;;;208                case R_SC_INF:  	//0x12 自检信息
;;;209                    return_ack(R_SC_INF, 0);
00009a  2100              MOVS     r1,#0
00009c  2012              MOVS     r0,#0x12
00009e  f7fffffe          BL       return_ack
;;;210                    break;
0000a2  e001              B        |L4.168|
                  |L4.164|
;;;211    	
;;;212    								
;;;213    						case C_rated: 	//0xC7 电池额定容量
;;;214    //								Rk =  (com_buffer[5]<<8)+com_buffer[6] ;	
;;;215    //								EE_WriteVariable(C_rated_Addr, Rk); 
;;;216    //								GPIO_SetBits(GPIOA, GPIO_Pin_1);
;;;217    //								OSTimeDlyHMSM(0, 0, 0, 100);
;;;218    //								GPIO_ResetBits(GPIOA, GPIO_Pin_1);
;;;219    //								OSTimeDlyHMSM(0, 0, 0, 100);
;;;220    
;;;221    //								return_cal(Rk >> 8, Rk & 0x00ff, CAL_R);
;;;222    
;;;223                    break;			
0000a4  e000              B        |L4.168|
                  |L4.166|
;;;224    
;;;225                
;;;226                default:
;;;227                    break;
0000a6  bf00              NOP      
                  |L4.168|
0000a8  bf00              NOP                            ;177
                  |L4.170|
;;;228            }
;;;229        }
;;;230    
;;;231    }
0000aa  e8bd87f0          POP      {r4-r10,pc}
;;;232    
                          ENDP


                          AREA ||i.detect||, CODE, READONLY, ALIGN=2

                  detect PROC
;;;138     *************************************************/
;;;139    static void detect(void)
000000  b510              PUSH     {r4,lr}
;;;140    {
;;;141    	OSSemPost(DetectSem);
000002  4802              LDR      r0,|L5.12|
000004  6800              LDR      r0,[r0,#0]  ; DetectSem
000006  f7fffffe          BL       OSSemPost
;;;142    }
00000a  bd10              POP      {r4,pc}
;;;143    
                          ENDP

                  |L5.12|
                          DCD      DetectSem

                          AREA ||i.hand_shake||, CODE, READONLY, ALIGN=1

                  hand_shake PROC
;;;120    /* 握手返回 */
;;;121    static void hand_shake(void)
000000  b510              PUSH     {r4,lr}
;;;122    {
;;;123        USART2_SendData(0xEE);
000002  20ee              MOVS     r0,#0xee
000004  f7fffffe          BL       USART2_SendData
;;;124        USART2_SendData((uint8_t)readADD());
000008  f7fffffe          BL       readADD
00000c  b2c4              UXTB     r4,r0
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       USART2_SendData
;;;125        USART2_SendData(0x00);
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       USART2_SendData
;;;126        USART2_SendData(0x00);
00001a  2000              MOVS     r0,#0
00001c  f7fffffe          BL       USART2_SendData
;;;127        USART2_SendData(0x01);
000020  2001              MOVS     r0,#1
000022  f7fffffe          BL       USART2_SendData
;;;128        USART2_SendData(0x01);
000026  2001              MOVS     r0,#1
000028  f7fffffe          BL       USART2_SendData
;;;129        USART2_SendData(0xED);
00002c  20ed              MOVS     r0,#0xed
00002e  f7fffffe          BL       USART2_SendData
;;;130    }
000032  bd10              POP      {r4,pc}
;;;131    
                          ENDP


                          AREA ||i.nrf905_return_para_all||, CODE, READONLY, ALIGN=2

                  nrf905_return_para_all PROC
;;;337    
;;;338    void nrf905_return_para_all(void)
000000  b538              PUSH     {r3-r5,lr}
;;;339    {
;;;340    	 uint8_t err = 0;
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;341    	 uint8_t *p_ParaAll;
;;;342    	 p_ParaAll = (uint8_t *)OSMboxPend(ParaMbox, 2, &err);	
000006  466a              MOV      r2,sp
000008  2102              MOVS     r1,#2
00000a  480a              LDR      r0,|L7.52|
00000c  6800              LDR      r0,[r0,#0]  ; ParaMbox
00000e  f7fffffe          BL       OSMboxPend
000012  4604              MOV      r4,r0
;;;343    	 if(err == OS_ERR_NONE) 
000014  f89d0000          LDRB     r0,[sp,#0]
000018  b910              CBNZ     r0,|L7.32|
;;;344    		{
;;;345    				pre_p_ParaAll = p_ParaAll;
00001a  4807              LDR      r0,|L7.56|
00001c  6004              STR      r4,[r0,#0]  ; pre_p_ParaAll
00001e  e005              B        |L7.44|
                  |L7.32|
;;;346    		}
;;;347    		/*通讯超时*/
;;;348    		else if(err == OS_ERR_TIMEOUT) 
000020  f89d0000          LDRB     r0,[sp,#0]
000024  280a              CMP      r0,#0xa
000026  d101              BNE      |L7.44|
;;;349    		{
;;;350    				p_ParaAll = pre_p_ParaAll;
000028  4803              LDR      r0,|L7.56|
00002a  6804              LDR      r4,[r0,#0]  ; pre_p_ParaAll
                  |L7.44|
;;;351    		}
;;;352    	 n95_Sendout(p_ParaAll);					// 无线发送
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       n95_Sendout
;;;353    }
000032  bd38              POP      {r3-r5,pc}
;;;354    /*************************************************
                          ENDP

                  |L7.52|
                          DCD      ParaMbox
                  |L7.56|
                          DCD      pre_p_ParaAll

                          AREA ||i.readADD||, CODE, READONLY, ALIGN=2

                  readADD PROC
;;;114    /*扫描拨码开关，编码地址*/
;;;115    static int readADD(void)
000000  b510              PUSH     {r4,lr}
;;;116    {
;;;117    	return (ADD6<<6)+(ADD5<<5)+(ADD4<<4)+(ADD3<<3)+(ADD2<<2);
000002  2180              MOVS     r1,#0x80
000004  480f              LDR      r0,|L8.68|
000006  f7fffffe          BL       GPIO_ReadInputDataBit
00000a  0184              LSLS     r4,r0,#6
00000c  2101              MOVS     r1,#1
00000e  480e              LDR      r0,|L8.72|
000010  f7fffffe          BL       GPIO_ReadInputDataBit
000014  eb041440          ADD      r4,r4,r0,LSL #5
000018  2102              MOVS     r1,#2
00001a  480b              LDR      r0,|L8.72|
00001c  f7fffffe          BL       GPIO_ReadInputDataBit
000020  eb041400          ADD      r4,r4,r0,LSL #4
000024  f44f6100          MOV      r1,#0x800
000028  4806              LDR      r0,|L8.68|
00002a  f7fffffe          BL       GPIO_ReadInputDataBit
00002e  eb0404c0          ADD      r4,r4,r0,LSL #3
000032  f44f5180          MOV      r1,#0x1000
000036  4803              LDR      r0,|L8.68|
000038  f7fffffe          BL       GPIO_ReadInputDataBit
00003c  eb040080          ADD      r0,r4,r0,LSL #2
;;;118    }
000040  bd10              POP      {r4,pc}
;;;119    
                          ENDP

000042  0000              DCW      0x0000
                  |L8.68|
                          DCD      0x40010800
                  |L8.72|
                          DCD      0x40010c00

                          AREA ||i.return_ack||, CODE, READONLY, ALIGN=1

                  return_ack PROC
;;;549     *************************************************/
;;;550    static void return_ack(uint8_t Code , uint8_t ACK)
000000  e92d41f3          PUSH     {r0,r1,r4-r8,lr}
;;;551    {
000004  4605              MOV      r5,r0
;;;552        uint16_t CRC16_Result = 0;
000006  2400              MOVS     r4,#0
;;;553        uint8_t CRC16_hi, CRC16_lo = 0;
000008  2700              MOVS     r7,#0
;;;554        CRC16_Result = CRC16(&ACK, 1);
00000a  2101              MOVS     r1,#1
00000c  a801              ADD      r0,sp,#4
00000e  f7fffffe          BL       CRC16
000012  4604              MOV      r4,r0
;;;555        CRC16_lo = (uint8_t)(CRC16_Result & 0x00ff);
000014  b2e7              UXTB     r7,r4
;;;556        CRC16_hi = (uint8_t)(CRC16_Result >> 8);
000016  1226              ASRS     r6,r4,#8
;;;557        USART2_SendData(0xEE);
000018  20ee              MOVS     r0,#0xee
00001a  f7fffffe          BL       USART2_SendData
;;;558        USART2_SendData((uint8_t)readADD());
00001e  f7fffffe          BL       readADD
000022  f00008ff          AND      r8,r0,#0xff
000026  4640              MOV      r0,r8
000028  f7fffffe          BL       USART2_SendData
;;;559        USART2_SendData(Code);
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       USART2_SendData
;;;560        USART2_SendData(0x00);
000032  2000              MOVS     r0,#0
000034  f7fffffe          BL       USART2_SendData
;;;561        USART2_SendData(0x01);
000038  2001              MOVS     r0,#1
00003a  f7fffffe          BL       USART2_SendData
;;;562        USART2_SendData(ACK);
00003e  f89d0004          LDRB     r0,[sp,#4]
000042  f7fffffe          BL       USART2_SendData
;;;563        USART2_SendData(CRC16_hi);
000046  4630              MOV      r0,r6
000048  f7fffffe          BL       USART2_SendData
;;;564        USART2_SendData(CRC16_lo);
00004c  4638              MOV      r0,r7
00004e  f7fffffe          BL       USART2_SendData
;;;565        USART2_SendData(0xED);
000052  20ed              MOVS     r0,#0xed
000054  f7fffffe          BL       USART2_SendData
;;;566    }
000058  e8bd81fc          POP      {r2-r8,pc}
;;;567    
                          ENDP


                          AREA ||i.return_addr||, CODE, READONLY, ALIGN=1

                  return_addr PROC
;;;521     *************************************************/
;;;522    static void return_addr(uint8_t Code)
000000  b5f8              PUSH     {r3-r7,lr}
;;;523    {
000002  4605              MOV      r5,r0
;;;524        uint16_t CRC16_Result = 0;
000004  2400              MOVS     r4,#0
;;;525        uint8_t CRC16_hi, CRC16_lo = 0;
000006  2700              MOVS     r7,#0
;;;526        uint8_t add;
;;;527        add = (uint8_t)readADD();
000008  f7fffffe          BL       readADD
00000c  b2c0              UXTB     r0,r0
00000e  9000              STR      r0,[sp,#0]
;;;528        CRC16_Result = CRC16(&add, 1);
000010  2101              MOVS     r1,#1
000012  4668              MOV      r0,sp
000014  f7fffffe          BL       CRC16
000018  4604              MOV      r4,r0
;;;529        CRC16_lo = (uint8_t)(CRC16_Result & 0x00ff);
00001a  b2e7              UXTB     r7,r4
;;;530        CRC16_hi = (uint8_t)(CRC16_Result >> 8);
00001c  1226              ASRS     r6,r4,#8
;;;531        USART2_SendData(0xEE);
00001e  20ee              MOVS     r0,#0xee
000020  f7fffffe          BL       USART2_SendData
;;;532        USART2_SendData(add);
000024  f89d0000          LDRB     r0,[sp,#0]
000028  f7fffffe          BL       USART2_SendData
;;;533        USART2_SendData(Code);
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       USART2_SendData
;;;534        USART2_SendData(0x00);
000032  2000              MOVS     r0,#0
000034  f7fffffe          BL       USART2_SendData
;;;535        USART2_SendData(0x01);
000038  2001              MOVS     r0,#1
00003a  f7fffffe          BL       USART2_SendData
;;;536        USART2_SendData(add);
00003e  f89d0000          LDRB     r0,[sp,#0]
000042  f7fffffe          BL       USART2_SendData
;;;537        USART2_SendData(CRC16_hi);
000046  4630              MOV      r0,r6
000048  f7fffffe          BL       USART2_SendData
;;;538        USART2_SendData(CRC16_lo);
00004c  4638              MOV      r0,r7
00004e  f7fffffe          BL       USART2_SendData
;;;539        USART2_SendData(0xED);
000052  20ed              MOVS     r0,#0xed
000054  f7fffffe          BL       USART2_SendData
;;;540    }
000058  bdf8              POP      {r3-r7,pc}
;;;541    
                          ENDP


                          AREA ||i.return_all_capacity||, CODE, READONLY, ALIGN=2

                  return_all_capacity PROC
;;;488    /* 返回所有电池当前容量 */
;;;489    static void return_all_capacity()
000000  b5f0              PUSH     {r4-r7,lr}
;;;490    {
000002  b099              SUB      sp,sp,#0x64
;;;491        uint8_t error = 0;
000004  2000              MOVS     r0,#0
000006  9018              STR      r0,[sp,#0x60]
;;;492        uint16_t i = 0;
000008  2400              MOVS     r4,#0
;;;493        uint8_t *buf;
;;;494        uint8_t capacity[96];
;;;495        uint16_t crc16_result = 0;
00000a  2500              MOVS     r5,#0
;;;496        buf = (uint8_t *)OSMboxPend(ParaMbox, 0, &error);
00000c  aa18              ADD      r2,sp,#0x60
00000e  2100              MOVS     r1,#0
000010  481b              LDR      r0,|L11.128|
000012  6800              LDR      r0,[r0,#0]  ; ParaMbox
000014  f7fffffe          BL       OSMboxPend
000018  4606              MOV      r6,r0
;;;497        memcpy(capacity, buf + 96 * 3, 96);
00001a  2260              MOVS     r2,#0x60
00001c  f5067190          ADD      r1,r6,#0x120
000020  4668              MOV      r0,sp
000022  f7fffffe          BL       __aeabi_memcpy
;;;498        crc16_result = CRC16(capacity, 96);
000026  2160              MOVS     r1,#0x60
000028  4668              MOV      r0,sp
00002a  f7fffffe          BL       CRC16
00002e  4605              MOV      r5,r0
;;;499        USART2_SendData(0xEE);
000030  20ee              MOVS     r0,#0xee
000032  f7fffffe          BL       USART2_SendData
;;;500        USART2_SendData((uint8_t)readADD());
000036  f7fffffe          BL       readADD
00003a  b2c7              UXTB     r7,r0
00003c  4638              MOV      r0,r7
00003e  f7fffffe          BL       USART2_SendData
;;;501        USART2_SendData(0x0e);
000042  200e              MOVS     r0,#0xe
000044  f7fffffe          BL       USART2_SendData
;;;502        USART2_SendData(0x00);
000048  2000              MOVS     r0,#0
00004a  f7fffffe          BL       USART2_SendData
;;;503        USART2_SendData(0x40);
00004e  2040              MOVS     r0,#0x40
000050  f7fffffe          BL       USART2_SendData
;;;504    
;;;505        for(i = 0; i < 96; i++) {
000054  bf00              NOP      
000056  e005              B        |L11.100|
                  |L11.88|
;;;506            USART2_SendData(capacity[i]);
000058  f81d0004          LDRB     r0,[sp,r4]
00005c  f7fffffe          BL       USART2_SendData
000060  1c60              ADDS     r0,r4,#1              ;505
000062  b284              UXTH     r4,r0                 ;505
                  |L11.100|
000064  2c60              CMP      r4,#0x60              ;505
000066  dbf7              BLT      |L11.88|
;;;507        }
;;;508    
;;;509        USART2_SendData(crc16_result >> 8);
000068  1228              ASRS     r0,r5,#8
00006a  f7fffffe          BL       USART2_SendData
;;;510        USART2_SendData(crc16_result & 0x00ff);
00006e  b2e8              UXTB     r0,r5
000070  f7fffffe          BL       USART2_SendData
;;;511        USART2_SendData(0xED);
000074  20ed              MOVS     r0,#0xed
000076  f7fffffe          BL       USART2_SendData
;;;512    }
00007a  b019              ADD      sp,sp,#0x64
00007c  bdf0              POP      {r4-r7,pc}
;;;513    
                          ENDP

00007e  0000              DCW      0x0000
                  |L11.128|
                          DCD      ParaMbox

                          AREA ||i.return_all_res||, CODE, READONLY, ALIGN=2

                  return_all_res PROC
;;;460    /* 返回所有电池当前的内阻 */
;;;461    static void return_all_res()
000000  b5f0              PUSH     {r4-r7,lr}
;;;462    {
000002  b099              SUB      sp,sp,#0x64
;;;463        uint8_t error = 0;
000004  2000              MOVS     r0,#0
000006  9018              STR      r0,[sp,#0x60]
;;;464        uint16_t i = 0;
000008  2400              MOVS     r4,#0
;;;465        uint8_t *buf;
;;;466        uint8_t temp[96];
;;;467        uint16_t crc16_result = 0;
00000a  2500              MOVS     r5,#0
;;;468        buf = (uint8_t *)OSMboxPend(ParaMbox, 0, &error);
00000c  aa18              ADD      r2,sp,#0x60
00000e  2100              MOVS     r1,#0
000010  481b              LDR      r0,|L12.128|
000012  6800              LDR      r0,[r0,#0]  ; ParaMbox
000014  f7fffffe          BL       OSMboxPend
000018  4606              MOV      r6,r0
;;;469        memcpy(temp, buf + 96 * 2, 96);
00001a  2260              MOVS     r2,#0x60
00001c  f10601c0          ADD      r1,r6,#0xc0
000020  4668              MOV      r0,sp
000022  f7fffffe          BL       __aeabi_memcpy
;;;470        crc16_result = CRC16(temp, 96);
000026  2160              MOVS     r1,#0x60
000028  4668              MOV      r0,sp
00002a  f7fffffe          BL       CRC16
00002e  4605              MOV      r5,r0
;;;471        USART2_SendData(0xEE);
000030  20ee              MOVS     r0,#0xee
000032  f7fffffe          BL       USART2_SendData
;;;472        USART2_SendData((uint8_t)readADD());
000036  f7fffffe          BL       readADD
00003a  b2c7              UXTB     r7,r0
00003c  4638              MOV      r0,r7
00003e  f7fffffe          BL       USART2_SendData
;;;473        USART2_SendData(0x0e);
000042  200e              MOVS     r0,#0xe
000044  f7fffffe          BL       USART2_SendData
;;;474        USART2_SendData(0x00);
000048  2000              MOVS     r0,#0
00004a  f7fffffe          BL       USART2_SendData
;;;475        USART2_SendData(0x40);
00004e  2040              MOVS     r0,#0x40
000050  f7fffffe          BL       USART2_SendData
;;;476    
;;;477        for(i = 0; i < 96; i++) {
000054  bf00              NOP      
000056  e005              B        |L12.100|
                  |L12.88|
;;;478            USART2_SendData(temp[i]);
000058  f81d0004          LDRB     r0,[sp,r4]
00005c  f7fffffe          BL       USART2_SendData
000060  1c60              ADDS     r0,r4,#1              ;477
000062  b284              UXTH     r4,r0                 ;477
                  |L12.100|
000064  2c60              CMP      r4,#0x60              ;477
000066  dbf7              BLT      |L12.88|
;;;479        }
;;;480    
;;;481        USART2_SendData(crc16_result >> 8);
000068  1228              ASRS     r0,r5,#8
00006a  f7fffffe          BL       USART2_SendData
;;;482        USART2_SendData(crc16_result & 0x00ff);
00006e  b2e8              UXTB     r0,r5
000070  f7fffffe          BL       USART2_SendData
;;;483        USART2_SendData(0xED);
000074  20ed              MOVS     r0,#0xed
000076  f7fffffe          BL       USART2_SendData
;;;484    }
00007a  b019              ADD      sp,sp,#0x64
00007c  bdf0              POP      {r4-r7,pc}
;;;485    
                          ENDP

00007e  0000              DCW      0x0000
                  |L12.128|
                          DCD      ParaMbox

                          AREA ||i.return_all_temp||, CODE, READONLY, ALIGN=2

                  return_all_temp PROC
;;;433    /* 返回所有电池当前的温度 */
;;;434    static void return_all_temp()
000000  b5f0              PUSH     {r4-r7,lr}
;;;435    {
000002  b099              SUB      sp,sp,#0x64
;;;436        uint8_t error = 0;
000004  2000              MOVS     r0,#0
000006  9018              STR      r0,[sp,#0x60]
;;;437        uint16_t i = 0;
000008  2400              MOVS     r4,#0
;;;438        uint8_t *buf;
;;;439        uint8_t temp[96];
;;;440        uint16_t crc16_result = 0;
00000a  2500              MOVS     r5,#0
;;;441        buf = (uint8_t *)OSMboxPend(ParaMbox, 0, &error);
00000c  aa18              ADD      r2,sp,#0x60
00000e  2100              MOVS     r1,#0
000010  481b              LDR      r0,|L13.128|
000012  6800              LDR      r0,[r0,#0]  ; ParaMbox
000014  f7fffffe          BL       OSMboxPend
000018  4606              MOV      r6,r0
;;;442        memcpy(temp, buf + 96, 96);
00001a  2260              MOVS     r2,#0x60
00001c  f1060160          ADD      r1,r6,#0x60
000020  4668              MOV      r0,sp
000022  f7fffffe          BL       __aeabi_memcpy
;;;443        crc16_result = CRC16(temp, 96);
000026  2160              MOVS     r1,#0x60
000028  4668              MOV      r0,sp
00002a  f7fffffe          BL       CRC16
00002e  4605              MOV      r5,r0
;;;444        USART2_SendData(0xEE);
000030  20ee              MOVS     r0,#0xee
000032  f7fffffe          BL       USART2_SendData
;;;445        USART2_SendData((uint8_t)readADD());
000036  f7fffffe          BL       readADD
00003a  b2c7              UXTB     r7,r0
00003c  4638              MOV      r0,r7
00003e  f7fffffe          BL       USART2_SendData
;;;446        USART2_SendData(0x05);
000042  2005              MOVS     r0,#5
000044  f7fffffe          BL       USART2_SendData
;;;447        USART2_SendData(0x00);
000048  2000              MOVS     r0,#0
00004a  f7fffffe          BL       USART2_SendData
;;;448        USART2_SendData(0x40);
00004e  2040              MOVS     r0,#0x40
000050  f7fffffe          BL       USART2_SendData
;;;449    
;;;450        for(i = 0; i < 96; i++) {
000054  bf00              NOP      
000056  e005              B        |L13.100|
                  |L13.88|
;;;451            USART2_SendData(temp[i]);
000058  f81d0004          LDRB     r0,[sp,r4]
00005c  f7fffffe          BL       USART2_SendData
000060  1c60              ADDS     r0,r4,#1              ;450
000062  b284              UXTH     r4,r0                 ;450
                  |L13.100|
000064  2c60              CMP      r4,#0x60              ;450
000066  dbf7              BLT      |L13.88|
;;;452        }
;;;453    
;;;454        USART2_SendData(crc16_result >> 8);
000068  1228              ASRS     r0,r5,#8
00006a  f7fffffe          BL       USART2_SendData
;;;455        USART2_SendData(crc16_result & 0x00ff);
00006e  b2e8              UXTB     r0,r5
000070  f7fffffe          BL       USART2_SendData
;;;456        USART2_SendData(0xED);
000074  20ed              MOVS     r0,#0xed
000076  f7fffffe          BL       USART2_SendData
;;;457    }
00007a  b019              ADD      sp,sp,#0x64
00007c  bdf0              POP      {r4-r7,pc}
;;;458    
                          ENDP

00007e  0000              DCW      0x0000
                  |L13.128|
                          DCD      ParaMbox

                          AREA ||i.return_all_voltage||, CODE, READONLY, ALIGN=2

                  return_all_voltage PROC
;;;407    /* 返回所有电池当前的电压 */
;;;408    static void return_all_voltage()
000000  b5f0              PUSH     {r4-r7,lr}
;;;409    {
000002  b099              SUB      sp,sp,#0x64
;;;410        uint8_t error = 0;
000004  2000              MOVS     r0,#0
000006  9018              STR      r0,[sp,#0x60]
;;;411        uint16_t i = 0;
000008  2400              MOVS     r4,#0
;;;412        uint8_t *buf;
;;;413        uint8_t voltage[96];
;;;414        uint16_t crc16_result = 0;
00000a  2500              MOVS     r5,#0
;;;415        buf = (uint8_t *)OSMboxPend(ParaMbox, 0, &error);
00000c  aa18              ADD      r2,sp,#0x60
00000e  2100              MOVS     r1,#0
000010  481a              LDR      r0,|L14.124|
000012  6800              LDR      r0,[r0,#0]  ; ParaMbox
000014  f7fffffe          BL       OSMboxPend
000018  4607              MOV      r7,r0
;;;416        memcpy(voltage, buf, 96);
00001a  2260              MOVS     r2,#0x60
00001c  4639              MOV      r1,r7
00001e  4668              MOV      r0,sp
000020  f7fffffe          BL       __aeabi_memcpy
;;;417        crc16_result = CRC16(voltage, 96);
000024  2160              MOVS     r1,#0x60
000026  4668              MOV      r0,sp
000028  f7fffffe          BL       CRC16
00002c  4605              MOV      r5,r0
;;;418        USART2_SendData(0xEE);
00002e  20ee              MOVS     r0,#0xee
000030  f7fffffe          BL       USART2_SendData
;;;419        USART2_SendData((uint8_t)readADD());
000034  f7fffffe          BL       readADD
000038  b2c6              UXTB     r6,r0
00003a  4630              MOV      r0,r6
00003c  f7fffffe          BL       USART2_SendData
;;;420        USART2_SendData(0x04);
000040  2004              MOVS     r0,#4
000042  f7fffffe          BL       USART2_SendData
;;;421        USART2_SendData(0x00);
000046  2000              MOVS     r0,#0
000048  f7fffffe          BL       USART2_SendData
;;;422        USART2_SendData(0x40);
00004c  2040              MOVS     r0,#0x40
00004e  f7fffffe          BL       USART2_SendData
;;;423    
;;;424        for(i = 0; i < 96; i++) {
000052  bf00              NOP      
000054  e005              B        |L14.98|
                  |L14.86|
;;;425            USART2_SendData(voltage[i]);
000056  f81d0004          LDRB     r0,[sp,r4]
00005a  f7fffffe          BL       USART2_SendData
00005e  1c60              ADDS     r0,r4,#1              ;424
000060  b284              UXTH     r4,r0                 ;424
                  |L14.98|
000062  2c60              CMP      r4,#0x60              ;424
000064  dbf7              BLT      |L14.86|
;;;426        }
;;;427    
;;;428        USART2_SendData(crc16_result >> 8);
000066  1228              ASRS     r0,r5,#8
000068  f7fffffe          BL       USART2_SendData
;;;429        USART2_SendData(crc16_result & 0x00ff);
00006c  b2e8              UXTB     r0,r5
00006e  f7fffffe          BL       USART2_SendData
;;;430        USART2_SendData(0xED);
000072  20ed              MOVS     r0,#0xed
000074  f7fffffe          BL       USART2_SendData
;;;431    }
000078  b019              ADD      sp,sp,#0x64
00007a  bdf0              POP      {r4-r7,pc}
;;;432    
                          ENDP

                  |L14.124|
                          DCD      ParaMbox

                          AREA ||i.return_cal||, CODE, READONLY, ALIGN=1

                  return_cal PROC
;;;569    /* 返回校准结果 */
;;;570    static void return_cal(uint8_t hi_8, uint8_t low_8, uint8_t flag)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;571    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
;;;572        char data[2];
;;;573        uint16_t crc_result = 0;
00000a  2700              MOVS     r7,#0
;;;574        data[0] = hi_8;
00000c  f88d5000          STRB     r5,[sp,#0]
;;;575        data[1] = low_8;
000010  f88d4001          STRB     r4,[sp,#1]
;;;576        crc_result = CRC16((unsigned char *)data, 2);
000014  2102              MOVS     r1,#2
000016  4668              MOV      r0,sp
000018  f7fffffe          BL       CRC16
00001c  4607              MOV      r7,r0
;;;577        USART2_SendData(0xEE);
00001e  20ee              MOVS     r0,#0xee
000020  f7fffffe          BL       USART2_SendData
;;;578        USART2_SendData((uint8_t)readADD());	//address
000024  f7fffffe          BL       readADD
000028  f00008ff          AND      r8,r0,#0xff
00002c  4640              MOV      r0,r8
00002e  f7fffffe          BL       USART2_SendData
;;;579    
;;;580        switch(flag) {
000032  2ec0              CMP      r6,#0xc0
000034  d004              BEQ      |L15.64|
000036  2ec1              CMP      r6,#0xc1
000038  d006              BEQ      |L15.72|
00003a  2ec2              CMP      r6,#0xc2
00003c  d10c              BNE      |L15.88|
00003e  e007              B        |L15.80|
                  |L15.64|
;;;581            case CAL_V:
;;;582                USART2_SendData(0xc0);
000040  20c0              MOVS     r0,#0xc0
000042  f7fffffe          BL       USART2_SendData
;;;583                break;
000046  e008              B        |L15.90|
                  |L15.72|
;;;584    
;;;585            case CAL_T:
;;;586                USART2_SendData(0xc1);
000048  20c1              MOVS     r0,#0xc1
00004a  f7fffffe          BL       USART2_SendData
;;;587                break;
00004e  e004              B        |L15.90|
                  |L15.80|
;;;588    
;;;589            case CAL_R:
;;;590                USART2_SendData(0xc2);
000050  20c2              MOVS     r0,#0xc2
000052  f7fffffe          BL       USART2_SendData
;;;591    
;;;592            default:
000056  bf00              NOP      
                  |L15.88|
;;;593                break;
000058  bf00              NOP      
                  |L15.90|
00005a  bf00              NOP                            ;583
;;;594        }
;;;595    
;;;596        USART2_SendData(0x00);
00005c  2000              MOVS     r0,#0
00005e  f7fffffe          BL       USART2_SendData
;;;597        USART2_SendData(0x02);
000062  2002              MOVS     r0,#2
000064  f7fffffe          BL       USART2_SendData
;;;598        USART2_SendData(hi_8);
000068  4628              MOV      r0,r5
00006a  f7fffffe          BL       USART2_SendData
;;;599        USART2_SendData(low_8);
00006e  4620              MOV      r0,r4
000070  f7fffffe          BL       USART2_SendData
;;;600        USART2_SendData(crc_result >> 8);
000074  1238              ASRS     r0,r7,#8
000076  f7fffffe          BL       USART2_SendData
;;;601        USART2_SendData(crc_result & 0x00ff);
00007a  b2f8              UXTB     r0,r7
00007c  f7fffffe          BL       USART2_SendData
;;;602        USART2_SendData(0xED);
000080  20ed              MOVS     r0,#0xed
000082  f7fffffe          BL       USART2_SendData
;;;603    }
000086  e8bd83f8          POP      {r3-r9,pc}
;;;604    
                          ENDP


                          AREA ||i.return_id||, CODE, READONLY, ALIGN=2

                  return_id PROC
;;;300    *************************************************/
;;;301    static void return_id(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;302    {
;;;303        uint8_t *UinqID;
;;;304        uint16_t CRC16_Result = 0;
000004  2600              MOVS     r6,#0
;;;305        uint8_t CRC16_hi, CRC16_lo = 0;
000006  46b0              MOV      r8,r6
;;;306        uint8_t i = 0;
000008  2400              MOVS     r4,#0
;;;307        UinqID = (uint8_t *)0x1FFFF7E8;
00000a  4d18              LDR      r5,|L16.108|
;;;308        CRC16_Result = CRC16(UinqID, 12);
00000c  210c              MOVS     r1,#0xc
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       CRC16
000014  4606              MOV      r6,r0
;;;309        CRC16_lo = (uint8_t)(CRC16_Result & 0x00ff);
000016  f00608ff          AND      r8,r6,#0xff
;;;310        CRC16_hi = (uint8_t)(CRC16_Result >> 8);
00001a  1237              ASRS     r7,r6,#8
;;;311        USART2_SendData(0xEE);
00001c  20ee              MOVS     r0,#0xee
00001e  f7fffffe          BL       USART2_SendData
;;;312        USART2_SendData((uint8_t)readADD());
000022  f7fffffe          BL       readADD
000026  f00009ff          AND      r9,r0,#0xff
00002a  4648              MOV      r0,r9
00002c  f7fffffe          BL       USART2_SendData
;;;313        USART2_SendData(0x11);
000030  2011              MOVS     r0,#0x11
000032  f7fffffe          BL       USART2_SendData
;;;314        USART2_SendData(0x00);
000036  2000              MOVS     r0,#0
000038  f7fffffe          BL       USART2_SendData
;;;315        USART2_SendData(0x0C);
00003c  200c              MOVS     r0,#0xc
00003e  f7fffffe          BL       USART2_SendData
;;;316    
;;;317        for(i = 0; i < 12; i++) {
000042  bf00              NOP      
000044  e004              B        |L16.80|
                  |L16.70|
;;;318            USART2_SendData(UinqID[i]);
000046  5d28              LDRB     r0,[r5,r4]
000048  f7fffffe          BL       USART2_SendData
00004c  1c60              ADDS     r0,r4,#1              ;317
00004e  b2c4              UXTB     r4,r0                 ;317
                  |L16.80|
000050  2c0c              CMP      r4,#0xc               ;317
000052  dbf8              BLT      |L16.70|
;;;319        }
;;;320    
;;;321        USART2_SendData(CRC16_hi);
000054  4638              MOV      r0,r7
000056  f7fffffe          BL       USART2_SendData
;;;322        USART2_SendData(CRC16_lo);
00005a  4640              MOV      r0,r8
00005c  f7fffffe          BL       USART2_SendData
;;;323        USART2_SendData(0xED);
000060  20ed              MOVS     r0,#0xed
000062  f7fffffe          BL       USART2_SendData
;;;324    }
000066  e8bd87f0          POP      {r4-r10,pc}
;;;325    /*************************************************
                          ENDP

00006a  0000              DCW      0x0000
                  |L16.108|
                          DCD      0x1ffff7e8

                          AREA ||i.return_para_all||, CODE, READONLY, ALIGN=2

                  return_para_all PROC
;;;366    
;;;367    void return_para_all(void)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;368    {
;;;369        //float *paraall;
;;;370        uint8_t err = 0;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;371        uint16_t i = 0;
000008  2400              MOVS     r4,#0
;;;372        uint8_t *p_ParaAll;
;;;373        uint16_t CRC16_Result = 0;
00000a  2600              MOVS     r6,#0
;;;374        uint8_t CRC16_hi, CRC16_lo = 0;
00000c  4680              MOV      r8,r0
;;;375    		
;;;376        p_ParaAll = (uint8_t *)OSMboxPend(ParaMbox, 2, &err);	
00000e  466a              MOV      r2,sp
000010  2102              MOVS     r1,#2
000012  4820              LDR      r0,|L17.148|
000014  6800              LDR      r0,[r0,#0]  ; ParaMbox
000016  f7fffffe          BL       OSMboxPend
00001a  4605              MOV      r5,r0
;;;377    		
;;;378    		if(err == OS_ERR_NONE) 
00001c  f89d0000          LDRB     r0,[sp,#0]
000020  b910              CBNZ     r0,|L17.40|
;;;379    		{
;;;380    				pre_p_ParaAll = p_ParaAll;
000022  481d              LDR      r0,|L17.152|
000024  6005              STR      r5,[r0,#0]  ; pre_p_ParaAll
000026  e005              B        |L17.52|
                  |L17.40|
;;;381    		}
;;;382    		/*通讯超时*/
;;;383    		else if(err == OS_ERR_TIMEOUT) 
000028  f89d0000          LDRB     r0,[sp,#0]
00002c  280a              CMP      r0,#0xa
00002e  d101              BNE      |L17.52|
;;;384    		{
;;;385    				p_ParaAll = pre_p_ParaAll;
000030  4819              LDR      r0,|L17.152|
000032  6805              LDR      r5,[r0,#0]  ; pre_p_ParaAll
                  |L17.52|
;;;386    		}
;;;387       
;;;388        CRC16_Result = CRC16(p_ParaAll, 12);
000034  210c              MOVS     r1,#0xc
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       CRC16
00003c  4606              MOV      r6,r0
;;;389        CRC16_lo = (uint8_t)(CRC16_Result & 0x00ff);
00003e  f00608ff          AND      r8,r6,#0xff
;;;390        CRC16_hi = (uint8_t)(CRC16_Result >> 8);
000042  1237              ASRS     r7,r6,#8
;;;391    		
;;;392        USART2_SendData(0xEE);
000044  20ee              MOVS     r0,#0xee
000046  f7fffffe          BL       USART2_SendData
;;;393        USART2_SendData((uint8_t)readADD());
00004a  f7fffffe          BL       readADD
00004e  f00009ff          AND      r9,r0,#0xff
000052  4648              MOV      r0,r9
000054  f7fffffe          BL       USART2_SendData
;;;394        USART2_SendData(0x07);
000058  2007              MOVS     r0,#7
00005a  f7fffffe          BL       USART2_SendData
;;;395        USART2_SendData(0x00);
00005e  2000              MOVS     r0,#0
000060  f7fffffe          BL       USART2_SendData
;;;396        USART2_SendData(0x0C);
000064  200c              MOVS     r0,#0xc
000066  f7fffffe          BL       USART2_SendData
;;;397        for(i = 0; i < 12; i++) 
00006a  2400              MOVS     r4,#0
00006c  e004              B        |L17.120|
                  |L17.110|
;;;398    		{
;;;399            USART2_SendData(p_ParaAll[i]);
00006e  5d28              LDRB     r0,[r5,r4]
000070  f7fffffe          BL       USART2_SendData
000074  1c60              ADDS     r0,r4,#1              ;397
000076  b284              UXTH     r4,r0                 ;397
                  |L17.120|
000078  2c0c              CMP      r4,#0xc               ;397
00007a  dbf8              BLT      |L17.110|
;;;400        }
;;;401        USART2_SendData(CRC16_hi);
00007c  4638              MOV      r0,r7
00007e  f7fffffe          BL       USART2_SendData
;;;402        USART2_SendData(CRC16_lo);
000082  4640              MOV      r0,r8
000084  f7fffffe          BL       USART2_SendData
;;;403        USART2_SendData(0xED);
000088  20ed              MOVS     r0,#0xed
00008a  f7fffffe          BL       USART2_SendData
;;;404    
;;;405    }
00008e  e8bd83f8          POP      {r3-r9,pc}
;;;406    
                          ENDP

000092  0000              DCW      0x0000
                  |L17.148|
                          DCD      ParaMbox
                  |L17.152|
                          DCD      pre_p_ParaAll

                          AREA ||i.return_version||, CODE, READONLY, ALIGN=2

                  return_version PROC
;;;272     *************************************************/
;;;273    static void return_version(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;274    {
;;;275        uint8_t Version[3] = {MAIN_VERSION, SUB_VERSION, R_VERSION};
000002  a01a              ADR      r0,|L18.108|
000004  6800              LDR      r0,[r0,#0]
000006  9000              STR      r0,[sp,#0]
;;;276        uint16_t CRC16_Result = 0;
000008  2400              MOVS     r4,#0
;;;277        uint8_t CRC16_hi, CRC16_lo = 0;
00000a  2600              MOVS     r6,#0
;;;278        CRC16_Result = CRC16(Version, 3);
00000c  2103              MOVS     r1,#3
00000e  4668              MOV      r0,sp
000010  f7fffffe          BL       CRC16
000014  4604              MOV      r4,r0
;;;279        CRC16_lo = (uint8_t)(CRC16_Result & 0x00ff);
000016  b2e6              UXTB     r6,r4
;;;280        CRC16_hi = (uint8_t)(CRC16_Result >> 8);
000018  1225              ASRS     r5,r4,#8
;;;281        USART2_SendData(0xEE);
00001a  20ee              MOVS     r0,#0xee
00001c  f7fffffe          BL       USART2_SendData
;;;282        USART2_SendData((uint8_t)readADD());
000020  f7fffffe          BL       readADD
000024  b2c7              UXTB     r7,r0
000026  4638              MOV      r0,r7
000028  f7fffffe          BL       USART2_SendData
;;;283        USART2_SendData(0x01);
00002c  2001              MOVS     r0,#1
00002e  f7fffffe          BL       USART2_SendData
;;;284        USART2_SendData(0x00);
000032  2000              MOVS     r0,#0
000034  f7fffffe          BL       USART2_SendData
;;;285        USART2_SendData(0x03);
000038  2003              MOVS     r0,#3
00003a  f7fffffe          BL       USART2_SendData
;;;286        USART2_SendData(Version[0]);
00003e  f89d0000          LDRB     r0,[sp,#0]
000042  f7fffffe          BL       USART2_SendData
;;;287        USART2_SendData(Version[1]);
000046  f89d0001          LDRB     r0,[sp,#1]
00004a  f7fffffe          BL       USART2_SendData
;;;288        USART2_SendData(Version[2]);
00004e  f89d0002          LDRB     r0,[sp,#2]
000052  f7fffffe          BL       USART2_SendData
;;;289        USART2_SendData(CRC16_hi);
000056  4628              MOV      r0,r5
000058  f7fffffe          BL       USART2_SendData
;;;290        USART2_SendData(CRC16_lo);
00005c  4630              MOV      r0,r6
00005e  f7fffffe          BL       USART2_SendData
;;;291        USART2_SendData(0xED);
000062  20ed              MOVS     r0,#0xed
000064  f7fffffe          BL       USART2_SendData
;;;292    }
000068  bdf8              POP      {r3-r7,pc}
;;;293    /*************************************************
                          ENDP

00006a  0000              DCW      0x0000
                  |L18.108|
00006c  00                DCB      0
00006d  00                DCB      0
00006e  0100              DCB      1,0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  auchCRCHi
                          DCD      0x00000000
                          DCD      0x000000c1
                          DCD      0x00000081
                          DCD      0x00000040
                          DCD      0x00000001
                          DCD      0x000000c0
                          DCD      0x00000080
                          DCD      0x00000041
                          DCD      0x00000001
                          DCD      0x000000c0
                          DCD      0x00000080
                          DCD      0x00000041
                          DCD      0x00000000
                          DCD      0x000000c1
                          DCD      0x00000081
                          DCD      0x00000040
                          DCD      0x00000001
                          DCD      0x000000c0
                          DCD      0x00000080
                          DCD      0x00000041
                          DCD      0x00000000
                          DCD      0x000000c1
                          DCD      0x00000081
                          DCD      0x00000040
                          DCD      0x00000000
                          DCD      0x000000c1
                          DCD      0x00000081
                          DCD      0x00000040
                          DCD      0x00000001
                          DCD      0x000000c0
                          DCD      0x00000080
                          DCD      0x00000041
                          DCD      0x00000001
                          DCD      0x000000c0
                          DCD      0x00000080
                          DCD      0x00000041
                          DCD      0x00000000
                          DCD      0x000000c1
                          DCD      0x00000081
                          DCD      0x00000040
                          DCD      0x00000000
                          DCD      0x000000c1
                          DCD      0x00000081
                          DCD      0x00000040
                          DCD      0x00000001
                          DCD      0x000000c0
                          DCD      0x00000080
                          DCD      0x00000041
                          DCD      0x00000000
                          DCD      0x000000c1
                          DCD      0x00000081
                          DCD      0x00000040
                          DCD      0x00000001
                          DCD      0x000000c0
                          DCD      0x00000080
                          DCD      0x00000041
                          DCD      0x00000001
                          DCD      0x000000c0
                          DCD      0x00000080
                          DCD      0x00000041
                          DCD      0x00000000
                          DCD      0x000000c1
                          DCD      0x00000081
                          DCD      0x00000040
                          DCD      0x00000001
                          DCD      0x000000c0
                          DCD      0x00000080
                          DCD      0x00000041
                          DCD      0x00000000
                          DCD      0x000000c1
                          DCD      0x00000081
                          DCD      0x00000040
                          DCD      0x00000000
                          DCD      0x000000c1
                          DCD      0x00000081
                          DCD      0x00000040
                          DCD      0x00000001
                          DCD      0x000000c0
                          DCD      0x00000080
                          DCD      0x00000041
                          DCD      0x00000000
                          DCD      0x000000c1
                          DCD      0x00000081
                          DCD      0x00000040
                          DCD      0x00000001
                          DCD      0x000000c0
                          DCD      0x00000080
                          DCD      0x00000041
                          DCD      0x00000001
                          DCD      0x000000c0
                          DCD      0x00000080
                          DCD      0x00000041
                          DCD      0x00000000
                          DCD      0x000000c1
                          DCD      0x00000081
                          DCD      0x00000040
                          DCD      0x00000000
                          DCD      0x000000c1
                          DCD      0x00000081
                          DCD      0x00000040
                          DCD      0x00000001
                          DCD      0x000000c0
                          DCD      0x00000080
                          DCD      0x00000041
                          DCD      0x00000001
                          DCD      0x000000c0
                          DCD      0x00000080
                          DCD      0x00000041
                          DCD      0x00000000
                          DCD      0x000000c1
                          DCD      0x00000081
                          DCD      0x00000040
                          DCD      0x00000001
                          DCD      0x000000c0
                          DCD      0x00000080
                          DCD      0x00000041
                          DCD      0x00000000
                          DCD      0x000000c1
                          DCD      0x00000081
                          DCD      0x00000040
                          DCD      0x00000000
                          DCD      0x000000c1
                          DCD      0x00000081
                          DCD      0x00000040
                          DCD      0x00000001
                          DCD      0x000000c0
                          DCD      0x00000080
                          DCD      0x00000041
                          DCD      0x00000001
                          DCD      0x000000c0
                          DCD      0x00000080
                          DCD      0x00000041
                          DCD      0x00000000
                          DCD      0x000000c1
                          DCD      0x00000081
                          DCD      0x00000040
                          DCD      0x00000000
                          DCD      0x000000c1
                          DCD      0x00000081
                          DCD      0x00000040
                          DCD      0x00000001
                          DCD      0x000000c0
                          DCD      0x00000080
                          DCD      0x00000041
                          DCD      0x00000000
                          DCD      0x000000c1
                          DCD      0x00000081
                          DCD      0x00000040
                          DCD      0x00000001
                          DCD      0x000000c0
                          DCD      0x00000080
                          DCD      0x00000041
                          DCD      0x00000001
                          DCD      0x000000c0
                          DCD      0x00000080
                          DCD      0x00000041
                          DCD      0x00000000
                          DCD      0x000000c1
                          DCD      0x00000081
                          DCD      0x00000040
                          DCD      0x00000000
                          DCD      0x000000c1
                          DCD      0x00000081
                          DCD      0x00000040
                          DCD      0x00000001
                          DCD      0x000000c0
                          DCD      0x00000080
                          DCD      0x00000041
                          DCD      0x00000001
                          DCD      0x000000c0
                          DCD      0x00000080
                          DCD      0x00000041
                          DCD      0x00000000
                          DCD      0x000000c1
                          DCD      0x00000081
                          DCD      0x00000040
                          DCD      0x00000001
                          DCD      0x000000c0
                          DCD      0x00000080
                          DCD      0x00000041
                          DCD      0x00000000
                          DCD      0x000000c1
                          DCD      0x00000081
                          DCD      0x00000040
                          DCD      0x00000000
                          DCD      0x000000c1
                          DCD      0x00000081
                          DCD      0x00000040
                          DCD      0x00000001
                          DCD      0x000000c0
                          DCD      0x00000080
                          DCD      0x00000041
                          DCD      0x00000000
                          DCD      0x000000c1
                          DCD      0x00000081
                          DCD      0x00000040
                          DCD      0x00000001
                          DCD      0x000000c0
                          DCD      0x00000080
                          DCD      0x00000041
                          DCD      0x00000001
                          DCD      0x000000c0
                          DCD      0x00000080
                          DCD      0x00000041
                          DCD      0x00000000
                          DCD      0x000000c1
                          DCD      0x00000081
                          DCD      0x00000040
                          DCD      0x00000001
                          DCD      0x000000c0
                          DCD      0x00000080
                          DCD      0x00000041
                          DCD      0x00000000
                          DCD      0x000000c1
                          DCD      0x00000081
                          DCD      0x00000040
                          DCD      0x00000000
                          DCD      0x000000c1
                          DCD      0x00000081
                          DCD      0x00000040
                          DCD      0x00000001
                          DCD      0x000000c0
                          DCD      0x00000080
                          DCD      0x00000041
                          DCD      0x00000001
                          DCD      0x000000c0
                          DCD      0x00000080
                          DCD      0x00000041
                          DCD      0x00000000
                          DCD      0x000000c1
                          DCD      0x00000081
                          DCD      0x00000040
                          DCD      0x00000000
                          DCD      0x000000c1
                          DCD      0x00000081
                          DCD      0x00000040
                          DCD      0x00000001
                          DCD      0x000000c0
                          DCD      0x00000080
                          DCD      0x00000041
                          DCD      0x00000000
                          DCD      0x000000c1
                          DCD      0x00000081
                          DCD      0x00000040
                          DCD      0x00000001
                          DCD      0x000000c0
                          DCD      0x00000080
                          DCD      0x00000041
                          DCD      0x00000001
                          DCD      0x000000c0
                          DCD      0x00000080
                          DCD      0x00000041
                          DCD      0x00000000
                          DCD      0x000000c1
                          DCD      0x00000081
                          DCD      0x00000040
                  auchCRCLo
                          DCD      0x00000000
                          DCD      0x000000c0
                          DCD      0x000000c1
                          DCD      0x00000001
                          DCD      0x000000c3
                          DCD      0x00000003
                          DCD      0x00000002
                          DCD      0x000000c2
                          DCD      0x000000c6
                          DCD      0x00000006
                          DCD      0x00000007
                          DCD      0x000000c7
                          DCD      0x00000005
                          DCD      0x000000c5
                          DCD      0x000000c4
                          DCD      0x00000004
                          DCD      0x000000cc
                          DCD      0x0000000c
                          DCD      0x0000000d
                          DCD      0x000000cd
                          DCD      0x0000000f
                          DCD      0x000000cf
                          DCD      0x000000ce
                          DCD      0x0000000e
                          DCD      0x0000000a
                          DCD      0x000000ca
                          DCD      0x000000cb
                          DCD      0x0000000b
                          DCD      0x000000c9
                          DCD      0x00000009
                          DCD      0x00000008
                          DCD      0x000000c8
                          DCD      0x000000d8
                          DCD      0x00000018
                          DCD      0x00000019
                          DCD      0x000000d9
                          DCD      0x0000001b
                          DCD      0x000000db
                          DCD      0x000000da
                          DCD      0x0000001a
                          DCD      0x0000001e
                          DCD      0x000000de
                          DCD      0x000000df
                          DCD      0x0000001f
                          DCD      0x000000dd
                          DCD      0x0000001d
                          DCD      0x0000001c
                          DCD      0x000000dc
                          DCD      0x00000014
                          DCD      0x000000d4
                          DCD      0x000000d5
                          DCD      0x00000015
                          DCD      0x000000d7
                          DCD      0x00000017
                          DCD      0x00000016
                          DCD      0x000000d6
                          DCD      0x000000d2
                          DCD      0x00000012
                          DCD      0x00000013
                          DCD      0x000000d3
                          DCD      0x00000011
                          DCD      0x000000d1
                          DCD      0x000000d0
                          DCD      0x00000010
                          DCD      0x000000f0
                          DCD      0x00000030
                          DCD      0x00000031
                          DCD      0x000000f1
                          DCD      0x00000033
                          DCD      0x000000f3
                          DCD      0x000000f2
                          DCD      0x00000032
                          DCD      0x00000036
                          DCD      0x000000f6
                          DCD      0x000000f7
                          DCD      0x00000037
                          DCD      0x000000f5
                          DCD      0x00000035
                          DCD      0x00000034
                          DCD      0x000000f4
                          DCD      0x0000003c
                          DCD      0x000000fc
                          DCD      0x000000fd
                          DCD      0x0000003d
                          DCD      0x000000ff
                          DCD      0x0000003f
                          DCD      0x0000003e
                          DCD      0x000000fe
                          DCD      0x000000fa
                          DCD      0x0000003a
                          DCD      0x0000003b
                          DCD      0x000000fb
                          DCD      0x00000039
                          DCD      0x000000f9
                          DCD      0x000000f8
                          DCD      0x00000038
                          DCD      0x00000028
                          DCD      0x000000e8
                          DCD      0x000000e9
                          DCD      0x00000029
                          DCD      0x000000eb
                          DCD      0x0000002b
                          DCD      0x0000002a
                          DCD      0x000000ea
                          DCD      0x000000ee
                          DCD      0x0000002e
                          DCD      0x0000002f
                          DCD      0x000000ef
                          DCD      0x0000002d
                          DCD      0x000000ed
                          DCD      0x000000ec
                          DCD      0x0000002c
                          DCD      0x000000e4
                          DCD      0x00000024
                          DCD      0x00000025
                          DCD      0x000000e5
                          DCD      0x00000027
                          DCD      0x000000e7
                          DCD      0x000000e6
                          DCD      0x00000026
                          DCD      0x00000022
                          DCD      0x000000e2
                          DCD      0x000000e3
                          DCD      0x00000023
                          DCD      0x000000e1
                          DCD      0x00000021
                          DCD      0x00000020
                          DCD      0x000000e0
                          DCD      0x000000a0
                          DCD      0x00000060
                          DCD      0x00000061
                          DCD      0x000000a1
                          DCD      0x00000063
                          DCD      0x000000a3
                          DCD      0x000000a2
                          DCD      0x00000062
                          DCD      0x00000066
                          DCD      0x000000a6
                          DCD      0x000000a7
                          DCD      0x00000067
                          DCD      0x000000a5
                          DCD      0x00000065
                          DCD      0x00000064
                          DCD      0x000000a4
                          DCD      0x0000006c
                          DCD      0x000000ac
                          DCD      0x000000ad
                          DCD      0x0000006d
                          DCD      0x000000af
                          DCD      0x0000006f
                          DCD      0x0000006e
                          DCD      0x000000ae
                          DCD      0x000000aa
                          DCD      0x0000006a
                          DCD      0x0000006b
                          DCD      0x000000ab
                          DCD      0x00000069
                          DCD      0x000000a9
                          DCD      0x000000a8
                          DCD      0x00000068
                          DCD      0x00000078
                          DCD      0x000000b8
                          DCD      0x000000b9
                          DCD      0x00000079
                          DCD      0x000000bb
                          DCD      0x0000007b
                          DCD      0x0000007a
                          DCD      0x000000ba
                          DCD      0x000000be
                          DCD      0x0000007e
                          DCD      0x0000007f
                          DCD      0x000000bf
                          DCD      0x0000007d
                          DCD      0x000000bd
                          DCD      0x000000bc
                          DCD      0x0000007c
                          DCD      0x000000b4
                          DCD      0x00000074
                          DCD      0x00000075
                          DCD      0x000000b5
                          DCD      0x00000077
                          DCD      0x000000b7
                          DCD      0x000000b6
                          DCD      0x00000076
                          DCD      0x00000072
                          DCD      0x000000b2
                          DCD      0x000000b3
                          DCD      0x00000073
                          DCD      0x000000b1
                          DCD      0x00000071
                          DCD      0x00000070
                          DCD      0x000000b0
                          DCD      0x00000050
                          DCD      0x00000090
                          DCD      0x00000091
                          DCD      0x00000051
                          DCD      0x00000093
                          DCD      0x00000053
                          DCD      0x00000052
                          DCD      0x00000092
                          DCD      0x00000096
                          DCD      0x00000056
                          DCD      0x00000057
                          DCD      0x00000097
                          DCD      0x00000055
                          DCD      0x00000095
                          DCD      0x00000094
                          DCD      0x00000054
                          DCD      0x0000009c
                          DCD      0x0000005c
                          DCD      0x0000005d
                          DCD      0x0000009d
                          DCD      0x0000005f
                          DCD      0x0000009f
                          DCD      0x0000009e
                          DCD      0x0000005e
                          DCD      0x0000005a
                          DCD      0x0000009a
                          DCD      0x0000009b
                          DCD      0x0000005b
                          DCD      0x00000099
                          DCD      0x00000059
                          DCD      0x00000058
                          DCD      0x00000098
                          DCD      0x00000088
                          DCD      0x00000048
                          DCD      0x00000049
                          DCD      0x00000089
                          DCD      0x0000004b
                          DCD      0x0000008b
                          DCD      0x0000008a
                          DCD      0x0000004a
                          DCD      0x0000004e
                          DCD      0x0000008e
                          DCD      0x0000008f
                          DCD      0x0000004f
                          DCD      0x0000008d
                          DCD      0x0000004d
                          DCD      0x0000004c
                          DCD      0x0000008c
                          DCD      0x00000044
                          DCD      0x00000084
                          DCD      0x00000085
                          DCD      0x00000045
                          DCD      0x00000087
                          DCD      0x00000047
                          DCD      0x00000046
                          DCD      0x00000086
                          DCD      0x00000082
                          DCD      0x00000042
                          DCD      0x00000043
                          DCD      0x00000083
                          DCD      0x00000041
                          DCD      0x00000081
                          DCD      0x00000080
                          DCD      0x00000040

                          AREA ||.data||, DATA, ALIGN=2

                  R_calibration_OK
000000  01                DCB      0x01
                  V_calibration_OK
000001  00                DCB      0x00
                  R_unwork
000002  0000              DCB      0x00,0x00
                  pre_p_ParaAll
                          DCD      0x00000000
