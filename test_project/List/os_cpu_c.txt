; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\os_cpu_c.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\os_cpu_c.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\Source\APP -I.\Source\BSP -I.\Source\uCOS-II\Source -I.\Source\uCOS-II\uC-CPU -I.\Source\uCOS-II\uC-LIB -I.\Source\uCOS-II\Ports -I.\Source\uCGUI\Config -I.\Source\uCGUI\emWinDemo -I.\Source\uCGUI\inc -I.\Source\uCGUI\LCDDriver -I.\Source\uCGUI\uCGUIDemo -I.\Source\Libraries\STM32F10x_StdPeriph_Driver\inc -I.\Source\Libraries\CMSIS\Core\CM3 -I.\Source\APP\HMI -I"D:\Program Files (x86)\keil\ARM\RV31\INC" -I"D:\Program Files (x86)\keil\ARM\PACK\ARM\CMSIS\3.20.3\CMSIS\Include" -I"D:\Program Files (x86)\keil\ARM\PACK\Keil\STM32F1xx_DFP\1.0.2\Device\Include" -DSTM32F10X_HD --omf_browse=.\obj\os_cpu_c.crf Source\uCOS-II\Ports\os_cpu_c.c]
                          THUMB

                          AREA ||i.OSInitHookBegin||, CODE, READONLY, ALIGN=2

                  OSInitHookBegin PROC
;;;50     #if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
;;;51     void  OSInitHookBegin (void)
000000  2000              MOVS     r0,#0
;;;52     {
;;;53     #if OS_TMR_EN > 0
;;;54         OSTmrCtr = 0;
000002  4901              LDR      r1,|L1.8|
000004  8008              STRH     r0,[r1,#0]
;;;55     #endif
;;;56     }
000006  4770              BX       lr
;;;57     #endif
                          ENDP

                  |L1.8|
                          DCD      OSTmrCtr

                          AREA ||i.OSInitHookEnd||, CODE, READONLY, ALIGN=1

                  OSInitHookEnd PROC
;;;71     #if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
;;;72     void  OSInitHookEnd (void)
000000  4770              BX       lr
;;;73     {
;;;74     }
;;;75     #endif
                          ENDP


                          AREA ||i.OSTCBInitHook||, CODE, READONLY, ALIGN=1

                  OSTCBInitHook PROC
;;;258    #if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
;;;259    void  OSTCBInitHook (OS_TCB *ptcb)
000000  4770              BX       lr
;;;260    {
;;;261    #if OS_APP_HOOKS_EN > 0
;;;262        App_TCBInitHook(ptcb);
;;;263    #else
;;;264        (void)ptcb;                                                         /* Prevent compiler warning                                 */
;;;265    #endif
;;;266    }
;;;267    #endif
                          ENDP


                          AREA ||i.OSTaskCreateHook||, CODE, READONLY, ALIGN=1

                  OSTaskCreateHook PROC
;;;88     #if OS_CPU_HOOKS_EN > 0
;;;89     void  OSTaskCreateHook (OS_TCB *ptcb)
000000  4770              BX       lr
;;;90     {
;;;91     #if OS_APP_HOOKS_EN > 0
;;;92         App_TaskCreateHook(ptcb);
;;;93     #else
;;;94         (void)ptcb;                                                         /* Prevent compiler warning                                 */
;;;95     #endif
;;;96     }
;;;97     #endif
                          ENDP


                          AREA ||i.OSTaskDelHook||, CODE, READONLY, ALIGN=1

                  OSTaskDelHook PROC
;;;111    #if OS_CPU_HOOKS_EN > 0
;;;112    void  OSTaskDelHook (OS_TCB *ptcb)
000000  4770              BX       lr
;;;113    {
;;;114    #if OS_APP_HOOKS_EN > 0
;;;115        App_TaskDelHook(ptcb);
;;;116    #else
;;;117        (void)ptcb;                                                         /* Prevent compiler warning                                 */
;;;118    #endif
;;;119    }
;;;120    #endif
                          ENDP


                          AREA ||i.OSTaskIdleHook||, CODE, READONLY, ALIGN=1

                  OSTaskIdleHook PROC
;;;134    #if OS_CPU_HOOKS_EN > 0 && OS_VERSION >= 251
;;;135    void  OSTaskIdleHook (void)
000000  4770              BX       lr
;;;136    {
;;;137    #if OS_APP_HOOKS_EN > 0
;;;138        App_TaskIdleHook();
;;;139    #endif
;;;140    }
;;;141    #endif
                          ENDP


                          AREA ||i.OSTaskStatHook||, CODE, READONLY, ALIGN=1

                  OSTaskStatHook PROC
;;;154    #if OS_CPU_HOOKS_EN > 0
;;;155    void  OSTaskStatHook (void)
000000  4770              BX       lr
;;;156    {
;;;157    #if OS_APP_HOOKS_EN > 0
;;;158        App_TaskStatHook();
;;;159    #endif
;;;160    }
;;;161    #endif
                          ENDP


                          AREA ||i.OSTaskStkInit||, CODE, READONLY, ALIGN=1

                  OSTaskStkInit PROC
;;;191    
;;;192    OS_STK *OSTaskStkInit (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT16U opt)
000000  b570              PUSH     {r4-r6,lr}
;;;193    {
000002  4604              MOV      r4,r0
;;;194        OS_STK *stk;
;;;195    
;;;196    
;;;197        (void)opt;                                 /* 'opt' is not used, prevent warning                     */
;;;198        stk       = ptos;                          /* Load stack pointer                                     */
000004  4610              MOV      r0,r2
;;;199    
;;;200                                                   /* Registers stacked as if auto-saved on exception        */
;;;201        *(stk)    = (INT32U)0x01000000L;           /* xPSR                                                   */
000006  f04f7580          MOV      r5,#0x1000000
00000a  6005              STR      r5,[r0,#0]
;;;202        *(--stk)  = (INT32U)task;                  /* Entry Point                                            */
00000c  1f05              SUBS     r5,r0,#4
00000e  4628              MOV      r0,r5
000010  602c              STR      r4,[r5,#0]
;;;203        *(--stk)  = (INT32U)0xFFFFFFFEL;           /* R14 (LR) (init value will cause fault if ever used)    */
000012  f06f0601          MVN      r6,#1
000016  1f05              SUBS     r5,r0,#4
000018  4628              MOV      r0,r5
00001a  602e              STR      r6,[r5,#0]
;;;204        *(--stk)  = (INT32U)0x12121212L;           /* R12                                                    */
00001c  f04f3612          MOV      r6,#0x12121212
000020  1f05              SUBS     r5,r0,#4
000022  4628              MOV      r0,r5
000024  602e              STR      r6,[r5,#0]
;;;205        *(--stk)  = (INT32U)0x03030303L;           /* R3                                                     */
000026  f04f3603          MOV      r6,#0x3030303
00002a  1f05              SUBS     r5,r0,#4
00002c  4628              MOV      r0,r5
00002e  602e              STR      r6,[r5,#0]
;;;206        *(--stk)  = (INT32U)0x02020202L;           /* R2                                                     */
000030  f04f3602          MOV      r6,#0x2020202
000034  1f05              SUBS     r5,r0,#4
000036  4628              MOV      r0,r5
000038  602e              STR      r6,[r5,#0]
;;;207        *(--stk)  = (INT32U)0x01010101L;           /* R1                                                     */
00003a  1076              ASRS     r6,r6,#1
00003c  1f05              SUBS     r5,r0,#4
00003e  4628              MOV      r0,r5
000040  602e              STR      r6,[r5,#0]
;;;208        *(--stk)  = (INT32U)p_arg;                 /* R0 : argument                                          */
000042  1f05              SUBS     r5,r0,#4
000044  4628              MOV      r0,r5
000046  6029              STR      r1,[r5,#0]
;;;209    
;;;210                                                   /* Remaining registers saved on process stack             */
;;;211        *(--stk)  = (INT32U)0x11111111L;           /* R11                                                    */
000048  f04f3611          MOV      r6,#0x11111111
00004c  1f05              SUBS     r5,r0,#4
00004e  4628              MOV      r0,r5
000050  602e              STR      r6,[r5,#0]
;;;212        *(--stk)  = (INT32U)0x10101010L;           /* R10                                                    */
000052  f04f3610          MOV      r6,#0x10101010
000056  1f05              SUBS     r5,r0,#4
000058  4628              MOV      r0,r5
00005a  602e              STR      r6,[r5,#0]
;;;213        *(--stk)  = (INT32U)0x09090909L;           /* R9                                                     */
00005c  f04f3609          MOV      r6,#0x9090909
000060  1f05              SUBS     r5,r0,#4
000062  4628              MOV      r0,r5
000064  602e              STR      r6,[r5,#0]
;;;214        *(--stk)  = (INT32U)0x08080808L;           /* R8                                                     */
000066  f04f3608          MOV      r6,#0x8080808
00006a  1f05              SUBS     r5,r0,#4
00006c  4628              MOV      r0,r5
00006e  602e              STR      r6,[r5,#0]
;;;215        *(--stk)  = (INT32U)0x07070707L;           /* R7                                                     */
000070  f04f3607          MOV      r6,#0x7070707
000074  1f05              SUBS     r5,r0,#4
000076  4628              MOV      r0,r5
000078  602e              STR      r6,[r5,#0]
;;;216        *(--stk)  = (INT32U)0x06060606L;           /* R6                                                     */
00007a  f04f3606          MOV      r6,#0x6060606
00007e  1f05              SUBS     r5,r0,#4
000080  4628              MOV      r0,r5
000082  602e              STR      r6,[r5,#0]
;;;217        *(--stk)  = (INT32U)0x05050505L;           /* R5                                                     */
000084  f04f3605          MOV      r6,#0x5050505
000088  1f05              SUBS     r5,r0,#4
00008a  4628              MOV      r0,r5
00008c  602e              STR      r6,[r5,#0]
;;;218        *(--stk)  = (INT32U)0x04040404L;           /* R4                                                     */
00008e  f04f3604          MOV      r6,#0x4040404
000092  1f05              SUBS     r5,r0,#4
000094  4628              MOV      r0,r5
000096  602e              STR      r6,[r5,#0]
;;;219    
;;;220        return (stk);
;;;221    }
000098  bd70              POP      {r4-r6,pc}
;;;222    
                          ENDP


                          AREA ||i.OSTaskSwHook||, CODE, READONLY, ALIGN=1

                  OSTaskSwHook PROC
;;;238    #if (OS_CPU_HOOKS_EN > 0) && (OS_TASK_SW_HOOK_EN > 0)
;;;239    void  OSTaskSwHook (void)
000000  4770              BX       lr
;;;240    {
;;;241    #if OS_APP_HOOKS_EN > 0
;;;242        App_TaskSwHook();
;;;243    #endif
;;;244    }
;;;245    #endif
                          ENDP


                          AREA ||i.OSTimeTickHook||, CODE, READONLY, ALIGN=2

                  OSTimeTickHook PROC
;;;281    #if (OS_CPU_HOOKS_EN > 0) && (OS_TIME_TICK_HOOK_EN > 0)
;;;282    void  OSTimeTickHook (void)
000000  b510              PUSH     {r4,lr}
;;;283    {
;;;284    #if OS_APP_HOOKS_EN > 0
;;;285        App_TimeTickHook();
;;;286    #endif
;;;287    
;;;288    #if OS_TMR_EN > 0
;;;289        OSTmrCtr++;
000002  4807              LDR      r0,|L10.32|
000004  8800              LDRH     r0,[r0,#0]  ; OSTmrCtr
000006  1c40              ADDS     r0,r0,#1
000008  4905              LDR      r1,|L10.32|
00000a  8008              STRH     r0,[r1,#0]
;;;290        if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
00000c  4608              MOV      r0,r1
00000e  8800              LDRH     r0,[r0,#0]  ; OSTmrCtr
000010  2864              CMP      r0,#0x64
000012  db03              BLT      |L10.28|
;;;291            OSTmrCtr = 0;
000014  2000              MOVS     r0,#0
000016  8008              STRH     r0,[r1,#0]
;;;292            OSTmrSignal();
000018  f7fffffe          BL       OSTmrSignal
                  |L10.28|
;;;293        }
;;;294    #endif
;;;295    }
00001c  bd10              POP      {r4,pc}
;;;296    #endif
                          ENDP

00001e  0000              DCW      0x0000
                  |L10.32|
                          DCD      OSTmrCtr

                          AREA ||.data||, DATA, ALIGN=1

                  OSTmrCtr
000000  0000              DCB      0x00,0x00
