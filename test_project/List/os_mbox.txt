; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\os_mbox.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\os_mbox.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\Source\APP -I.\Source\BSP -I.\Source\uCOS-II\Source -I.\Source\uCOS-II\uC-CPU -I.\Source\uCOS-II\uC-LIB -I.\Source\uCOS-II\Ports -I.\Source\uCGUI\Config -I.\Source\uCGUI\emWinDemo -I.\Source\uCGUI\inc -I.\Source\uCGUI\LCDDriver -I.\Source\uCGUI\uCGUIDemo -I.\Source\Libraries\STM32F10x_StdPeriph_Driver\inc -I.\Source\Libraries\CMSIS\Core\CM3 -I.\Source\APP\HMI -I"D:\Program Files (x86)\keil\ARM\RV31\INC" -I"D:\Program Files (x86)\keil\ARM\PACK\ARM\CMSIS\3.20.3\CMSIS\Include" -I"D:\Program Files (x86)\keil\ARM\PACK\Keil\STM32F1xx_DFP\1.0.2\Device\Include" -DSTM32F10X_HD --omf_browse=.\obj\os_mbox.crf Source\uCOS-II\Source\os_mbox.c]
                          THUMB

                          AREA ||i.OSMboxAccept||, CODE, READONLY, ALIGN=1

                  OSMboxAccept PROC
;;;46     #if OS_MBOX_ACCEPT_EN > 0
;;;47     void  *OSMboxAccept (OS_EVENT *pevent)
000000  b570              PUSH     {r4-r6,lr}
;;;48     {
000002  4604              MOV      r4,r0
;;;49         void      *pmsg;
;;;50     #if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
;;;51         OS_CPU_SR  cpu_sr = 0;
000004  2600              MOVS     r6,#0
;;;52     #endif
;;;53     
;;;54     
;;;55     
;;;56     #if OS_ARG_CHK_EN > 0
;;;57         if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
000006  b90c              CBNZ     r4,|L1.12|
;;;58             return ((void *)0);
000008  2000              MOVS     r0,#0
                  |L1.10|
;;;59         }
;;;60     #endif
;;;61         if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
;;;62             return ((void *)0);
;;;63         }
;;;64         OS_ENTER_CRITICAL();
;;;65         pmsg               = pevent->OSEventPtr;
;;;66         pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
;;;67         OS_EXIT_CRITICAL();
;;;68         return (pmsg);                                        /* Return the message received (or NULL)     */
;;;69     }
00000a  bd70              POP      {r4-r6,pc}
                  |L1.12|
00000c  7820              LDRB     r0,[r4,#0]            ;61
00000e  2801              CMP      r0,#1                 ;61
000010  d001              BEQ      |L1.22|
000012  2000              MOVS     r0,#0                 ;62
000014  e7f9              B        |L1.10|
                  |L1.22|
000016  f7fffffe          BL       OS_CPU_SR_Save
00001a  4606              MOV      r6,r0                 ;64
00001c  6865              LDR      r5,[r4,#4]            ;65
00001e  2000              MOVS     r0,#0                 ;66
000020  6060              STR      r0,[r4,#4]            ;66
000022  4630              MOV      r0,r6                 ;67
000024  f7fffffe          BL       OS_CPU_SR_Restore
000028  4628              MOV      r0,r5                 ;68
00002a  e7ee              B        |L1.10|
;;;70     #endif
                          ENDP


                          AREA ||i.OSMboxCreate||, CODE, READONLY, ALIGN=2

                  OSMboxCreate PROC
;;;87     
;;;88     OS_EVENT  *OSMboxCreate (void *pmsg)
000000  b570              PUSH     {r4-r6,lr}
;;;89     {
000002  4605              MOV      r5,r0
;;;90         OS_EVENT  *pevent;
;;;91     #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;92         OS_CPU_SR  cpu_sr = 0;
000004  2600              MOVS     r6,#0
;;;93     #endif
;;;94     
;;;95     
;;;96     
;;;97         if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
000006  4812              LDR      r0,|L2.80|
000008  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
00000a  2800              CMP      r0,#0
00000c  dd01              BLE      |L2.18|
;;;98             return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
00000e  2000              MOVS     r0,#0
                  |L2.16|
;;;99         }
;;;100        OS_ENTER_CRITICAL();
;;;101        pevent = OSEventFreeList;                    /* Get next free event control block                  */
;;;102        if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
;;;103            OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
;;;104        }
;;;105        OS_EXIT_CRITICAL();
;;;106        if (pevent != (OS_EVENT *)0) {
;;;107            pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
;;;108            pevent->OSEventCnt     = 0;
;;;109            pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
;;;110    #if OS_EVENT_NAME_SIZE > 1
;;;111            pevent->OSEventName[0] = '?';
;;;112            pevent->OSEventName[1] = OS_ASCII_NUL;
;;;113    #endif
;;;114            OS_EventWaitListInit(pevent);
;;;115        }
;;;116        return (pevent);                             /* Return pointer to event control block              */
;;;117    }
000010  bd70              POP      {r4-r6,pc}
                  |L2.18|
000012  f7fffffe          BL       OS_CPU_SR_Save
000016  4606              MOV      r6,r0                 ;100
000018  480e              LDR      r0,|L2.84|
00001a  6804              LDR      r4,[r0,#0]            ;101  ; OSEventFreeList
00001c  6800              LDR      r0,[r0,#0]            ;102  ; OSEventFreeList
00001e  b120              CBZ      r0,|L2.42|
000020  480c              LDR      r0,|L2.84|
000022  6800              LDR      r0,[r0,#0]            ;103  ; OSEventFreeList
000024  6840              LDR      r0,[r0,#4]            ;103
000026  490b              LDR      r1,|L2.84|
000028  6008              STR      r0,[r1,#0]            ;103  ; OSEventFreeList
                  |L2.42|
00002a  4630              MOV      r0,r6                 ;105
00002c  f7fffffe          BL       OS_CPU_SR_Restore
000030  b15c              CBZ      r4,|L2.74|
000032  2001              MOVS     r0,#1                 ;107
000034  7020              STRB     r0,[r4,#0]            ;107
000036  2000              MOVS     r0,#0                 ;108
000038  8120              STRH     r0,[r4,#8]            ;108
00003a  6065              STR      r5,[r4,#4]            ;109
00003c  203f              MOVS     r0,#0x3f              ;111
00003e  74e0              STRB     r0,[r4,#0x13]         ;111
000040  2100              MOVS     r1,#0                 ;112
000042  7521              STRB     r1,[r4,#0x14]         ;112
000044  4620              MOV      r0,r4                 ;114
000046  f7fffffe          BL       OS_EventWaitListInit
                  |L2.74|
00004a  4620              MOV      r0,r4                 ;116
00004c  e7e0              B        |L2.16|
;;;118    /*$PAGE*/
                          ENDP

00004e  0000              DCW      0x0000
                  |L2.80|
                          DCD      OSIntNesting
                  |L2.84|
                          DCD      OSEventFreeList

                          AREA ||i.OSMboxDel||, CODE, READONLY, ALIGN=2

                  OSMboxDel PROC
;;;155    #if OS_MBOX_DEL_EN > 0
;;;156    OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;157    {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
;;;158        BOOLEAN    tasks_waiting;
;;;159        OS_EVENT  *pevent_return;
;;;160    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;161        OS_CPU_SR  cpu_sr = 0;
00000a  f04f0900          MOV      r9,#0
;;;162    #endif
;;;163    
;;;164    
;;;165    
;;;166    #if OS_ARG_CHK_EN > 0
;;;167        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
00000e  b915              CBNZ     r5,|L3.22|
;;;168            return (pevent);
000010  4620              MOV      r0,r4
                  |L3.18|
;;;169        }
;;;170        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;171            *perr = OS_ERR_PEVENT_NULL;
;;;172            return (pevent);
;;;173        }
;;;174    #endif
;;;175        if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
;;;176            *perr = OS_ERR_EVENT_TYPE;
;;;177            return (pevent);
;;;178        }
;;;179        if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
;;;180            *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
;;;181            return (pevent);
;;;182        }
;;;183        OS_ENTER_CRITICAL();
;;;184        if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
;;;185            tasks_waiting = OS_TRUE;                           /* Yes                                      */
;;;186        } else {
;;;187            tasks_waiting = OS_FALSE;                          /* No                                       */
;;;188        }
;;;189        switch (opt) {
;;;190        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
;;;191            if (tasks_waiting == OS_FALSE) {
;;;192    #if OS_EVENT_NAME_SIZE > 1
;;;193                pevent->OSEventName[0] = '?';             /* Unknown name                             */
;;;194                pevent->OSEventName[1] = OS_ASCII_NUL;
;;;195    #endif
;;;196                pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
;;;197                pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
;;;198                pevent->OSEventCnt  = 0;
;;;199                OSEventFreeList     = pevent;             /* Get next free event control block        */
;;;200                OS_EXIT_CRITICAL();
;;;201                *perr               = OS_ERR_NONE;
;;;202                pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
;;;203            } else {
;;;204                OS_EXIT_CRITICAL();
;;;205                *perr               = OS_ERR_TASK_WAITING;
;;;206                pevent_return       = pevent;
;;;207            }
;;;208            break;
;;;209    
;;;210        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
;;;211            while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
;;;212                (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
;;;213            }
;;;214    #if OS_EVENT_NAME_SIZE > 1
;;;215            pevent->OSEventName[0] = '?';                 /* Unknown name                             */
;;;216            pevent->OSEventName[1] = OS_ASCII_NUL;
;;;217    #endif
;;;218            pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
;;;219            pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
;;;220            pevent->OSEventCnt     = 0;
;;;221            OSEventFreeList        = pevent;              /* Get next free event control block        */
;;;222            OS_EXIT_CRITICAL();
;;;223            if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
;;;224                OS_Sched();                               /* Find highest priority task ready to run  */
;;;225            }
;;;226            *perr         = OS_ERR_NONE;
;;;227            pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
;;;228            break;
;;;229    
;;;230        default:
;;;231            OS_EXIT_CRITICAL();
;;;232            *perr         = OS_ERR_INVALID_OPT;
;;;233            pevent_return = pevent;
;;;234            break;
;;;235        }
;;;236        return (pevent_return);
;;;237    }
000012  e8bd87f0          POP      {r4-r10,pc}
                  |L3.22|
000016  b91c              CBNZ     r4,|L3.32|
000018  2004              MOVS     r0,#4                 ;171
00001a  7028              STRB     r0,[r5,#0]            ;171
00001c  4620              MOV      r0,r4                 ;172
00001e  e7f8              B        |L3.18|
                  |L3.32|
000020  7820              LDRB     r0,[r4,#0]            ;175
000022  2801              CMP      r0,#1                 ;175
000024  d003              BEQ      |L3.46|
000026  2001              MOVS     r0,#1                 ;176
000028  7028              STRB     r0,[r5,#0]            ;176
00002a  4620              MOV      r0,r4                 ;177
00002c  e7f1              B        |L3.18|
                  |L3.46|
00002e  482f              LDR      r0,|L3.236|
000030  7800              LDRB     r0,[r0,#0]            ;179  ; OSIntNesting
000032  2800              CMP      r0,#0                 ;179
000034  dd03              BLE      |L3.62|
000036  200f              MOVS     r0,#0xf               ;180
000038  7028              STRB     r0,[r5,#0]            ;180
00003a  4620              MOV      r0,r4                 ;181
00003c  e7e9              B        |L3.18|
                  |L3.62|
00003e  f7fffffe          BL       OS_CPU_SR_Save
000042  4681              MOV      r9,r0                 ;183
000044  7aa0              LDRB     r0,[r4,#0xa]          ;184
000046  b108              CBZ      r0,|L3.76|
000048  2701              MOVS     r7,#1                 ;185
00004a  e000              B        |L3.78|
                  |L3.76|
00004c  2700              MOVS     r7,#0                 ;187
                  |L3.78|
00004e  f1b80f00          CMP      r8,#0                 ;189
000052  d003              BEQ      |L3.92|
000054  f1b80f01          CMP      r8,#1                 ;189
000058  d13e              BNE      |L3.216|
00005a  e01b              B        |L3.148|
                  |L3.92|
00005c  b99f              CBNZ     r7,|L3.134|
00005e  203f              MOVS     r0,#0x3f              ;193
000060  74e0              STRB     r0,[r4,#0x13]         ;193
000062  2100              MOVS     r1,#0                 ;194
000064  7521              STRB     r1,[r4,#0x14]         ;194
000066  2000              MOVS     r0,#0                 ;196
000068  7020              STRB     r0,[r4,#0]            ;196
00006a  4821              LDR      r0,|L3.240|
00006c  6800              LDR      r0,[r0,#0]            ;197  ; OSEventFreeList
00006e  6060              STR      r0,[r4,#4]            ;197
000070  2000              MOVS     r0,#0                 ;198
000072  8120              STRH     r0,[r4,#8]            ;198
000074  481e              LDR      r0,|L3.240|
000076  6004              STR      r4,[r0,#0]            ;199  ; OSEventFreeList
000078  4648              MOV      r0,r9                 ;200
00007a  f7fffffe          BL       OS_CPU_SR_Restore
00007e  2000              MOVS     r0,#0                 ;201
000080  7028              STRB     r0,[r5,#0]            ;201
000082  2600              MOVS     r6,#0                 ;202
000084  e005              B        |L3.146|
                  |L3.134|
000086  4648              MOV      r0,r9                 ;204
000088  f7fffffe          BL       OS_CPU_SR_Restore
00008c  2049              MOVS     r0,#0x49              ;205
00008e  7028              STRB     r0,[r5,#0]            ;205
000090  4626              MOV      r6,r4                 ;206
                  |L3.146|
000092  e028              B        |L3.230|
                  |L3.148|
000094  e005              B        |L3.162|
                  |L3.150|
000096  2300              MOVS     r3,#0                 ;212
000098  2202              MOVS     r2,#2                 ;212
00009a  4619              MOV      r1,r3                 ;212
00009c  4620              MOV      r0,r4                 ;212
00009e  f7fffffe          BL       OS_EventTaskRdy
                  |L3.162|
0000a2  7aa0              LDRB     r0,[r4,#0xa]          ;211
0000a4  2800              CMP      r0,#0                 ;211
0000a6  d1f6              BNE      |L3.150|
0000a8  203f              MOVS     r0,#0x3f              ;215
0000aa  74e0              STRB     r0,[r4,#0x13]         ;215
0000ac  2100              MOVS     r1,#0                 ;216
0000ae  7521              STRB     r1,[r4,#0x14]         ;216
0000b0  2000              MOVS     r0,#0                 ;218
0000b2  7020              STRB     r0,[r4,#0]            ;218
0000b4  480e              LDR      r0,|L3.240|
0000b6  6800              LDR      r0,[r0,#0]            ;219  ; OSEventFreeList
0000b8  6060              STR      r0,[r4,#4]            ;219
0000ba  2000              MOVS     r0,#0                 ;220
0000bc  8120              STRH     r0,[r4,#8]            ;220
0000be  480c              LDR      r0,|L3.240|
0000c0  6004              STR      r4,[r0,#0]            ;221  ; OSEventFreeList
0000c2  4648              MOV      r0,r9                 ;222
0000c4  f7fffffe          BL       OS_CPU_SR_Restore
0000c8  2f01              CMP      r7,#1                 ;223
0000ca  d101              BNE      |L3.208|
0000cc  f7fffffe          BL       OS_Sched
                  |L3.208|
0000d0  2000              MOVS     r0,#0                 ;226
0000d2  7028              STRB     r0,[r5,#0]            ;226
0000d4  2600              MOVS     r6,#0                 ;227
0000d6  e006              B        |L3.230|
                  |L3.216|
0000d8  4648              MOV      r0,r9                 ;231
0000da  f7fffffe          BL       OS_CPU_SR_Restore
0000de  2007              MOVS     r0,#7                 ;232
0000e0  7028              STRB     r0,[r5,#0]            ;232
0000e2  4626              MOV      r6,r4                 ;233
0000e4  bf00              NOP                            ;234
                  |L3.230|
0000e6  bf00              NOP                            ;208
0000e8  4630              MOV      r0,r6                 ;236
0000ea  e792              B        |L3.18|
;;;238    #endif
                          ENDP

                  |L3.236|
                          DCD      OSIntNesting
                  |L3.240|
                          DCD      OSEventFreeList

                          AREA ||i.OSMboxPend||, CODE, READONLY, ALIGN=2

                  OSMboxPend PROC
;;;273    
;;;274    void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;275    {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;276        void      *pmsg;
;;;277        INT8U      pend_stat;
;;;278    #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
;;;279        OS_CPU_SR  cpu_sr = 0;
00000a  f04f0900          MOV      r9,#0
;;;280    #endif
;;;281    
;;;282    
;;;283    
;;;284    #if OS_ARG_CHK_EN > 0
;;;285        if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
00000e  b914              CBNZ     r4,|L4.22|
;;;286            return ((void *)0);
000010  2000              MOVS     r0,#0
                  |L4.18|
;;;287        }
;;;288        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;289            *perr = OS_ERR_PEVENT_NULL;
;;;290            return ((void *)0);
;;;291        }
;;;292    #endif
;;;293        if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
;;;294            *perr = OS_ERR_EVENT_TYPE;
;;;295            return ((void *)0);
;;;296        }
;;;297        if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
;;;298            *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
;;;299            return ((void *)0);
;;;300        }
;;;301        if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
;;;302            *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
;;;303            return ((void *)0);
;;;304        }
;;;305        OS_ENTER_CRITICAL();
;;;306        pmsg = pevent->OSEventPtr;
;;;307        if (pmsg != (void *)0) {                          /* See if there is already a message             */
;;;308            pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
;;;309            OS_EXIT_CRITICAL();
;;;310            *perr = OS_ERR_NONE;
;;;311            return (pmsg);                                /* Return the message received (or NULL)         */
;;;312        }
;;;313        OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
;;;314        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
;;;315        OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
;;;316        OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
;;;317        OS_EXIT_CRITICAL();
;;;318        OS_Sched();                                       /* Find next highest priority task ready to run  */
;;;319        OS_ENTER_CRITICAL();
;;;320        if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) { /* See if we weren't given the message           */
;;;321            pend_stat = OSTCBCur->OSTCBStatPend;
;;;322            OS_EventTOAbort(pevent);                      /* Timed out, Make task ready                    */
;;;323            OS_EXIT_CRITICAL();
;;;324            switch (pend_stat) {
;;;325            case OS_STAT_PEND_TO:
;;;326            default:
;;;327                *perr = OS_ERR_TIMEOUT;              /* Indicate that a timeout occured               */
;;;328                break;
;;;329    
;;;330            case OS_STAT_PEND_ABORT:
;;;331                *perr = OS_ERR_PEND_ABORT;           /* Indicate that we aborted                      */
;;;332                break;
;;;333            }
;;;334            return ((void *)0);                           /* Return a NULL message                         */
;;;335        }
;;;336        pmsg                    = OSTCBCur->OSTCBMsg;
;;;337        OSTCBCur->OSTCBMsg      = (void *)0;              /* Yes, clear message received                   */
;;;338        OSTCBCur->OSTCBStat     = OS_STAT_RDY;
;;;339        OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;          /* No longer waiting for event                   */
;;;340        OS_EXIT_CRITICAL();
;;;341        *perr                   = OS_ERR_NONE;
;;;342        return (pmsg);                                    /* Return the message received                   */
;;;343    }
000012  e8bd87f0          POP      {r4-r10,pc}
                  |L4.22|
000016  b91d              CBNZ     r5,|L4.32|
000018  2004              MOVS     r0,#4                 ;289
00001a  7020              STRB     r0,[r4,#0]            ;289
00001c  2000              MOVS     r0,#0                 ;290
00001e  e7f8              B        |L4.18|
                  |L4.32|
000020  7828              LDRB     r0,[r5,#0]            ;293
000022  2801              CMP      r0,#1                 ;293
000024  d003              BEQ      |L4.46|
000026  2001              MOVS     r0,#1                 ;294
000028  7020              STRB     r0,[r4,#0]            ;294
00002a  2000              MOVS     r0,#0                 ;295
00002c  e7f1              B        |L4.18|
                  |L4.46|
00002e  4837              LDR      r0,|L4.268|
000030  7800              LDRB     r0,[r0,#0]            ;297  ; OSIntNesting
000032  2800              CMP      r0,#0                 ;297
000034  dd03              BLE      |L4.62|
000036  2002              MOVS     r0,#2                 ;298
000038  7020              STRB     r0,[r4,#0]            ;298
00003a  2000              MOVS     r0,#0                 ;299
00003c  e7e9              B        |L4.18|
                  |L4.62|
00003e  4834              LDR      r0,|L4.272|
000040  7800              LDRB     r0,[r0,#0]            ;301  ; OSLockNesting
000042  2800              CMP      r0,#0                 ;301
000044  dd03              BLE      |L4.78|
000046  200d              MOVS     r0,#0xd               ;302
000048  7020              STRB     r0,[r4,#0]            ;302
00004a  2000              MOVS     r0,#0                 ;303
00004c  e7e1              B        |L4.18|
                  |L4.78|
00004e  f7fffffe          BL       OS_CPU_SR_Save
000052  4681              MOV      r9,r0                 ;305
000054  686e              LDR      r6,[r5,#4]            ;306
000056  b146              CBZ      r6,|L4.106|
000058  2000              MOVS     r0,#0                 ;308
00005a  6068              STR      r0,[r5,#4]            ;308
00005c  4648              MOV      r0,r9                 ;309
00005e  f7fffffe          BL       OS_CPU_SR_Restore
000062  2000              MOVS     r0,#0                 ;310
000064  7020              STRB     r0,[r4,#0]            ;310
000066  4630              MOV      r0,r6                 ;311
000068  e7d3              B        |L4.18|
                  |L4.106|
00006a  482a              LDR      r0,|L4.276|
00006c  6800              LDR      r0,[r0,#0]            ;313  ; OSTCBCur
00006e  f890002c          LDRB     r0,[r0,#0x2c]         ;313
000072  f0400002          ORR      r0,r0,#2              ;313
000076  4927              LDR      r1,|L4.276|
000078  6809              LDR      r1,[r1,#0]            ;313  ; OSTCBCur
00007a  f881002c          STRB     r0,[r1,#0x2c]         ;313
00007e  2000              MOVS     r0,#0                 ;314
000080  4924              LDR      r1,|L4.276|
000082  6809              LDR      r1,[r1,#0]            ;314  ; OSTCBCur
000084  f881002d          STRB     r0,[r1,#0x2d]         ;314
000088  4822              LDR      r0,|L4.276|
00008a  6800              LDR      r0,[r0,#0]            ;315  ; OSTCBCur
00008c  8547              STRH     r7,[r0,#0x2a]         ;315
00008e  4628              MOV      r0,r5                 ;316
000090  f7fffffe          BL       OS_EventTaskWait
000094  4648              MOV      r0,r9                 ;317
000096  f7fffffe          BL       OS_CPU_SR_Restore
00009a  f7fffffe          BL       OS_Sched
00009e  f7fffffe          BL       OS_CPU_SR_Save
0000a2  4681              MOV      r9,r0                 ;319
0000a4  481b              LDR      r0,|L4.276|
0000a6  6800              LDR      r0,[r0,#0]            ;320  ; OSTCBCur
0000a8  f890002d          LDRB     r0,[r0,#0x2d]         ;320
0000ac  b1c8              CBZ      r0,|L4.226|
0000ae  4819              LDR      r0,|L4.276|
0000b0  6800              LDR      r0,[r0,#0]            ;321  ; OSTCBCur
0000b2  f890802d          LDRB     r8,[r0,#0x2d]         ;321
0000b6  4628              MOV      r0,r5                 ;322
0000b8  f7fffffe          BL       OS_EventTOAbort
0000bc  4648              MOV      r0,r9                 ;323
0000be  f7fffffe          BL       OS_CPU_SR_Restore
0000c2  f1b80f01          CMP      r8,#1                 ;324
0000c6  d003              BEQ      |L4.208|
0000c8  f1b80f02          CMP      r8,#2                 ;324
0000cc  d003              BEQ      |L4.214|
0000ce  bf00              NOP                            ;325
                  |L4.208|
0000d0  200a              MOVS     r0,#0xa               ;327
0000d2  7020              STRB     r0,[r4,#0]            ;327
0000d4  e002              B        |L4.220|
                  |L4.214|
0000d6  200e              MOVS     r0,#0xe               ;331
0000d8  7020              STRB     r0,[r4,#0]            ;331
0000da  bf00              NOP                            ;332
                  |L4.220|
0000dc  bf00              NOP                            ;328
0000de  2000              MOVS     r0,#0                 ;334
0000e0  e797              B        |L4.18|
                  |L4.226|
0000e2  480c              LDR      r0,|L4.276|
0000e4  6800              LDR      r0,[r0,#0]            ;336  ; OSTCBCur
0000e6  6a06              LDR      r6,[r0,#0x20]         ;336
0000e8  2000              MOVS     r0,#0                 ;337
0000ea  490a              LDR      r1,|L4.276|
0000ec  6809              LDR      r1,[r1,#0]            ;337  ; OSTCBCur
0000ee  6208              STR      r0,[r1,#0x20]         ;337
0000f0  4908              LDR      r1,|L4.276|
0000f2  6809              LDR      r1,[r1,#0]            ;338  ; OSTCBCur
0000f4  f881002c          STRB     r0,[r1,#0x2c]         ;338
0000f8  4906              LDR      r1,|L4.276|
0000fa  6809              LDR      r1,[r1,#0]            ;339  ; OSTCBCur
0000fc  61c8              STR      r0,[r1,#0x1c]         ;339
0000fe  4648              MOV      r0,r9                 ;340
000100  f7fffffe          BL       OS_CPU_SR_Restore
000104  2000              MOVS     r0,#0                 ;341
000106  7020              STRB     r0,[r4,#0]            ;341
000108  4630              MOV      r0,r6                 ;342
00010a  e782              B        |L4.18|
;;;344    /*$PAGE*/
                          ENDP

                  |L4.268|
                          DCD      OSIntNesting
                  |L4.272|
                          DCD      OSLockNesting
                  |L4.276|
                          DCD      OSTCBCur

                          AREA ||i.OSMboxPendAbort||, CODE, READONLY, ALIGN=1

                  OSMboxPendAbort PROC
;;;377    #if OS_MBOX_PEND_ABORT_EN > 0
;;;378    INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;379    {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;380        INT8U      nbr_tasks;
;;;381    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;382        OS_CPU_SR  cpu_sr = 0;
00000a  f04f0800          MOV      r8,#0
;;;383    #endif
;;;384    
;;;385    
;;;386    
;;;387    #if OS_ARG_CHK_EN > 0
;;;388        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
00000e  b914              CBNZ     r4,|L5.22|
;;;389            return (0);
000010  2000              MOVS     r0,#0
                  |L5.18|
;;;390        }
;;;391        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;392            *perr = OS_ERR_PEVENT_NULL;
;;;393            return (0);
;;;394        }
;;;395    #endif
;;;396        if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
;;;397            *perr = OS_ERR_EVENT_TYPE;
;;;398            return (0);
;;;399        }
;;;400        OS_ENTER_CRITICAL();
;;;401        if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
;;;402            nbr_tasks = 0;
;;;403            switch (opt) {
;;;404            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
;;;405                while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
;;;406                    (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
;;;407                    nbr_tasks++;
;;;408                }
;;;409                break;
;;;410    
;;;411            case OS_PEND_OPT_NONE:                         /* No,  ready HPT       waiting on mailbox  */
;;;412            default:
;;;413                (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
;;;414                nbr_tasks++;
;;;415                break;
;;;416            }
;;;417            OS_EXIT_CRITICAL();
;;;418            OS_Sched();                                        /* Find HPT ready to run                    */
;;;419            *perr = OS_ERR_PEND_ABORT;
;;;420            return (nbr_tasks);
;;;421        }
;;;422        OS_EXIT_CRITICAL();
;;;423        *perr = OS_ERR_NONE;
;;;424        return (0);                                            /* No tasks waiting on mailbox              */
;;;425    }
000012  e8bd81f0          POP      {r4-r8,pc}
                  |L5.22|
000016  b91d              CBNZ     r5,|L5.32|
000018  2004              MOVS     r0,#4                 ;392
00001a  7020              STRB     r0,[r4,#0]            ;392
00001c  2000              MOVS     r0,#0                 ;393
00001e  e7f8              B        |L5.18|
                  |L5.32|
000020  7828              LDRB     r0,[r5,#0]            ;396
000022  2801              CMP      r0,#1                 ;396
000024  d003              BEQ      |L5.46|
000026  2001              MOVS     r0,#1                 ;397
000028  7020              STRB     r0,[r4,#0]            ;397
00002a  2000              MOVS     r0,#0                 ;398
00002c  e7f1              B        |L5.18|
                  |L5.46|
00002e  f7fffffe          BL       OS_CPU_SR_Save
000032  4680              MOV      r8,r0                 ;400
000034  7aa8              LDRB     r0,[r5,#0xa]          ;401
000036  b320              CBZ      r0,|L5.130|
000038  2600              MOVS     r6,#0                 ;402
00003a  b17f              CBZ      r7,|L5.92|
00003c  2f01              CMP      r7,#1                 ;403
00003e  d10c              BNE      |L5.90|
000040  e007              B        |L5.82|
                  |L5.66|
000042  2302              MOVS     r3,#2                 ;406
000044  461a              MOV      r2,r3                 ;406
000046  2100              MOVS     r1,#0                 ;406
000048  4628              MOV      r0,r5                 ;406
00004a  f7fffffe          BL       OS_EventTaskRdy
00004e  1c70              ADDS     r0,r6,#1              ;407
000050  b2c6              UXTB     r6,r0                 ;407
                  |L5.82|
000052  7aa8              LDRB     r0,[r5,#0xa]          ;405
000054  2800              CMP      r0,#0                 ;405
000056  d1f4              BNE      |L5.66|
000058  e009              B        |L5.110|
                  |L5.90|
00005a  bf00              NOP                            ;411
                  |L5.92|
00005c  2302              MOVS     r3,#2                 ;413
00005e  461a              MOV      r2,r3                 ;413
000060  2100              MOVS     r1,#0                 ;413
000062  4628              MOV      r0,r5                 ;413
000064  f7fffffe          BL       OS_EventTaskRdy
000068  1c70              ADDS     r0,r6,#1              ;414
00006a  b2c6              UXTB     r6,r0                 ;414
00006c  bf00              NOP                            ;415
                  |L5.110|
00006e  bf00              NOP                            ;409
000070  4640              MOV      r0,r8                 ;417
000072  f7fffffe          BL       OS_CPU_SR_Restore
000076  f7fffffe          BL       OS_Sched
00007a  200e              MOVS     r0,#0xe               ;419
00007c  7020              STRB     r0,[r4,#0]            ;419
00007e  4630              MOV      r0,r6                 ;420
000080  e7c7              B        |L5.18|
                  |L5.130|
000082  4640              MOV      r0,r8                 ;422
000084  f7fffffe          BL       OS_CPU_SR_Restore
000088  2000              MOVS     r0,#0                 ;423
00008a  7020              STRB     r0,[r4,#0]            ;423
00008c  bf00              NOP                            ;424
00008e  e7c0              B        |L5.18|
;;;426    #endif
                          ENDP


                          AREA ||i.OSMboxPost||, CODE, READONLY, ALIGN=1

                  OSMboxPost PROC
;;;451    #if OS_MBOX_POST_EN > 0
;;;452    INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
000000  b570              PUSH     {r4-r6,lr}
;;;453    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;454    #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
;;;455        OS_CPU_SR  cpu_sr = 0;
000006  2600              MOVS     r6,#0
;;;456    #endif
;;;457    
;;;458    
;;;459    
;;;460    #if OS_ARG_CHK_EN > 0
;;;461        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
000008  b90c              CBNZ     r4,|L6.14|
;;;462            return (OS_ERR_PEVENT_NULL);
00000a  2004              MOVS     r0,#4
                  |L6.12|
;;;463        }
;;;464        if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
;;;465            return (OS_ERR_POST_NULL_PTR);
;;;466        }
;;;467    #endif
;;;468        if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
;;;469            return (OS_ERR_EVENT_TYPE);
;;;470        }
;;;471        OS_ENTER_CRITICAL();
;;;472        if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
;;;473            /* Ready HPT waiting on event                    */
;;;474            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
;;;475            OS_EXIT_CRITICAL();
;;;476            OS_Sched();                                   /* Find highest priority task ready to run       */
;;;477            return (OS_ERR_NONE);
;;;478        }
;;;479        if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
;;;480            OS_EXIT_CRITICAL();
;;;481            return (OS_ERR_MBOX_FULL);
;;;482        }
;;;483        pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
;;;484        OS_EXIT_CRITICAL();
;;;485        return (OS_ERR_NONE);
;;;486    }
00000c  bd70              POP      {r4-r6,pc}
                  |L6.14|
00000e  b90d              CBNZ     r5,|L6.20|
000010  2003              MOVS     r0,#3                 ;465
000012  e7fb              B        |L6.12|
                  |L6.20|
000014  7820              LDRB     r0,[r4,#0]            ;468
000016  2801              CMP      r0,#1                 ;468
000018  d001              BEQ      |L6.30|
00001a  2001              MOVS     r0,#1                 ;469
00001c  e7f6              B        |L6.12|
                  |L6.30|
00001e  f7fffffe          BL       OS_CPU_SR_Save
000022  4606              MOV      r6,r0                 ;471
000024  7aa0              LDRB     r0,[r4,#0xa]          ;472
000026  b160              CBZ      r0,|L6.66|
000028  2300              MOVS     r3,#0                 ;474
00002a  2202              MOVS     r2,#2                 ;474
00002c  4629              MOV      r1,r5                 ;474
00002e  4620              MOV      r0,r4                 ;474
000030  f7fffffe          BL       OS_EventTaskRdy
000034  4630              MOV      r0,r6                 ;475
000036  f7fffffe          BL       OS_CPU_SR_Restore
00003a  f7fffffe          BL       OS_Sched
00003e  2000              MOVS     r0,#0                 ;477
000040  e7e4              B        |L6.12|
                  |L6.66|
000042  6860              LDR      r0,[r4,#4]            ;479
000044  b120              CBZ      r0,|L6.80|
000046  4630              MOV      r0,r6                 ;480
000048  f7fffffe          BL       OS_CPU_SR_Restore
00004c  2014              MOVS     r0,#0x14              ;481
00004e  e7dd              B        |L6.12|
                  |L6.80|
000050  6065              STR      r5,[r4,#4]            ;483
000052  4630              MOV      r0,r6                 ;484
000054  f7fffffe          BL       OS_CPU_SR_Restore
000058  2000              MOVS     r0,#0                 ;485
00005a  e7d7              B        |L6.12|
;;;487    #endif
                          ENDP


                          AREA ||i.OSMboxPostOpt||, CODE, READONLY, ALIGN=1

                  OSMboxPostOpt PROC
;;;522    #if OS_MBOX_POST_OPT_EN > 0
;;;523    INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;524    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;525    #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
;;;526        OS_CPU_SR  cpu_sr = 0;
00000a  2700              MOVS     r7,#0
;;;527    #endif
;;;528    
;;;529    
;;;530    
;;;531    #if OS_ARG_CHK_EN > 0
;;;532        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
00000c  b914              CBNZ     r4,|L7.20|
;;;533            return (OS_ERR_PEVENT_NULL);
00000e  2004              MOVS     r0,#4
                  |L7.16|
;;;534        }
;;;535        if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
;;;536            return (OS_ERR_POST_NULL_PTR);
;;;537        }
;;;538    #endif
;;;539        if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
;;;540            return (OS_ERR_EVENT_TYPE);
;;;541        }
;;;542        OS_ENTER_CRITICAL();
;;;543        if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
;;;544            if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
;;;545                while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
;;;546                    (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
;;;547                }
;;;548            } else {                                      /* No,  Post to HPT waiting on mbox              */
;;;549                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
;;;550            }
;;;551            OS_EXIT_CRITICAL();
;;;552            if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
;;;553                OS_Sched();                               /* Find HPT ready to run                         */
;;;554            }
;;;555            return (OS_ERR_NONE);
;;;556        }
;;;557        if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
;;;558            OS_EXIT_CRITICAL();
;;;559            return (OS_ERR_MBOX_FULL);
;;;560        }
;;;561        pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
;;;562        OS_EXIT_CRITICAL();
;;;563        return (OS_ERR_NONE);
;;;564    }
000010  e8bd81f0          POP      {r4-r8,pc}
                  |L7.20|
000014  b90d              CBNZ     r5,|L7.26|
000016  2003              MOVS     r0,#3                 ;536
000018  e7fa              B        |L7.16|
                  |L7.26|
00001a  7820              LDRB     r0,[r4,#0]            ;539
00001c  2801              CMP      r0,#1                 ;539
00001e  d001              BEQ      |L7.36|
000020  2001              MOVS     r0,#1                 ;540
000022  e7f5              B        |L7.16|
                  |L7.36|
000024  f7fffffe          BL       OS_CPU_SR_Save
000028  4607              MOV      r7,r0                 ;542
00002a  7aa0              LDRB     r0,[r4,#0xa]          ;543
00002c  b1e8              CBZ      r0,|L7.106|
00002e  f0160f01          TST      r6,#1                 ;544
000032  d00a              BEQ      |L7.74|
000034  e005              B        |L7.66|
                  |L7.54|
000036  2300              MOVS     r3,#0                 ;546
000038  2202              MOVS     r2,#2                 ;546
00003a  4629              MOV      r1,r5                 ;546
00003c  4620              MOV      r0,r4                 ;546
00003e  f7fffffe          BL       OS_EventTaskRdy
                  |L7.66|
000042  7aa0              LDRB     r0,[r4,#0xa]          ;545
000044  2800              CMP      r0,#0                 ;545
000046  d1f6              BNE      |L7.54|
000048  e005              B        |L7.86|
                  |L7.74|
00004a  2300              MOVS     r3,#0                 ;549
00004c  2202              MOVS     r2,#2                 ;549
00004e  4629              MOV      r1,r5                 ;549
000050  4620              MOV      r0,r4                 ;549
000052  f7fffffe          BL       OS_EventTaskRdy
                  |L7.86|
000056  4638              MOV      r0,r7                 ;551
000058  f7fffffe          BL       OS_CPU_SR_Restore
00005c  f0160f04          TST      r6,#4                 ;552
000060  d101              BNE      |L7.102|
000062  f7fffffe          BL       OS_Sched
                  |L7.102|
000066  2000              MOVS     r0,#0                 ;555
000068  e7d2              B        |L7.16|
                  |L7.106|
00006a  6860              LDR      r0,[r4,#4]            ;557
00006c  b120              CBZ      r0,|L7.120|
00006e  4638              MOV      r0,r7                 ;558
000070  f7fffffe          BL       OS_CPU_SR_Restore
000074  2014              MOVS     r0,#0x14              ;559
000076  e7cb              B        |L7.16|
                  |L7.120|
000078  6065              STR      r5,[r4,#4]            ;561
00007a  4638              MOV      r0,r7                 ;562
00007c  f7fffffe          BL       OS_CPU_SR_Restore
000080  2000              MOVS     r0,#0                 ;563
000082  e7c5              B        |L7.16|
;;;565    #endif
                          ENDP


                          AREA ||i.OSMboxQuery||, CODE, READONLY, ALIGN=1

                  OSMboxQuery PROC
;;;586    #if OS_MBOX_QUERY_EN > 0
;;;587    INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;588    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;589        INT8U      i;
;;;590    #if OS_LOWEST_PRIO <= 63
;;;591        INT8U     *psrc;
;;;592        INT8U     *pdest;
;;;593    #else
;;;594        INT16U    *psrc;
;;;595        INT16U    *pdest;
;;;596    #endif
;;;597    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;598        OS_CPU_SR  cpu_sr = 0;
000008  f04f0900          MOV      r9,#0
;;;599    #endif
;;;600    
;;;601    
;;;602    
;;;603    #if OS_ARG_CHK_EN > 0
;;;604        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
00000c  b914              CBNZ     r4,|L8.20|
;;;605            return (OS_ERR_PEVENT_NULL);
00000e  2004              MOVS     r0,#4
                  |L8.16|
;;;606        }
;;;607        if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
;;;608            return (OS_ERR_PDATA_NULL);
;;;609        }
;;;610    #endif
;;;611        if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
;;;612            return (OS_ERR_EVENT_TYPE);
;;;613        }
;;;614        OS_ENTER_CRITICAL();
;;;615        p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
;;;616        psrc                    = &pevent->OSEventTbl[0];
;;;617        pdest                   = &p_mbox_data->OSEventTbl[0];
;;;618        for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
;;;619            *pdest++ = *psrc++;
;;;620        }
;;;621        p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
;;;622        OS_EXIT_CRITICAL();
;;;623        return (OS_ERR_NONE);
;;;624    }
000010  e8bd87f0          POP      {r4-r10,pc}
                  |L8.20|
000014  b90d              CBNZ     r5,|L8.26|
000016  2009              MOVS     r0,#9                 ;608
000018  e7fa              B        |L8.16|
                  |L8.26|
00001a  7820              LDRB     r0,[r4,#0]            ;611
00001c  2801              CMP      r0,#1                 ;611
00001e  d001              BEQ      |L8.36|
000020  2001              MOVS     r0,#1                 ;612
000022  e7f5              B        |L8.16|
                  |L8.36|
000024  f7fffffe          BL       OS_CPU_SR_Save
000028  4681              MOV      r9,r0                 ;614
00002a  7aa0              LDRB     r0,[r4,#0xa]          ;615
00002c  7328              STRB     r0,[r5,#0xc]          ;615
00002e  f104070b          ADD      r7,r4,#0xb            ;616
000032  f1050804          ADD      r8,r5,#4              ;617
000036  2600              MOVS     r6,#0                 ;618
000038  e005              B        |L8.70|
                  |L8.58|
00003a  f8170b01          LDRB     r0,[r7],#1            ;619
00003e  f8080b01          STRB     r0,[r8],#1            ;619
000042  1c70              ADDS     r0,r6,#1              ;618
000044  b2c6              UXTB     r6,r0                 ;618
                  |L8.70|
000046  2e08              CMP      r6,#8                 ;618
000048  dbf7              BLT      |L8.58|
00004a  6860              LDR      r0,[r4,#4]            ;621
00004c  6028              STR      r0,[r5,#0]            ;621
00004e  4648              MOV      r0,r9                 ;622
000050  f7fffffe          BL       OS_CPU_SR_Restore
000054  2000              MOVS     r0,#0                 ;623
000056  e7db              B        |L8.16|
;;;625    #endif                                                     /* OS_MBOX_QUERY_EN                         */
                          ENDP

