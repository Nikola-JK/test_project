; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\stm32f10x_crc.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\stm32f10x_crc.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\Source\APP -I.\Source\BSP -I.\Source\uCOS-II\Source -I.\Source\uCOS-II\uC-CPU -I.\Source\uCOS-II\uC-LIB -I.\Source\uCOS-II\Ports -I.\Source\uCGUI\Config -I.\Source\uCGUI\emWinDemo -I.\Source\uCGUI\inc -I.\Source\uCGUI\LCDDriver -I.\Source\uCGUI\uCGUIDemo -I.\Source\Libraries\STM32F10x_StdPeriph_Driver\inc -I.\Source\Libraries\CMSIS\Core\CM3 -I.\Source\APP\HMI -I"D:\Program Files (x86)\keil\ARM\RV31\INC" -I"D:\Program Files (x86)\keil\ARM\PACK\ARM\CMSIS\3.20.3\CMSIS\Include" -I"D:\Program Files (x86)\keil\ARM\PACK\Keil\STM32F1xx_DFP\1.0.2\Device\Include" -DSTM32F10X_HD --omf_browse=.\obj\stm32f10x_crc.crf Source\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_crc.c]
                          THUMB

                          AREA ||i.CRC_CalcBlockCRC||, CODE, READONLY, ALIGN=2

                  CRC_CalcBlockCRC PROC
;;;109      */
;;;110    uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
000000  b510              PUSH     {r4,lr}
;;;111    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;112      uint32_t index = 0;
000006  2100              MOVS     r1,#0
;;;113      
;;;114      for(index = 0; index < BufferLength; index++)
000008  bf00              NOP      
00000a  e004              B        |L1.22|
                  |L1.12|
;;;115      {
;;;116        CRC->DR = pBuffer[index];
00000c  f8520021          LDR      r0,[r2,r1,LSL #2]
000010  4c03              LDR      r4,|L1.32|
000012  6020              STR      r0,[r4,#0]
000014  1c49              ADDS     r1,r1,#1              ;114
                  |L1.22|
000016  4299              CMP      r1,r3                 ;114
000018  d3f8              BCC      |L1.12|
;;;117      }
;;;118      return (CRC->DR);
00001a  4801              LDR      r0,|L1.32|
00001c  6800              LDR      r0,[r0,#0]
;;;119    }
00001e  bd10              POP      {r4,pc}
;;;120    
                          ENDP

                  |L1.32|
                          DCD      0x40023000

                          AREA ||i.CRC_CalcCRC||, CODE, READONLY, ALIGN=2

                  CRC_CalcCRC PROC
;;;96       */
;;;97     uint32_t CRC_CalcCRC(uint32_t Data)
000000  4601              MOV      r1,r0
;;;98     {
;;;99       CRC->DR = Data;
000002  4802              LDR      r0,|L2.12|
000004  6001              STR      r1,[r0,#0]
;;;100      
;;;101      return (CRC->DR);
000006  6800              LDR      r0,[r0,#0]
;;;102    }
000008  4770              BX       lr
;;;103    
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
                          DCD      0x40023000

                          AREA ||i.CRC_GetCRC||, CODE, READONLY, ALIGN=2

                  CRC_GetCRC PROC
;;;125      */
;;;126    uint32_t CRC_GetCRC(void)
000000  4801              LDR      r0,|L3.8|
;;;127    {
;;;128      return (CRC->DR);
000002  6800              LDR      r0,[r0,#0]
;;;129    }
000004  4770              BX       lr
;;;130    
                          ENDP

000006  0000              DCW      0x0000
                  |L3.8|
                          DCD      0x40023000

                          AREA ||i.CRC_GetIDRegister||, CODE, READONLY, ALIGN=2

                  CRC_GetIDRegister PROC
;;;145      */
;;;146    uint8_t CRC_GetIDRegister(void)
000000  4801              LDR      r0,|L4.8|
;;;147    {
;;;148      return (CRC->IDR);
000002  7900              LDRB     r0,[r0,#4]
;;;149    }
000004  4770              BX       lr
;;;150    
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      0x40023000

                          AREA ||i.CRC_ResetDR||, CODE, READONLY, ALIGN=2

                  CRC_ResetDR PROC
;;;85       */
;;;86     void CRC_ResetDR(void)
000000  2001              MOVS     r0,#1
;;;87     {
;;;88       /* Reset CRC generator */
;;;89       CRC->CR = CR_RESET_Set;
000002  4901              LDR      r1,|L5.8|
000004  6088              STR      r0,[r1,#8]
;;;90     }
000006  4770              BX       lr
;;;91     
                          ENDP

                  |L5.8|
                          DCD      0x40023000

                          AREA ||i.CRC_SetIDRegister||, CODE, READONLY, ALIGN=2

                  CRC_SetIDRegister PROC
;;;135      */
;;;136    void CRC_SetIDRegister(uint8_t IDValue)
000000  4901              LDR      r1,|L6.8|
;;;137    {
;;;138      CRC->IDR = IDValue;
000002  7108              STRB     r0,[r1,#4]
;;;139    }
000004  4770              BX       lr
;;;140    
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      0x40023000
