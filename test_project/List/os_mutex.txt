; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\os_mutex.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\os_mutex.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\Source\APP -I.\Source\BSP -I.\Source\uCOS-II\Source -I.\Source\uCOS-II\uC-CPU -I.\Source\uCOS-II\uC-LIB -I.\Source\uCOS-II\Ports -I.\Source\uCGUI\Config -I.\Source\uCGUI\emWinDemo -I.\Source\uCGUI\inc -I.\Source\uCGUI\LCDDriver -I.\Source\uCGUI\uCGUIDemo -I.\Source\Libraries\STM32F10x_StdPeriph_Driver\inc -I.\Source\Libraries\CMSIS\Core\CM3 -I.\Source\APP\HMI -I"D:\Program Files (x86)\keil\ARM\RV31\INC" -I"D:\Program Files (x86)\keil\ARM\PACK\ARM\CMSIS\3.20.3\CMSIS\Include" -I"D:\Program Files (x86)\keil\ARM\PACK\Keil\STM32F1xx_DFP\1.0.2\Device\Include" -DSTM32F10X_HD --omf_browse=.\obj\os_mutex.crf Source\uCOS-II\Source\os_mutex.c]
                          THUMB

                          AREA ||i.OSMutexAccept||, CODE, READONLY, ALIGN=2

                  OSMutexAccept PROC
;;;83     #if OS_MUTEX_ACCEPT_EN > 0
;;;84     BOOLEAN  OSMutexAccept (OS_EVENT *pevent, INT8U *perr)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;85     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;86         INT8U      pip;                                    /* Priority Inheritance Priority (PIP)          */
;;;87     #if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
;;;88         OS_CPU_SR  cpu_sr = 0;
000008  2700              MOVS     r7,#0
;;;89     #endif
;;;90     
;;;91     
;;;92     
;;;93     #if OS_ARG_CHK_EN > 0
;;;94         if (perr == (INT8U *)0) {                          /* Validate 'perr'                              */
00000a  b915              CBNZ     r5,|L1.18|
;;;95             return (OS_FALSE);
00000c  2000              MOVS     r0,#0
                  |L1.14|
;;;96         }
;;;97         if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
;;;98             *perr = OS_ERR_PEVENT_NULL;
;;;99             return (OS_FALSE);
;;;100        }
;;;101    #endif
;;;102        if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {  /* Validate event block type                    */
;;;103            *perr = OS_ERR_EVENT_TYPE;
;;;104            return (OS_FALSE);
;;;105        }
;;;106        if (OSIntNesting > 0) {                            /* Make sure it's not called from an ISR        */
;;;107            *perr = OS_ERR_PEND_ISR;
;;;108            return (OS_FALSE);
;;;109        }
;;;110        OS_ENTER_CRITICAL();                               /* Get value (0 or 1) of Mutex                  */
;;;111        pip = (INT8U)(pevent->OSEventCnt >> 8);            /* Get PIP from mutex                           */
;;;112        if ((pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
;;;113            pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;   /*      Mask off LSByte (Acquire Mutex)         */
;;;114            pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;     /*      Save current task priority in LSByte    */
;;;115            pevent->OSEventPtr  = (void *)OSTCBCur;        /*      Link TCB of task owning Mutex           */
;;;116            if (OSTCBCur->OSTCBPrio <= pip) {              /*      PIP 'must' have a SMALLER prio ...      */
;;;117                OS_EXIT_CRITICAL();                        /*      ... than current task!                  */
;;;118                *perr = OS_ERR_PIP_LOWER;
;;;119            } else {
;;;120                OS_EXIT_CRITICAL();
;;;121                *perr = OS_ERR_NONE;
;;;122            }
;;;123            return (OS_TRUE);
;;;124        }
;;;125        OS_EXIT_CRITICAL();
;;;126        *perr = OS_ERR_NONE;
;;;127        return (OS_FALSE);
;;;128    }
00000e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.18|
000012  b91c              CBNZ     r4,|L1.28|
000014  2004              MOVS     r0,#4                 ;98
000016  7028              STRB     r0,[r5,#0]            ;98
000018  2000              MOVS     r0,#0                 ;99
00001a  e7f8              B        |L1.14|
                  |L1.28|
00001c  7820              LDRB     r0,[r4,#0]            ;102
00001e  2804              CMP      r0,#4                 ;102
000020  d003              BEQ      |L1.42|
000022  2001              MOVS     r0,#1                 ;103
000024  7028              STRB     r0,[r5,#0]            ;103
000026  2000              MOVS     r0,#0                 ;104
000028  e7f1              B        |L1.14|
                  |L1.42|
00002a  481c              LDR      r0,|L1.156|
00002c  7800              LDRB     r0,[r0,#0]            ;106  ; OSIntNesting
00002e  2800              CMP      r0,#0                 ;106
000030  dd03              BLE      |L1.58|
000032  2002              MOVS     r0,#2                 ;107
000034  7028              STRB     r0,[r5,#0]            ;107
000036  2000              MOVS     r0,#0                 ;108
000038  e7e9              B        |L1.14|
                  |L1.58|
00003a  f7fffffe          BL       OS_CPU_SR_Save
00003e  4607              MOV      r7,r0                 ;110
000040  8920              LDRH     r0,[r4,#8]            ;111
000042  1206              ASRS     r6,r0,#8              ;111
000044  7a20              LDRB     r0,[r4,#8]            ;112
000046  28ff              CMP      r0,#0xff              ;112
000048  d120              BNE      |L1.140|
00004a  8920              LDRH     r0,[r4,#8]            ;113
00004c  f400407f          AND      r0,r0,#0xff00         ;113
000050  8120              STRH     r0,[r4,#8]            ;113
000052  8920              LDRH     r0,[r4,#8]            ;114
000054  4912              LDR      r1,|L1.160|
000056  6809              LDR      r1,[r1,#0]            ;114  ; OSTCBCur
000058  f891102e          LDRB     r1,[r1,#0x2e]         ;114
00005c  4308              ORRS     r0,r0,r1              ;114
00005e  8120              STRH     r0,[r4,#8]            ;114
000060  480f              LDR      r0,|L1.160|
000062  6800              LDR      r0,[r0,#0]            ;115  ; OSTCBCur
000064  6060              STR      r0,[r4,#4]            ;115
000066  480e              LDR      r0,|L1.160|
000068  6800              LDR      r0,[r0,#0]            ;116  ; OSTCBCur
00006a  f890002e          LDRB     r0,[r0,#0x2e]         ;116
00006e  42b0              CMP      r0,r6                 ;116
000070  dc05              BGT      |L1.126|
000072  4638              MOV      r0,r7                 ;117
000074  f7fffffe          BL       OS_CPU_SR_Restore
000078  2078              MOVS     r0,#0x78              ;118
00007a  7028              STRB     r0,[r5,#0]            ;118
00007c  e004              B        |L1.136|
                  |L1.126|
00007e  4638              MOV      r0,r7                 ;120
000080  f7fffffe          BL       OS_CPU_SR_Restore
000084  2000              MOVS     r0,#0                 ;121
000086  7028              STRB     r0,[r5,#0]            ;121
                  |L1.136|
000088  2001              MOVS     r0,#1                 ;123
00008a  e7c0              B        |L1.14|
                  |L1.140|
00008c  4638              MOV      r0,r7                 ;125
00008e  f7fffffe          BL       OS_CPU_SR_Restore
000092  2000              MOVS     r0,#0                 ;126
000094  7028              STRB     r0,[r5,#0]            ;126
000096  bf00              NOP                            ;127
000098  e7b9              B        |L1.14|
;;;129    #endif
                          ENDP

00009a  0000              DCW      0x0000
                  |L1.156|
                          DCD      OSIntNesting
                  |L1.160|
                          DCD      OSTCBCur

                          AREA ||i.OSMutexCreate||, CODE, READONLY, ALIGN=2

                  OSMutexCreate PROC
;;;165    
;;;166    OS_EVENT  *OSMutexCreate (INT8U prio, INT8U *perr)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;167    {
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
;;;168        OS_EVENT  *pevent;
;;;169    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;170        OS_CPU_SR  cpu_sr = 0;
000008  2700              MOVS     r7,#0
;;;171    #endif
;;;172    
;;;173    
;;;174    
;;;175    #if OS_ARG_CHK_EN > 0
;;;176        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
00000a  b915              CBNZ     r5,|L2.18|
;;;177            return ((OS_EVENT *)0);
00000c  2000              MOVS     r0,#0
                  |L2.14|
;;;178        }
;;;179        if (prio >= OS_LOWEST_PRIO) {                          /* Validate PIP                             */
;;;180            *perr = OS_ERR_PRIO_INVALID;
;;;181            return ((OS_EVENT *)0);
;;;182        }
;;;183    #endif
;;;184        if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
;;;185            *perr = OS_ERR_CREATE_ISR;                         /* ... can't CREATE mutex from an ISR       */
;;;186            return ((OS_EVENT *)0);
;;;187        }
;;;188        OS_ENTER_CRITICAL();
;;;189        if (OSTCBPrioTbl[prio] != (OS_TCB *)0) {               /* Mutex priority must not already exist    */
;;;190            OS_EXIT_CRITICAL();                                /* Task already exist at priority ...       */
;;;191            *perr = OS_ERR_PRIO_EXIST;                         /* ... inheritance priority                 */
;;;192            return ((OS_EVENT *)0);
;;;193        }
;;;194        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;                  /* Reserve the table entry                  */
;;;195        pevent             = OSEventFreeList;                  /* Get next free event control block        */
;;;196        if (pevent == (OS_EVENT *)0) {                         /* See if an ECB was available              */
;;;197            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* No, Release the table entry              */
;;;198            OS_EXIT_CRITICAL();
;;;199            *perr              = OS_ERR_PEVENT_NULL;           /* No more event control blocks             */
;;;200            return (pevent);
;;;201        }
;;;202        OSEventFreeList        = (OS_EVENT *)OSEventFreeList->OSEventPtr;   /* Adjust the free list        */
;;;203        OS_EXIT_CRITICAL();
;;;204        pevent->OSEventType    = OS_EVENT_TYPE_MUTEX;
;;;205        pevent->OSEventCnt     = (INT16U)((INT16U)prio << 8) | OS_MUTEX_AVAILABLE; /* Resource is avail.   */
;;;206        pevent->OSEventPtr     = (void *)0;                                 /* No task owning the mutex    */
;;;207    #if OS_EVENT_NAME_SIZE > 1
;;;208        pevent->OSEventName[0] = '?';
;;;209        pevent->OSEventName[1] = OS_ASCII_NUL;
;;;210    #endif
;;;211        OS_EventWaitListInit(pevent);
;;;212        *perr                  = OS_ERR_NONE;
;;;213        return (pevent);
;;;214    }
00000e  e8bd81f0          POP      {r4-r8,pc}
                  |L2.18|
000012  2e3f              CMP      r6,#0x3f              ;179
000014  db03              BLT      |L2.30|
000016  202a              MOVS     r0,#0x2a              ;180
000018  7028              STRB     r0,[r5,#0]            ;180
00001a  2000              MOVS     r0,#0                 ;181
00001c  e7f7              B        |L2.14|
                  |L2.30|
00001e  4821              LDR      r0,|L2.164|
000020  7800              LDRB     r0,[r0,#0]            ;184  ; OSIntNesting
000022  2800              CMP      r0,#0                 ;184
000024  dd03              BLE      |L2.46|
000026  2010              MOVS     r0,#0x10              ;185
000028  7028              STRB     r0,[r5,#0]            ;185
00002a  2000              MOVS     r0,#0                 ;186
00002c  e7ef              B        |L2.14|
                  |L2.46|
00002e  f7fffffe          BL       OS_CPU_SR_Save
000032  4607              MOV      r7,r0                 ;188
000034  481c              LDR      r0,|L2.168|
000036  f8500026          LDR      r0,[r0,r6,LSL #2]     ;189
00003a  b130              CBZ      r0,|L2.74|
00003c  4638              MOV      r0,r7                 ;190
00003e  f7fffffe          BL       OS_CPU_SR_Restore
000042  2028              MOVS     r0,#0x28              ;191
000044  7028              STRB     r0,[r5,#0]            ;191
000046  2000              MOVS     r0,#0                 ;192
000048  e7e1              B        |L2.14|
                  |L2.74|
00004a  2001              MOVS     r0,#1                 ;194
00004c  4916              LDR      r1,|L2.168|
00004e  f8410026          STR      r0,[r1,r6,LSL #2]     ;194
000052  4816              LDR      r0,|L2.172|
000054  6804              LDR      r4,[r0,#0]            ;195  ; OSEventFreeList
000056  b94c              CBNZ     r4,|L2.108|
000058  2000              MOVS     r0,#0                 ;197
00005a  f8410026          STR      r0,[r1,r6,LSL #2]     ;197
00005e  4638              MOV      r0,r7                 ;198
000060  f7fffffe          BL       OS_CPU_SR_Restore
000064  2004              MOVS     r0,#4                 ;199
000066  7028              STRB     r0,[r5,#0]            ;199
000068  4620              MOV      r0,r4                 ;200
00006a  e7d0              B        |L2.14|
                  |L2.108|
00006c  480f              LDR      r0,|L2.172|
00006e  6800              LDR      r0,[r0,#0]            ;202  ; OSEventFreeList
000070  6840              LDR      r0,[r0,#4]            ;202
000072  490e              LDR      r1,|L2.172|
000074  6008              STR      r0,[r1,#0]            ;202  ; OSEventFreeList
000076  4638              MOV      r0,r7                 ;203
000078  f7fffffe          BL       OS_CPU_SR_Restore
00007c  2004              MOVS     r0,#4                 ;204
00007e  7020              STRB     r0,[r4,#0]            ;204
000080  20ff              MOVS     r0,#0xff              ;205
000082  ea402006          ORR      r0,r0,r6,LSL #8       ;205
000086  8120              STRH     r0,[r4,#8]            ;205
000088  2000              MOVS     r0,#0                 ;206
00008a  6060              STR      r0,[r4,#4]            ;206
00008c  203f              MOVS     r0,#0x3f              ;208
00008e  74e0              STRB     r0,[r4,#0x13]         ;208
000090  2100              MOVS     r1,#0                 ;209
000092  7521              STRB     r1,[r4,#0x14]         ;209
000094  4620              MOV      r0,r4                 ;211
000096  f7fffffe          BL       OS_EventWaitListInit
00009a  2000              MOVS     r0,#0                 ;212
00009c  7028              STRB     r0,[r5,#0]            ;212
00009e  4620              MOV      r0,r4                 ;213
0000a0  e7b5              B        |L2.14|
;;;215    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L2.164|
                          DCD      OSIntNesting
                  |L2.168|
                          DCD      OSTCBPrioTbl
                  |L2.172|
                          DCD      OSEventFreeList

                          AREA ||i.OSMutexDel||, CODE, READONLY, ALIGN=2

                  OSMutexDel PROC
;;;257    #if OS_MUTEX_DEL_EN
;;;258    OS_EVENT  *OSMutexDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;259    {
000004  4604              MOV      r4,r0
000006  468a              MOV      r10,r1
000008  4615              MOV      r5,r2
;;;260        BOOLEAN    tasks_waiting;
;;;261        OS_EVENT  *pevent_return;
;;;262        INT8U      pip;                                        /* Priority inheritance priority            */
;;;263        INT8U      prio;
;;;264        OS_TCB    *ptcb;
;;;265    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;266        OS_CPU_SR  cpu_sr = 0;
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;267    #endif
;;;268    
;;;269    
;;;270    
;;;271    #if OS_ARG_CHK_EN > 0
;;;272        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
00000e  b915              CBNZ     r5,|L3.22|
;;;273            return (pevent);
000010  4620              MOV      r0,r4
                  |L3.18|
;;;274        }
;;;275        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;276            *perr = OS_ERR_PEVENT_NULL;
;;;277            return (pevent);
;;;278        }
;;;279    #endif
;;;280        if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
;;;281            *perr = OS_ERR_EVENT_TYPE;
;;;282            return (pevent);
;;;283        }
;;;284        if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
;;;285            *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
;;;286            return (pevent);
;;;287        }
;;;288        OS_ENTER_CRITICAL();
;;;289        if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mutex        */
;;;290            tasks_waiting = OS_TRUE;                           /* Yes                                      */
;;;291        } else {
;;;292            tasks_waiting = OS_FALSE;                          /* No                                       */
;;;293        }
;;;294        switch (opt) {
;;;295        case OS_DEL_NO_PEND:                               /* DELETE MUTEX ONLY IF NO TASK WAITING --- */
;;;296            if (tasks_waiting == OS_FALSE) {
;;;297    #if OS_EVENT_NAME_SIZE > 1
;;;298                pevent->OSEventName[0] = '?';             /* Unknown name                             */
;;;299                pevent->OSEventName[1] = OS_ASCII_NUL;
;;;300    #endif
;;;301                pip                 = (INT8U)(pevent->OSEventCnt >> 8);
;;;302                OSTCBPrioTbl[pip]   = (OS_TCB *)0;        /* Free up the PIP                          */
;;;303                pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
;;;304                pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
;;;305                pevent->OSEventCnt  = 0;
;;;306                OSEventFreeList     = pevent;
;;;307                OS_EXIT_CRITICAL();
;;;308                *perr               = OS_ERR_NONE;
;;;309                pevent_return       = (OS_EVENT *)0;      /* Mutex has been deleted                   */
;;;310            } else {
;;;311                OS_EXIT_CRITICAL();
;;;312                *perr               = OS_ERR_TASK_WAITING;
;;;313                pevent_return       = pevent;
;;;314            }
;;;315            break;
;;;316    
;;;317        case OS_DEL_ALWAYS:                                /* ALWAYS DELETE THE MUTEX ---------------- */
;;;318            pip  = (INT8U)(pevent->OSEventCnt >> 8);                     /* Get PIP of mutex          */
;;;319            prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original prio */
;;;320            ptcb = (OS_TCB *)pevent->OSEventPtr;
;;;321            if (ptcb != (OS_TCB *)0) {                    /* See if any task owns the mutex           */
;;;322                if (ptcb->OSTCBPrio == pip) {             /* See if original prio was changed         */
;;;323                    OSMutex_RdyAtPrio(ptcb, prio);        /* Yes, Restore the task's original prio    */
;;;324                }
;;;325            }
;;;326            while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mutex        */
;;;327                (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
;;;328            }
;;;329    #if OS_EVENT_NAME_SIZE > 1
;;;330            pevent->OSEventName[0] = '?';                 /* Unknown name                             */
;;;331            pevent->OSEventName[1] = OS_ASCII_NUL;
;;;332    #endif
;;;333            pip                 = (INT8U)(pevent->OSEventCnt >> 8);
;;;334            OSTCBPrioTbl[pip]   = (OS_TCB *)0;            /* Free up the PIP                          */
;;;335            pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
;;;336            pevent->OSEventPtr  = OSEventFreeList;        /* Return Event Control Block to free list  */
;;;337            pevent->OSEventCnt  = 0;
;;;338            OSEventFreeList     = pevent;                 /* Get next free event control block        */
;;;339            OS_EXIT_CRITICAL();
;;;340            if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
;;;341                OS_Sched();                               /* Find highest priority task ready to run  */
;;;342            }
;;;343            *perr         = OS_ERR_NONE;
;;;344            pevent_return = (OS_EVENT *)0;                /* Mutex has been deleted                   */
;;;345            break;
;;;346    
;;;347        default:
;;;348            OS_EXIT_CRITICAL();
;;;349            *perr         = OS_ERR_INVALID_OPT;
;;;350            pevent_return = pevent;
;;;351            break;
;;;352        }
;;;353        return (pevent_return);
;;;354    }
000012  e8bd8ff8          POP      {r3-r11,pc}
                  |L3.22|
000016  b91c              CBNZ     r4,|L3.32|
000018  2004              MOVS     r0,#4                 ;276
00001a  7028              STRB     r0,[r5,#0]            ;276
00001c  4620              MOV      r0,r4                 ;277
00001e  e7f8              B        |L3.18|
                  |L3.32|
000020  7820              LDRB     r0,[r4,#0]            ;280
000022  2804              CMP      r0,#4                 ;280
000024  d003              BEQ      |L3.46|
000026  2001              MOVS     r0,#1                 ;281
000028  7028              STRB     r0,[r5,#0]            ;281
00002a  4620              MOV      r0,r4                 ;282
00002c  e7f1              B        |L3.18|
                  |L3.46|
00002e  483f              LDR      r0,|L3.300|
000030  7800              LDRB     r0,[r0,#0]            ;284  ; OSIntNesting
000032  2800              CMP      r0,#0                 ;284
000034  dd03              BLE      |L3.62|
000036  200f              MOVS     r0,#0xf               ;285
000038  7028              STRB     r0,[r5,#0]            ;285
00003a  4620              MOV      r0,r4                 ;286
00003c  e7e9              B        |L3.18|
                  |L3.62|
00003e  f7fffffe          BL       OS_CPU_SR_Save
000042  9000              STR      r0,[sp,#0]            ;288
000044  7aa0              LDRB     r0,[r4,#0xa]          ;289
000046  b110              CBZ      r0,|L3.78|
000048  f04f0801          MOV      r8,#1                 ;290
00004c  e001              B        |L3.82|
                  |L3.78|
00004e  f04f0800          MOV      r8,#0                 ;292
                  |L3.82|
000052  f1ba0f00          CMP      r10,#0                ;294
000056  d003              BEQ      |L3.96|
000058  f1ba0f01          CMP      r10,#1                ;294
00005c  d15c              BNE      |L3.280|
00005e  e022              B        |L3.166|
                  |L3.96|
000060  f1b80f00          CMP      r8,#0                 ;296
000064  d118              BNE      |L3.152|
000066  203f              MOVS     r0,#0x3f              ;298
000068  74e0              STRB     r0,[r4,#0x13]         ;298
00006a  2100              MOVS     r1,#0                 ;299
00006c  7521              STRB     r1,[r4,#0x14]         ;299
00006e  8920              LDRH     r0,[r4,#8]            ;301
000070  1207              ASRS     r7,r0,#8              ;301
000072  2000              MOVS     r0,#0                 ;302
000074  492e              LDR      r1,|L3.304|
000076  f8410027          STR      r0,[r1,r7,LSL #2]     ;302
00007a  7020              STRB     r0,[r4,#0]            ;303
00007c  482d              LDR      r0,|L3.308|
00007e  6800              LDR      r0,[r0,#0]            ;304  ; OSEventFreeList
000080  6060              STR      r0,[r4,#4]            ;304
000082  2000              MOVS     r0,#0                 ;305
000084  8120              STRH     r0,[r4,#8]            ;305
000086  482b              LDR      r0,|L3.308|
000088  6004              STR      r4,[r0,#0]            ;306  ; OSEventFreeList
00008a  9800              LDR      r0,[sp,#0]            ;307
00008c  f7fffffe          BL       OS_CPU_SR_Restore
000090  2000              MOVS     r0,#0                 ;308
000092  7028              STRB     r0,[r5,#0]            ;308
000094  2600              MOVS     r6,#0                 ;309
000096  e005              B        |L3.164|
                  |L3.152|
000098  9800              LDR      r0,[sp,#0]            ;311
00009a  f7fffffe          BL       OS_CPU_SR_Restore
00009e  2049              MOVS     r0,#0x49              ;312
0000a0  7028              STRB     r0,[r5,#0]            ;312
0000a2  4626              MOV      r6,r4                 ;313
                  |L3.164|
0000a4  e03f              B        |L3.294|
                  |L3.166|
0000a6  8920              LDRH     r0,[r4,#8]            ;318
0000a8  1207              ASRS     r7,r0,#8              ;318
0000aa  f894b008          LDRB     r11,[r4,#8]           ;319
0000ae  f8d49004          LDR      r9,[r4,#4]            ;320
0000b2  f1b90f00          CMP      r9,#0                 ;321
0000b6  d007              BEQ      |L3.200|
0000b8  f899002e          LDRB     r0,[r9,#0x2e]         ;322
0000bc  42b8              CMP      r0,r7                 ;322
0000be  d103              BNE      |L3.200|
0000c0  4659              MOV      r1,r11                ;323
0000c2  4648              MOV      r0,r9                 ;323
0000c4  f7fffffe          BL       OSMutex_RdyAtPrio
                  |L3.200|
0000c8  e005              B        |L3.214|
                  |L3.202|
0000ca  2300              MOVS     r3,#0                 ;327
0000cc  2210              MOVS     r2,#0x10              ;327
0000ce  4619              MOV      r1,r3                 ;327
0000d0  4620              MOV      r0,r4                 ;327
0000d2  f7fffffe          BL       OS_EventTaskRdy
                  |L3.214|
0000d6  7aa0              LDRB     r0,[r4,#0xa]          ;326
0000d8  2800              CMP      r0,#0                 ;326
0000da  d1f6              BNE      |L3.202|
0000dc  203f              MOVS     r0,#0x3f              ;330
0000de  74e0              STRB     r0,[r4,#0x13]         ;330
0000e0  2100              MOVS     r1,#0                 ;331
0000e2  7521              STRB     r1,[r4,#0x14]         ;331
0000e4  8920              LDRH     r0,[r4,#8]            ;333
0000e6  1207              ASRS     r7,r0,#8              ;333
0000e8  2000              MOVS     r0,#0                 ;334
0000ea  4911              LDR      r1,|L3.304|
0000ec  f8410027          STR      r0,[r1,r7,LSL #2]     ;334
0000f0  7020              STRB     r0,[r4,#0]            ;335
0000f2  4810              LDR      r0,|L3.308|
0000f4  6800              LDR      r0,[r0,#0]            ;336  ; OSEventFreeList
0000f6  6060              STR      r0,[r4,#4]            ;336
0000f8  2000              MOVS     r0,#0                 ;337
0000fa  8120              STRH     r0,[r4,#8]            ;337
0000fc  480d              LDR      r0,|L3.308|
0000fe  6004              STR      r4,[r0,#0]            ;338  ; OSEventFreeList
000100  9800              LDR      r0,[sp,#0]            ;339
000102  f7fffffe          BL       OS_CPU_SR_Restore
000106  f1b80f01          CMP      r8,#1                 ;340
00010a  d101              BNE      |L3.272|
00010c  f7fffffe          BL       OS_Sched
                  |L3.272|
000110  2000              MOVS     r0,#0                 ;343
000112  7028              STRB     r0,[r5,#0]            ;343
000114  2600              MOVS     r6,#0                 ;344
000116  e006              B        |L3.294|
                  |L3.280|
000118  9800              LDR      r0,[sp,#0]            ;348
00011a  f7fffffe          BL       OS_CPU_SR_Restore
00011e  2007              MOVS     r0,#7                 ;349
000120  7028              STRB     r0,[r5,#0]            ;349
000122  4626              MOV      r6,r4                 ;350
000124  bf00              NOP                            ;351
                  |L3.294|
000126  bf00              NOP                            ;315
000128  4630              MOV      r0,r6                 ;353
00012a  e772              B        |L3.18|
;;;355    #endif
                          ENDP

                  |L3.300|
                          DCD      OSIntNesting
                  |L3.304|
                          DCD      OSTCBPrioTbl
                  |L3.308|
                          DCD      OSEventFreeList

                          AREA ||i.OSMutexPend||, CODE, READONLY, ALIGN=2

                  OSMutexPend PROC
;;;396    */
;;;397    void  OSMutexPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;398    {
000004  b082              SUB      sp,sp,#8
000006  4605              MOV      r5,r0
000008  4616              MOV      r6,r2
;;;399        INT8U      pip;                                        /* Priority Inheritance Priority (PIP)      */
;;;400        INT8U      mprio;                                      /* Mutex owner priority                     */
;;;401        BOOLEAN    rdy;                                        /* Flag indicating task was ready           */
;;;402        OS_TCB    *ptcb;
;;;403        OS_EVENT  *pevent2;
;;;404        INT8U      y;
;;;405        INT8U      pend_stat;
;;;406    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;407        OS_CPU_SR  cpu_sr = 0;
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;408    #endif
;;;409    
;;;410    
;;;411    
;;;412    #if OS_ARG_CHK_EN > 0
;;;413        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
00000e  b916              CBNZ     r6,|L4.22|
                  |L4.16|
;;;414            return;
;;;415        }
;;;416        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;417            *perr = OS_ERR_PEVENT_NULL;
;;;418            return;
;;;419        }
;;;420    #endif
;;;421        if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
;;;422            *perr = OS_ERR_EVENT_TYPE;
;;;423            return;
;;;424        }
;;;425        if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
;;;426            *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
;;;427            return;
;;;428        }
;;;429        if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
;;;430            *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
;;;431            return;
;;;432        }
;;;433        OS_ENTER_CRITICAL();
;;;434        pip = (INT8U)(pevent->OSEventCnt >> 8);                /* Get PIP from mutex                       */
;;;435        /* Is Mutex available?                      */
;;;436        if ((INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
;;;437            pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;       /* Yes, Acquire the resource                */
;;;438            pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;         /*      Save priority of owning task        */
;;;439            pevent->OSEventPtr  = (void *)OSTCBCur;            /*      Point to owning task's OS_TCB       */
;;;440            if (OSTCBCur->OSTCBPrio <= pip) {                  /*      PIP 'must' have a SMALLER prio ...  */
;;;441                OS_EXIT_CRITICAL();                            /*      ... than current task!              */
;;;442                *perr = OS_ERR_PIP_LOWER;
;;;443            } else {
;;;444                OS_EXIT_CRITICAL();
;;;445                *perr = OS_ERR_NONE;
;;;446            }
;;;447            return;
;;;448        }
;;;449        mprio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* No, Get priority of mutex owner   */
;;;450        ptcb  = (OS_TCB *)(pevent->OSEventPtr);                       /*     Point to TCB of mutex owner   */
;;;451        if (ptcb->OSTCBPrio > pip) {                                  /*     Need to promote prio of owner?*/
;;;452            if (mprio > OSTCBCur->OSTCBPrio) {
;;;453                y = ptcb->OSTCBY;
;;;454                if ((OSRdyTbl[y] & ptcb->OSTCBBitX) != 0) {           /*     See if mutex owner is ready   */
;;;455                    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                  /*     Yes, Remove owner from Rdy ...*/
;;;456                    if (OSRdyTbl[y] == 0) {                           /*          ... list at current prio */
;;;457                        OSRdyGrp &= ~ptcb->OSTCBBitY;
;;;458                    }
;;;459                    rdy = OS_TRUE;
;;;460                } else {
;;;461                    pevent2 = ptcb->OSTCBEventPtr;
;;;462                    if (pevent2 != (OS_EVENT *)0) {                   /* Remove from event wait list       */
;;;463                        if ((pevent2->OSEventTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX) == 0) {
;;;464                            pevent2->OSEventGrp &= ~ptcb->OSTCBBitY;
;;;465                        }
;;;466                    }
;;;467                    rdy = OS_FALSE;                            /* No                                       */
;;;468                }
;;;469                ptcb->OSTCBPrio = pip;                         /* Change owner task prio to PIP            */
;;;470    #if OS_LOWEST_PRIO <= 63
;;;471                ptcb->OSTCBY    = (INT8U)( ptcb->OSTCBPrio >> 3);
;;;472                ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x07);
;;;473                ptcb->OSTCBBitY = (INT8U)(1 << ptcb->OSTCBY);
;;;474                ptcb->OSTCBBitX = (INT8U)(1 << ptcb->OSTCBX);
;;;475    #else
;;;476                ptcb->OSTCBY    = (INT8U)((ptcb->OSTCBPrio >> 4) & 0xFF);
;;;477                ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x0F);
;;;478                ptcb->OSTCBBitY = (INT16U)(1 << ptcb->OSTCBY);
;;;479                ptcb->OSTCBBitX = (INT16U)(1 << ptcb->OSTCBX);
;;;480    #endif
;;;481                if (rdy == OS_TRUE) {                          /* If task was ready at owner's priority ...*/
;;;482                    OSRdyGrp               |= ptcb->OSTCBBitY; /* ... make it ready at new priority.       */
;;;483                    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
;;;484                } else {
;;;485                    pevent2 = ptcb->OSTCBEventPtr;
;;;486                    if (pevent2 != (OS_EVENT *)0) {            /* Add to event wait list                   */
;;;487                        pevent2->OSEventGrp               |= ptcb->OSTCBBitY;
;;;488                        pevent2->OSEventTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
;;;489                    }
;;;490                }
;;;491                OSTCBPrioTbl[pip] = ptcb;
;;;492            }
;;;493        }
;;;494        OSTCBCur->OSTCBStat     |= OS_STAT_MUTEX;         /* Mutex not available, pend current task        */
;;;495        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
;;;496        OSTCBCur->OSTCBDly       = timeout;               /* Store timeout in current task's TCB           */
;;;497        OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
;;;498        OS_EXIT_CRITICAL();
;;;499        OS_Sched();                                       /* Find next highest priority task ready         */
;;;500        OS_ENTER_CRITICAL();
;;;501        if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) { /* See if we timed out during the pend           */
;;;502            pend_stat = OSTCBCur->OSTCBStatPend;
;;;503            OS_EventTOAbort(pevent);
;;;504            OS_EXIT_CRITICAL();
;;;505            switch (pend_stat) {
;;;506            case OS_STAT_PEND_TO:
;;;507            default:
;;;508                *perr = OS_ERR_TIMEOUT;              /* Indicate that we didn't get mutex within TO   */
;;;509                break;
;;;510    
;;;511            case OS_STAT_PEND_ABORT:
;;;512                *perr = OS_ERR_PEND_ABORT;           /* Indicate that we aborted getting mutex        */
;;;513                break;
;;;514            }
;;;515            return;
;;;516        }
;;;517        OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;
;;;518        OS_EXIT_CRITICAL();
;;;519        *perr = OS_ERR_NONE;
;;;520    }
000010  b005              ADD      sp,sp,#0x14
000012  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.22|
000016  b915              CBNZ     r5,|L4.30|
000018  2004              MOVS     r0,#4                 ;417
00001a  7030              STRB     r0,[r6,#0]            ;417
00001c  e7f8              B        |L4.16|
                  |L4.30|
00001e  7828              LDRB     r0,[r5,#0]            ;421
000020  2804              CMP      r0,#4                 ;421
000022  d002              BEQ      |L4.42|
000024  2001              MOVS     r0,#1                 ;422
000026  7030              STRB     r0,[r6,#0]            ;422
000028  e7f2              B        |L4.16|
                  |L4.42|
00002a  4883              LDR      r0,|L4.568|
00002c  7800              LDRB     r0,[r0,#0]            ;425  ; OSIntNesting
00002e  2800              CMP      r0,#0                 ;425
000030  dd02              BLE      |L4.56|
000032  2002              MOVS     r0,#2                 ;426
000034  7030              STRB     r0,[r6,#0]            ;426
000036  e7eb              B        |L4.16|
                  |L4.56|
000038  4880              LDR      r0,|L4.572|
00003a  7800              LDRB     r0,[r0,#0]            ;429  ; OSLockNesting
00003c  2800              CMP      r0,#0                 ;429
00003e  dd02              BLE      |L4.70|
000040  200d              MOVS     r0,#0xd               ;430
000042  7030              STRB     r0,[r6,#0]            ;430
000044  e7e4              B        |L4.16|
                  |L4.70|
000046  f7fffffe          BL       OS_CPU_SR_Save
00004a  9000              STR      r0,[sp,#0]            ;433
00004c  8928              LDRH     r0,[r5,#8]            ;434
00004e  ea4f2820          ASR      r8,r0,#8              ;434
000052  7a28              LDRB     r0,[r5,#8]            ;436
000054  28ff              CMP      r0,#0xff              ;436
000056  d11f              BNE      |L4.152|
000058  8928              LDRH     r0,[r5,#8]            ;437
00005a  f400407f          AND      r0,r0,#0xff00         ;437
00005e  8128              STRH     r0,[r5,#8]            ;437
000060  8928              LDRH     r0,[r5,#8]            ;438
000062  4977              LDR      r1,|L4.576|
000064  6809              LDR      r1,[r1,#0]            ;438  ; OSTCBCur
000066  f891102e          LDRB     r1,[r1,#0x2e]         ;438
00006a  4308              ORRS     r0,r0,r1              ;438
00006c  8128              STRH     r0,[r5,#8]            ;438
00006e  4874              LDR      r0,|L4.576|
000070  6800              LDR      r0,[r0,#0]            ;439  ; OSTCBCur
000072  6068              STR      r0,[r5,#4]            ;439
000074  4872              LDR      r0,|L4.576|
000076  6800              LDR      r0,[r0,#0]            ;440  ; OSTCBCur
000078  f890002e          LDRB     r0,[r0,#0x2e]         ;440
00007c  4540              CMP      r0,r8                 ;440
00007e  dc05              BGT      |L4.140|
000080  9800              LDR      r0,[sp,#0]            ;441
000082  f7fffffe          BL       OS_CPU_SR_Restore
000086  2078              MOVS     r0,#0x78              ;442
000088  7030              STRB     r0,[r6,#0]            ;442
00008a  e004              B        |L4.150|
                  |L4.140|
00008c  9800              LDR      r0,[sp,#0]            ;444
00008e  f7fffffe          BL       OS_CPU_SR_Restore
000092  2000              MOVS     r0,#0                 ;445
000094  7030              STRB     r0,[r6,#0]            ;445
                  |L4.150|
000096  e7bb              B        |L4.16|
                  |L4.152|
000098  7a28              LDRB     r0,[r5,#8]            ;449
00009a  9001              STR      r0,[sp,#4]            ;449
00009c  686c              LDR      r4,[r5,#4]            ;450
00009e  f894002e          LDRB     r0,[r4,#0x2e]         ;451
0000a2  4540              CMP      r0,r8                 ;451
0000a4  dd7d              BLE      |L4.418|
0000a6  4866              LDR      r0,|L4.576|
0000a8  6800              LDR      r0,[r0,#0]            ;452  ; OSTCBCur
0000aa  f890102e          LDRB     r1,[r0,#0x2e]         ;452
0000ae  9801              LDR      r0,[sp,#4]            ;452
0000b0  4281              CMP      r1,r0                 ;452
0000b2  da79              BGE      |L4.424|
0000b4  f8949030          LDRB     r9,[r4,#0x30]         ;453
0000b8  4862              LDR      r0,|L4.580|
0000ba  f8100009          LDRB     r0,[r0,r9]            ;454
0000be  f8941031          LDRB     r1,[r4,#0x31]         ;454
0000c2  4208              TST      r0,r1                 ;454
0000c4  d016              BEQ      |L4.244|
0000c6  485f              LDR      r0,|L4.580|
0000c8  f8100009          LDRB     r0,[r0,r9]            ;455
0000cc  f8941031          LDRB     r1,[r4,#0x31]         ;455
0000d0  4388              BICS     r0,r0,r1              ;455
0000d2  495c              LDR      r1,|L4.580|
0000d4  f8010009          STRB     r0,[r1,r9]            ;455
0000d8  4608              MOV      r0,r1                 ;456
0000da  f8100009          LDRB     r0,[r0,r9]            ;456
0000de  b930              CBNZ     r0,|L4.238|
0000e0  f8941032          LDRB     r1,[r4,#0x32]         ;457
0000e4  4858              LDR      r0,|L4.584|
0000e6  7800              LDRB     r0,[r0,#0]            ;457  ; OSRdyGrp
0000e8  4388              BICS     r0,r0,r1              ;457
0000ea  4957              LDR      r1,|L4.584|
0000ec  7008              STRB     r0,[r1,#0]            ;457
                  |L4.238|
0000ee  f04f0a01          MOV      r10,#1                ;459
0000f2  e015              B        |L4.288|
                  |L4.244|
0000f4  69e7              LDR      r7,[r4,#0x1c]         ;461
0000f6  b18f              CBZ      r7,|L4.284|
0000f8  f8141f30          LDRB     r1,[r4,#0x30]!        ;463
0000fc  f107000b          ADD      r0,r7,#0xb            ;463
000100  5c40              LDRB     r0,[r0,r1]            ;463
000102  7861              LDRB     r1,[r4,#1]            ;463
000104  4388              BICS     r0,r0,r1              ;463
000106  f8142930          LDRB     r2,[r4],#-0x30        ;463
00010a  f107010b          ADD      r1,r7,#0xb            ;463
00010e  5488              STRB     r0,[r1,r2]            ;463
000110  d104              BNE      |L4.284|
000112  7ab8              LDRB     r0,[r7,#0xa]          ;464
000114  f8941032          LDRB     r1,[r4,#0x32]         ;464
000118  4388              BICS     r0,r0,r1              ;464
00011a  72b8              STRB     r0,[r7,#0xa]          ;464
                  |L4.284|
00011c  f04f0a00          MOV      r10,#0                ;467
                  |L4.288|
000120  f8048f2e          STRB     r8,[r4,#0x2e]!        ;469
000124  7820              LDRB     r0,[r4,#0]            ;471
000126  10c0              ASRS     r0,r0,#3              ;471
000128  70a0              STRB     r0,[r4,#2]            ;471
00012a  7820              LDRB     r0,[r4,#0]            ;472
00012c  f0000007          AND      r0,r0,#7              ;472
000130  7060              STRB     r0,[r4,#1]            ;472
000132  78a1              LDRB     r1,[r4,#2]            ;473
000134  2001              MOVS     r0,#1                 ;473
000136  4088              LSLS     r0,r0,r1              ;473
000138  7120              STRB     r0,[r4,#4]            ;473
00013a  7861              LDRB     r1,[r4,#1]            ;474
00013c  2001              MOVS     r0,#1                 ;474
00013e  4088              LSLS     r0,r0,r1              ;474
000140  70e0              STRB     r0,[r4,#3]            ;474
000142  f1a4042e          SUB      r4,r4,#0x2e           ;474
000146  f1ba0f01          CMP      r10,#1                ;481
00014a  d113              BNE      |L4.372|
00014c  f1040430          ADD      r4,r4,#0x30           ;482
000150  78a0              LDRB     r0,[r4,#2]            ;482
000152  493d              LDR      r1,|L4.584|
000154  7809              LDRB     r1,[r1,#0]            ;482  ; OSRdyGrp
000156  ea400001          ORR      r0,r0,r1              ;482
00015a  493b              LDR      r1,|L4.584|
00015c  7008              STRB     r0,[r1,#0]            ;482
00015e  7820              LDRB     r0,[r4,#0]            ;483
000160  4938              LDR      r1,|L4.580|
000162  5c08              LDRB     r0,[r1,r0]            ;483
000164  7861              LDRB     r1,[r4,#1]            ;483
000166  ea400001          ORR      r0,r0,r1              ;483
00016a  f8141930          LDRB     r1,[r4],#-0x30        ;483
00016e  4a35              LDR      r2,|L4.580|
000170  5450              STRB     r0,[r2,r1]            ;483
000172  e014              B        |L4.414|
                  |L4.372|
000174  69e7              LDR      r7,[r4,#0x1c]         ;485
000176  b197              CBZ      r7,|L4.414|
000178  7ab8              LDRB     r0,[r7,#0xa]          ;487
00017a  f1040430          ADD      r4,r4,#0x30           ;487
00017e  78a1              LDRB     r1,[r4,#2]            ;487
000180  ea400001          ORR      r0,r0,r1              ;487
000184  72b8              STRB     r0,[r7,#0xa]          ;487
000186  7821              LDRB     r1,[r4,#0]            ;488
000188  f107000b          ADD      r0,r7,#0xb            ;488
00018c  5c40              LDRB     r0,[r0,r1]            ;488
00018e  7861              LDRB     r1,[r4,#1]            ;488
000190  ea400001          ORR      r0,r0,r1              ;488
000194  f8142930          LDRB     r2,[r4],#-0x30        ;488
000198  f107010b          ADD      r1,r7,#0xb            ;488
00019c  5488              STRB     r0,[r1,r2]            ;488
                  |L4.414|
00019e  482b              LDR      r0,|L4.588|
0001a0  e000              B        |L4.420|
                  |L4.418|
0001a2  e001              B        |L4.424|
                  |L4.420|
0001a4  f8404028          STR      r4,[r0,r8,LSL #2]     ;491
                  |L4.424|
0001a8  4825              LDR      r0,|L4.576|
0001aa  6800              LDR      r0,[r0,#0]            ;494  ; OSTCBCur
0001ac  f890002c          LDRB     r0,[r0,#0x2c]         ;494
0001b0  f0400010          ORR      r0,r0,#0x10           ;494
0001b4  4922              LDR      r1,|L4.576|
0001b6  6809              LDR      r1,[r1,#0]            ;494  ; OSTCBCur
0001b8  f881002c          STRB     r0,[r1,#0x2c]         ;494
0001bc  f04f0000          MOV      r0,#0                 ;495
0001c0  491f              LDR      r1,|L4.576|
0001c2  6809              LDR      r1,[r1,#0]            ;495  ; OSTCBCur
0001c4  f881002d          STRB     r0,[r1,#0x2d]         ;495
0001c8  491d              LDR      r1,|L4.576|
0001ca  9803              LDR      r0,[sp,#0xc]          ;496
0001cc  6809              LDR      r1,[r1,#0]            ;496  ; OSTCBCur
0001ce  8548              STRH     r0,[r1,#0x2a]         ;496
0001d0  4628              MOV      r0,r5                 ;497
0001d2  f7fffffe          BL       OS_EventTaskWait
0001d6  9800              LDR      r0,[sp,#0]            ;498
0001d8  f7fffffe          BL       OS_CPU_SR_Restore
0001dc  f7fffffe          BL       OS_Sched
0001e0  f7fffffe          BL       OS_CPU_SR_Save
0001e4  9000              STR      r0,[sp,#0]            ;500
0001e6  4816              LDR      r0,|L4.576|
0001e8  6800              LDR      r0,[r0,#0]            ;501  ; OSTCBCur
0001ea  f890002d          LDRB     r0,[r0,#0x2d]         ;501
0001ee  b1c0              CBZ      r0,|L4.546|
0001f0  4813              LDR      r0,|L4.576|
0001f2  6800              LDR      r0,[r0,#0]            ;502  ; OSTCBCur
0001f4  f890b02d          LDRB     r11,[r0,#0x2d]        ;502
0001f8  4628              MOV      r0,r5                 ;503
0001fa  f7fffffe          BL       OS_EventTOAbort
0001fe  9800              LDR      r0,[sp,#0]            ;504
000200  f7fffffe          BL       OS_CPU_SR_Restore
000204  f1bb0f01          CMP      r11,#1                ;505
000208  d003              BEQ      |L4.530|
00020a  f1bb0f02          CMP      r11,#2                ;505
00020e  d003              BEQ      |L4.536|
000210  bf00              NOP                            ;506
                  |L4.530|
000212  200a              MOVS     r0,#0xa               ;508
000214  7030              STRB     r0,[r6,#0]            ;508
000216  e002              B        |L4.542|
                  |L4.536|
000218  200e              MOVS     r0,#0xe               ;512
00021a  7030              STRB     r0,[r6,#0]            ;512
00021c  bf00              NOP                            ;513
                  |L4.542|
00021e  bf00              NOP                            ;509
000220  e6f6              B        |L4.16|
                  |L4.546|
000222  2000              MOVS     r0,#0                 ;517
000224  4906              LDR      r1,|L4.576|
000226  6809              LDR      r1,[r1,#0]            ;517  ; OSTCBCur
000228  61c8              STR      r0,[r1,#0x1c]         ;517
00022a  9800              LDR      r0,[sp,#0]            ;518
00022c  f7fffffe          BL       OS_CPU_SR_Restore
000230  2000              MOVS     r0,#0                 ;519
000232  7030              STRB     r0,[r6,#0]            ;519
000234  bf00              NOP      
000236  e6eb              B        |L4.16|
;;;521    /*$PAGE*/
                          ENDP

                  |L4.568|
                          DCD      OSIntNesting
                  |L4.572|
                          DCD      OSLockNesting
                  |L4.576|
                          DCD      OSTCBCur
                  |L4.580|
                          DCD      OSRdyTbl
                  |L4.584|
                          DCD      OSRdyGrp
                  |L4.588|
                          DCD      OSTCBPrioTbl

                          AREA ||i.OSMutexPost||, CODE, READONLY, ALIGN=2

                  OSMutexPost PROC
;;;545    
;;;546    INT8U  OSMutexPost (OS_EVENT *pevent)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;547    {
000004  4604              MOV      r4,r0
;;;548        INT8U      pip;                                   /* Priority inheritance priority                 */
;;;549        INT8U      prio;
;;;550    #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
;;;551        OS_CPU_SR  cpu_sr = 0;
000006  2700              MOVS     r7,#0
;;;552    #endif
;;;553    
;;;554    
;;;555    
;;;556        if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
000008  482e              LDR      r0,|L5.196|
00000a  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
00000c  2800              CMP      r0,#0
00000e  dd02              BLE      |L5.22|
;;;557            return (OS_ERR_POST_ISR);                     /* ... can't POST mutex from an ISR              */
000010  2005              MOVS     r0,#5
                  |L5.18|
;;;558        }
;;;559    #if OS_ARG_CHK_EN > 0
;;;560        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;561            return (OS_ERR_PEVENT_NULL);
;;;562        }
;;;563    #endif
;;;564        if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) { /* Validate event block type                     */
;;;565            return (OS_ERR_EVENT_TYPE);
;;;566        }
;;;567        OS_ENTER_CRITICAL();
;;;568        pip  = (INT8U)(pevent->OSEventCnt >> 8);          /* Get priority inheritance priority of mutex    */
;;;569        prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original priority      */
;;;570        if (OSTCBCur != (OS_TCB *)pevent->OSEventPtr) {   /* See if posting task owns the MUTEX            */
;;;571            OS_EXIT_CRITICAL();
;;;572            return (OS_ERR_NOT_MUTEX_OWNER);
;;;573        }
;;;574        if (OSTCBCur->OSTCBPrio == pip) {                 /* Did we have to raise current task's priority? */
;;;575            OSMutex_RdyAtPrio(OSTCBCur, prio);            /* Restore the task's original priority          */
;;;576        }
;;;577        OSTCBPrioTbl[pip] = OS_TCB_RESERVED;              /* Reserve table entry                           */
;;;578        if (pevent->OSEventGrp != 0) {                    /* Any task waiting for the mutex?               */
;;;579            /* Yes, Make HPT waiting for mutex ready         */
;;;580            prio                = OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
;;;581            pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;  /*      Save priority of mutex's new owner       */
;;;582            pevent->OSEventCnt |= prio;
;;;583            pevent->OSEventPtr  = OSTCBPrioTbl[prio];     /*      Link to new mutex owner's OS_TCB         */
;;;584            if (prio <= pip) {                            /*      PIP 'must' have a SMALLER prio ...       */
;;;585                OS_EXIT_CRITICAL();                       /*      ... than current task!                   */
;;;586                OS_Sched();                               /*      Find highest priority task ready to run  */
;;;587                return (OS_ERR_PIP_LOWER);
;;;588            } else {
;;;589                OS_EXIT_CRITICAL();
;;;590                OS_Sched();                               /*      Find highest priority task ready to run  */
;;;591                return (OS_ERR_NONE);
;;;592            }
;;;593        }
;;;594        pevent->OSEventCnt |= OS_MUTEX_AVAILABLE;         /* No,  Mutex is now available                   */
;;;595        pevent->OSEventPtr  = (void *)0;
;;;596        OS_EXIT_CRITICAL();
;;;597        return (OS_ERR_NONE);
;;;598    }
000012  e8bd81f0          POP      {r4-r8,pc}
                  |L5.22|
000016  b90c              CBNZ     r4,|L5.28|
000018  2004              MOVS     r0,#4                 ;561
00001a  e7fa              B        |L5.18|
                  |L5.28|
00001c  7820              LDRB     r0,[r4,#0]            ;564
00001e  2804              CMP      r0,#4                 ;564
000020  d001              BEQ      |L5.38|
000022  2001              MOVS     r0,#1                 ;565
000024  e7f5              B        |L5.18|
                  |L5.38|
000026  f7fffffe          BL       OS_CPU_SR_Save
00002a  4607              MOV      r7,r0                 ;567
00002c  8920              LDRH     r0,[r4,#8]            ;568
00002e  1206              ASRS     r6,r0,#8              ;568
000030  7a25              LDRB     r5,[r4,#8]            ;569
000032  4925              LDR      r1,|L5.200|
000034  6860              LDR      r0,[r4,#4]            ;570
000036  6809              LDR      r1,[r1,#0]            ;570  ; OSTCBCur
000038  4288              CMP      r0,r1                 ;570
00003a  d004              BEQ      |L5.70|
00003c  4638              MOV      r0,r7                 ;571
00003e  f7fffffe          BL       OS_CPU_SR_Restore
000042  2064              MOVS     r0,#0x64              ;572
000044  e7e5              B        |L5.18|
                  |L5.70|
000046  4820              LDR      r0,|L5.200|
000048  6800              LDR      r0,[r0,#0]            ;574  ; OSTCBCur
00004a  f890002e          LDRB     r0,[r0,#0x2e]         ;574
00004e  42b0              CMP      r0,r6                 ;574
000050  d104              BNE      |L5.92|
000052  4629              MOV      r1,r5                 ;575
000054  481c              LDR      r0,|L5.200|
000056  6800              LDR      r0,[r0,#0]            ;575  ; OSTCBCur
000058  f7fffffe          BL       OSMutex_RdyAtPrio
                  |L5.92|
00005c  2001              MOVS     r0,#1                 ;577
00005e  491b              LDR      r1,|L5.204|
000060  f8410026          STR      r0,[r1,r6,LSL #2]     ;577
000064  7aa0              LDRB     r0,[r4,#0xa]          ;578
000066  b308              CBZ      r0,|L5.172|
000068  2300              MOVS     r3,#0                 ;580
00006a  2210              MOVS     r2,#0x10              ;580
00006c  4619              MOV      r1,r3                 ;580
00006e  4620              MOV      r0,r4                 ;580
000070  f7fffffe          BL       OS_EventTaskRdy
000074  4605              MOV      r5,r0                 ;580
000076  8920              LDRH     r0,[r4,#8]            ;581
000078  f400407f          AND      r0,r0,#0xff00         ;581
00007c  8120              STRH     r0,[r4,#8]            ;581
00007e  8920              LDRH     r0,[r4,#8]            ;582
000080  4328              ORRS     r0,r0,r5              ;582
000082  8120              STRH     r0,[r4,#8]            ;582
000084  4811              LDR      r0,|L5.204|
000086  f8500025          LDR      r0,[r0,r5,LSL #2]     ;583
00008a  6060              STR      r0,[r4,#4]            ;583
00008c  42b5              CMP      r5,r6                 ;584
00008e  dc06              BGT      |L5.158|
000090  4638              MOV      r0,r7                 ;585
000092  f7fffffe          BL       OS_CPU_SR_Restore
000096  f7fffffe          BL       OS_Sched
00009a  2078              MOVS     r0,#0x78              ;587
00009c  e7b9              B        |L5.18|
                  |L5.158|
00009e  4638              MOV      r0,r7                 ;589
0000a0  f7fffffe          BL       OS_CPU_SR_Restore
0000a4  f7fffffe          BL       OS_Sched
0000a8  2000              MOVS     r0,#0                 ;591
0000aa  e7b2              B        |L5.18|
                  |L5.172|
0000ac  8920              LDRH     r0,[r4,#8]            ;594
0000ae  f04000ff          ORR      r0,r0,#0xff           ;594
0000b2  8120              STRH     r0,[r4,#8]            ;594
0000b4  2000              MOVS     r0,#0                 ;595
0000b6  6060              STR      r0,[r4,#4]            ;595
0000b8  4638              MOV      r0,r7                 ;596
0000ba  f7fffffe          BL       OS_CPU_SR_Restore
0000be  2000              MOVS     r0,#0                 ;597
0000c0  e7a7              B        |L5.18|
;;;599    /*$PAGE*/
                          ENDP

0000c2  0000              DCW      0x0000
                  |L5.196|
                          DCD      OSIntNesting
                  |L5.200|
                          DCD      OSTCBCur
                  |L5.204|
                          DCD      OSTCBPrioTbl

                          AREA ||i.OSMutexQuery||, CODE, READONLY, ALIGN=2

                  OSMutexQuery PROC
;;;618    #if OS_MUTEX_QUERY_EN > 0
;;;619    INT8U  OSMutexQuery (OS_EVENT *pevent, OS_MUTEX_DATA *p_mutex_data)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;620    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;621        INT8U      i;
;;;622    #if OS_LOWEST_PRIO <= 63
;;;623        INT8U     *psrc;
;;;624        INT8U     *pdest;
;;;625    #else
;;;626        INT16U    *psrc;
;;;627        INT16U    *pdest;
;;;628    #endif
;;;629    #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;630        OS_CPU_SR  cpu_sr = 0;
000008  f04f0900          MOV      r9,#0
;;;631    #endif
;;;632    
;;;633    
;;;634    
;;;635        if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
00000c  481a              LDR      r0,|L6.120|
00000e  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
000010  2800              CMP      r0,#0
000012  dd02              BLE      |L6.26|
;;;636            return (OS_ERR_QUERY_ISR);                         /* ... can't QUERY mutex from an ISR        */
000014  2006              MOVS     r0,#6
                  |L6.22|
;;;637        }
;;;638    #if OS_ARG_CHK_EN > 0
;;;639        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;640            return (OS_ERR_PEVENT_NULL);
;;;641        }
;;;642        if (p_mutex_data == (OS_MUTEX_DATA *)0) {              /* Validate 'p_mutex_data'                  */
;;;643            return (OS_ERR_PDATA_NULL);
;;;644        }
;;;645    #endif
;;;646        if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
;;;647            return (OS_ERR_EVENT_TYPE);
;;;648        }
;;;649        OS_ENTER_CRITICAL();
;;;650        p_mutex_data->OSMutexPIP  = (INT8U)(pevent->OSEventCnt >> 8);
;;;651        p_mutex_data->OSOwnerPrio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);
;;;652        if (p_mutex_data->OSOwnerPrio == 0xFF) {
;;;653            p_mutex_data->OSValue = OS_TRUE;
;;;654        } else {
;;;655            p_mutex_data->OSValue = OS_FALSE;
;;;656        }
;;;657        p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
;;;658        psrc                      = &pevent->OSEventTbl[0];
;;;659        pdest                     = &p_mutex_data->OSEventTbl[0];
;;;660        for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
;;;661            *pdest++ = *psrc++;
;;;662        }
;;;663        OS_EXIT_CRITICAL();
;;;664        return (OS_ERR_NONE);
;;;665    }
000016  e8bd87f0          POP      {r4-r10,pc}
                  |L6.26|
00001a  b90d              CBNZ     r5,|L6.32|
00001c  2004              MOVS     r0,#4                 ;640
00001e  e7fa              B        |L6.22|
                  |L6.32|
000020  b90c              CBNZ     r4,|L6.38|
000022  2009              MOVS     r0,#9                 ;643
000024  e7f7              B        |L6.22|
                  |L6.38|
000026  7828              LDRB     r0,[r5,#0]            ;646
000028  2804              CMP      r0,#4                 ;646
00002a  d001              BEQ      |L6.48|
00002c  2001              MOVS     r0,#1                 ;647
00002e  e7f2              B        |L6.22|
                  |L6.48|
000030  f7fffffe          BL       OS_CPU_SR_Save
000034  4681              MOV      r9,r0                 ;649
000036  8928              LDRH     r0,[r5,#8]            ;650
000038  1200              ASRS     r0,r0,#8              ;650
00003a  72e0              STRB     r0,[r4,#0xb]          ;650
00003c  7a28              LDRB     r0,[r5,#8]            ;651
00003e  72a0              STRB     r0,[r4,#0xa]          ;651
000040  7aa0              LDRB     r0,[r4,#0xa]          ;652
000042  28ff              CMP      r0,#0xff              ;652
000044  d102              BNE      |L6.76|
000046  2001              MOVS     r0,#1                 ;653
000048  7260              STRB     r0,[r4,#9]            ;653
00004a  e001              B        |L6.80|
                  |L6.76|
00004c  2000              MOVS     r0,#0                 ;655
00004e  7260              STRB     r0,[r4,#9]            ;655
                  |L6.80|
000050  7aa8              LDRB     r0,[r5,#0xa]          ;657
000052  7220              STRB     r0,[r4,#8]            ;657
000054  f105080b          ADD      r8,r5,#0xb            ;658
000058  4626              MOV      r6,r4                 ;659
00005a  2700              MOVS     r7,#0                 ;660
00005c  e005              B        |L6.106|
                  |L6.94|
00005e  f8180b01          LDRB     r0,[r8],#1            ;661
000062  f8060b01          STRB     r0,[r6],#1            ;661
000066  1c78              ADDS     r0,r7,#1              ;660
000068  b2c7              UXTB     r7,r0                 ;660
                  |L6.106|
00006a  2f08              CMP      r7,#8                 ;660
00006c  dbf7              BLT      |L6.94|
00006e  4648              MOV      r0,r9                 ;663
000070  f7fffffe          BL       OS_CPU_SR_Restore
000074  2000              MOVS     r0,#0                 ;664
000076  e7ce              B        |L6.22|
;;;666    #endif                                                     /* OS_MUTEX_QUERY_EN                        */
                          ENDP

                  |L6.120|
                          DCD      OSIntNesting

                          AREA ||i.OSMutex_RdyAtPrio||, CODE, READONLY, ALIGN=2

                  OSMutex_RdyAtPrio PROC
;;;682    
;;;683    static  void  OSMutex_RdyAtPrio (OS_TCB *ptcb, INT8U prio)
000000  b530              PUSH     {r4,r5,lr}
;;;684    {
;;;685        INT8U   y;
;;;686    
;;;687    
;;;688        y            =  ptcb->OSTCBY;                          /* Remove owner from ready list at 'pip'    */
000002  f8902030          LDRB     r2,[r0,#0x30]
;;;689        OSRdyTbl[y] &= ~ptcb->OSTCBBitX;
000006  4b1a              LDR      r3,|L7.112|
000008  5c9b              LDRB     r3,[r3,r2]
00000a  f8904031          LDRB     r4,[r0,#0x31]
00000e  43a3              BICS     r3,r3,r4
000010  4c17              LDR      r4,|L7.112|
000012  54a3              STRB     r3,[r4,r2]
;;;690        if (OSRdyTbl[y] == 0) {
000014  4623              MOV      r3,r4
000016  5c9b              LDRB     r3,[r3,r2]
000018  b933              CBNZ     r3,|L7.40|
;;;691            OSRdyGrp &= ~ptcb->OSTCBBitY;
00001a  f8904032          LDRB     r4,[r0,#0x32]
00001e  4b15              LDR      r3,|L7.116|
000020  781b              LDRB     r3,[r3,#0]  ; OSRdyGrp
000022  43a3              BICS     r3,r3,r4
000024  4c13              LDR      r4,|L7.116|
000026  7023              STRB     r3,[r4,#0]
                  |L7.40|
;;;692        }
;;;693        ptcb->OSTCBPrio         = prio;
000028  f8001f2e          STRB     r1,[r0,#0x2e]!
;;;694    #if OS_LOWEST_PRIO <= 63
;;;695        ptcb->OSTCBY            = (INT8U)((prio >> (INT8U)3) & (INT8U)0x07);
00002c  f3c103c2          UBFX     r3,r1,#3,#3
000030  7083              STRB     r3,[r0,#2]
;;;696        ptcb->OSTCBX            = (INT8U) (prio & (INT8U)0x07);
000032  f0010307          AND      r3,r1,#7
000036  7043              STRB     r3,[r0,#1]
;;;697        ptcb->OSTCBBitY         = (INT8U)(1 << ptcb->OSTCBY);
000038  7884              LDRB     r4,[r0,#2]
00003a  2301              MOVS     r3,#1
00003c  40a3              LSLS     r3,r3,r4
00003e  7103              STRB     r3,[r0,#4]
;;;698        ptcb->OSTCBBitX         = (INT8U)(1 << ptcb->OSTCBX);
000040  7844              LDRB     r4,[r0,#1]
000042  2301              MOVS     r3,#1
000044  40a3              LSLS     r3,r3,r4
000046  70c3              STRB     r3,[r0,#3]
;;;699    #else
;;;700        ptcb->OSTCBY            = (INT8U)((prio >> (INT8U)4) & (INT8U)0x0F);
;;;701        ptcb->OSTCBX            = (INT8U) (prio & (INT8U)0x0F);
;;;702        ptcb->OSTCBBitY         = (INT16U)(1 << ptcb->OSTCBY);
;;;703        ptcb->OSTCBBitX         = (INT16U)(1 << ptcb->OSTCBX);
;;;704    #endif
;;;705        OSRdyGrp               |= ptcb->OSTCBBitY;             /* Make task ready at original priority     */
000048  7903              LDRB     r3,[r0,#4]
00004a  4c0a              LDR      r4,|L7.116|
00004c  7824              LDRB     r4,[r4,#0]  ; OSRdyGrp
00004e  4323              ORRS     r3,r3,r4
000050  4c08              LDR      r4,|L7.116|
000052  7023              STRB     r3,[r4,#0]
;;;706        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
000054  7883              LDRB     r3,[r0,#2]
000056  4c06              LDR      r4,|L7.112|
000058  5ce3              LDRB     r3,[r4,r3]
00005a  78c4              LDRB     r4,[r0,#3]
00005c  4323              ORRS     r3,r3,r4
00005e  7884              LDRB     r4,[r0,#2]
000060  f1a0002e          SUB      r0,r0,#0x2e
000064  4d02              LDR      r5,|L7.112|
000066  552b              STRB     r3,[r5,r4]
;;;707        OSTCBPrioTbl[prio]      = ptcb;
000068  4b03              LDR      r3,|L7.120|
00006a  f8430021          STR      r0,[r3,r1,LSL #2]
;;;708    }
00006e  bd30              POP      {r4,r5,pc}
;;;709    
                          ENDP

                  |L7.112|
                          DCD      OSRdyTbl
                  |L7.116|
                          DCD      OSRdyGrp
                  |L7.120|
                          DCD      OSTCBPrioTbl
