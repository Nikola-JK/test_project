; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\os_q.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\os_q.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\Source\APP -I.\Source\BSP -I.\Source\uCOS-II\Source -I.\Source\uCOS-II\uC-CPU -I.\Source\uCOS-II\uC-LIB -I.\Source\uCOS-II\Ports -I.\Source\uCGUI\Config -I.\Source\uCGUI\emWinDemo -I.\Source\uCGUI\inc -I.\Source\uCGUI\LCDDriver -I.\Source\uCGUI\uCGUIDemo -I.\Source\Libraries\STM32F10x_StdPeriph_Driver\inc -I.\Source\Libraries\CMSIS\Core\CM3 -I.\Source\APP\HMI -I"D:\Program Files (x86)\keil\ARM\RV31\INC" -I"D:\Program Files (x86)\keil\ARM\PACK\ARM\CMSIS\3.20.3\CMSIS\Include" -I"D:\Program Files (x86)\keil\ARM\PACK\Keil\STM32F1xx_DFP\1.0.2\Device\Include" -DSTM32F10X_HD --omf_browse=.\obj\os_q.crf Source\uCOS-II\Source\os_q.c]
                          THUMB

                          AREA ||i.OSQAccept||, CODE, READONLY, ALIGN=1

                  OSQAccept PROC
;;;60     #if OS_Q_ACCEPT_EN > 0
;;;61     void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;62     {
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
;;;63         void      *pmsg;
;;;64         OS_Q      *pq;
;;;65     #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;66         OS_CPU_SR  cpu_sr = 0;
000008  f04f0800          MOV      r8,#0
;;;67     #endif
;;;68     
;;;69     
;;;70     
;;;71     #if OS_ARG_CHK_EN > 0
;;;72         if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
00000c  b915              CBNZ     r5,|L1.20|
;;;73             return ((void *)0);
00000e  2000              MOVS     r0,#0
                  |L1.16|
;;;74         }
;;;75         if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
;;;76             *perr = OS_ERR_PEVENT_NULL;
;;;77             return ((void *)0);
;;;78         }
;;;79     #endif
;;;80         if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
;;;81             *perr = OS_ERR_EVENT_TYPE;
;;;82             return ((void *)0);
;;;83         }
;;;84         OS_ENTER_CRITICAL();
;;;85         pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
;;;86         if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
;;;87             pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
;;;88             pq->OSQEntries--;                        /* Update the number of entries in the queue          */
;;;89             if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
;;;90                 pq->OSQOut = pq->OSQStart;
;;;91             }
;;;92             *perr = OS_ERR_NONE;
;;;93         } else {
;;;94             *perr = OS_ERR_Q_EMPTY;
;;;95             pmsg  = (void *)0;                       /* Queue is empty                                     */
;;;96         }
;;;97         OS_EXIT_CRITICAL();
;;;98         return (pmsg);                               /* Return message received (or NULL)                  */
;;;99     }
000010  e8bd81f0          POP      {r4-r8,pc}
                  |L1.20|
000014  b91e              CBNZ     r6,|L1.30|
000016  2004              MOVS     r0,#4                 ;76
000018  7028              STRB     r0,[r5,#0]            ;76
00001a  2000              MOVS     r0,#0                 ;77
00001c  e7f8              B        |L1.16|
                  |L1.30|
00001e  7830              LDRB     r0,[r6,#0]            ;80
000020  2802              CMP      r0,#2                 ;80
000022  d003              BEQ      |L1.44|
000024  2001              MOVS     r0,#1                 ;81
000026  7028              STRB     r0,[r5,#0]            ;81
000028  2000              MOVS     r0,#0                 ;82
00002a  e7f1              B        |L1.16|
                  |L1.44|
00002c  f7fffffe          BL       OS_CPU_SR_Save
000030  4680              MOV      r8,r0                 ;84
000032  6874              LDR      r4,[r6,#4]            ;85
000034  8ae0              LDRH     r0,[r4,#0x16]         ;86
000036  2800              CMP      r0,#0                 ;86
000038  dd0f              BLE      |L1.90|
00003a  6921              LDR      r1,[r4,#0x10]         ;87
00003c  1d08              ADDS     r0,r1,#4              ;87
00003e  6120              STR      r0,[r4,#0x10]         ;87
000040  680f              LDR      r7,[r1,#0]            ;87
000042  8ae0              LDRH     r0,[r4,#0x16]         ;88
000044  1e40              SUBS     r0,r0,#1              ;88
000046  82e0              STRH     r0,[r4,#0x16]         ;88
000048  68a1              LDR      r1,[r4,#8]            ;89
00004a  6920              LDR      r0,[r4,#0x10]         ;89
00004c  4288              CMP      r0,r1                 ;89
00004e  d101              BNE      |L1.84|
000050  6860              LDR      r0,[r4,#4]            ;90
000052  6120              STR      r0,[r4,#0x10]         ;90
                  |L1.84|
000054  2000              MOVS     r0,#0                 ;92
000056  7028              STRB     r0,[r5,#0]            ;92
000058  e002              B        |L1.96|
                  |L1.90|
00005a  201f              MOVS     r0,#0x1f              ;94
00005c  7028              STRB     r0,[r5,#0]            ;94
00005e  2700              MOVS     r7,#0                 ;95
                  |L1.96|
000060  4640              MOV      r0,r8                 ;97
000062  f7fffffe          BL       OS_CPU_SR_Restore
000066  4638              MOV      r0,r7                 ;98
000068  e7d2              B        |L1.16|
;;;100    #endif
                          ENDP


                          AREA ||i.OSQCreate||, CODE, READONLY, ALIGN=2

                  OSQCreate PROC
;;;120    
;;;121    OS_EVENT  *OSQCreate (void **start, INT16U size)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;122    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;123        OS_EVENT  *pevent;
;;;124        OS_Q      *pq;
;;;125    #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;126        OS_CPU_SR  cpu_sr = 0;
000008  f04f0800          MOV      r8,#0
;;;127    #endif
;;;128    
;;;129    
;;;130    
;;;131        if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
00000c  4822              LDR      r0,|L2.152|
00000e  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
000010  2800              CMP      r0,#0
000012  dd02              BLE      |L2.26|
;;;132            return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
000014  2000              MOVS     r0,#0
                  |L2.22|
;;;133        }
;;;134        OS_ENTER_CRITICAL();
;;;135        pevent = OSEventFreeList;                    /* Get next free event control block                  */
;;;136        if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
;;;137            OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
;;;138        }
;;;139        OS_EXIT_CRITICAL();
;;;140        if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
;;;141            OS_ENTER_CRITICAL();
;;;142            pq = OSQFreeList;                        /* Get a free queue control block                     */
;;;143            if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
;;;144                OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
;;;145                OS_EXIT_CRITICAL();
;;;146                pq->OSQStart           = start;               /*      Initialize the queue                 */
;;;147                pq->OSQEnd             = &start[size];
;;;148                pq->OSQIn              = start;
;;;149                pq->OSQOut             = start;
;;;150                pq->OSQSize            = size;
;;;151                pq->OSQEntries         = 0;
;;;152                pevent->OSEventType    = OS_EVENT_TYPE_Q;
;;;153                pevent->OSEventCnt     = 0;
;;;154                pevent->OSEventPtr     = pq;
;;;155    #if OS_EVENT_NAME_SIZE > 1
;;;156                pevent->OSEventName[0] = '?';                  /* Unknown name                             */
;;;157                pevent->OSEventName[1] = OS_ASCII_NUL;
;;;158    #endif
;;;159                OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
;;;160            } else {
;;;161                pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
;;;162                OSEventFreeList    = pevent;
;;;163                OS_EXIT_CRITICAL();
;;;164                pevent = (OS_EVENT *)0;
;;;165            }
;;;166        }
;;;167        return (pevent);
;;;168    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L2.26|
00001a  f7fffffe          BL       OS_CPU_SR_Save
00001e  4680              MOV      r8,r0                 ;134
000020  481e              LDR      r0,|L2.156|
000022  6804              LDR      r4,[r0,#0]            ;135  ; OSEventFreeList
000024  6800              LDR      r0,[r0,#0]            ;136  ; OSEventFreeList
000026  b120              CBZ      r0,|L2.50|
000028  481c              LDR      r0,|L2.156|
00002a  6800              LDR      r0,[r0,#0]            ;137  ; OSEventFreeList
00002c  6840              LDR      r0,[r0,#4]            ;137
00002e  491b              LDR      r1,|L2.156|
000030  6008              STR      r0,[r1,#0]            ;137  ; OSEventFreeList
                  |L2.50|
000032  4640              MOV      r0,r8                 ;139
000034  f7fffffe          BL       OS_CPU_SR_Restore
000038  b30c              CBZ      r4,|L2.126|
00003a  f7fffffe          BL       OS_CPU_SR_Save
00003e  4680              MOV      r8,r0                 ;141
000040  4817              LDR      r0,|L2.160|
000042  6805              LDR      r5,[r0,#0]            ;142  ; OSQFreeList
000044  b1e5              CBZ      r5,|L2.128|
000046  6800              LDR      r0,[r0,#0]            ;144  ; OSQFreeList
000048  6800              LDR      r0,[r0,#0]            ;144
00004a  4915              LDR      r1,|L2.160|
00004c  6008              STR      r0,[r1,#0]            ;144  ; OSQFreeList
00004e  4640              MOV      r0,r8                 ;145
000050  f7fffffe          BL       OS_CPU_SR_Restore
000054  606e              STR      r6,[r5,#4]            ;146
000056  eb060087          ADD      r0,r6,r7,LSL #2       ;147
00005a  60a8              STR      r0,[r5,#8]            ;147
00005c  60ee              STR      r6,[r5,#0xc]          ;148
00005e  612e              STR      r6,[r5,#0x10]         ;149
000060  82af              STRH     r7,[r5,#0x14]         ;150
000062  2000              MOVS     r0,#0                 ;151
000064  82e8              STRH     r0,[r5,#0x16]         ;151
000066  2002              MOVS     r0,#2                 ;152
000068  7020              STRB     r0,[r4,#0]            ;152
00006a  2000              MOVS     r0,#0                 ;153
00006c  8120              STRH     r0,[r4,#8]            ;153
00006e  6065              STR      r5,[r4,#4]            ;154
000070  203f              MOVS     r0,#0x3f              ;156
000072  74e0              STRB     r0,[r4,#0x13]         ;156
000074  2100              MOVS     r1,#0                 ;157
000076  7521              STRB     r1,[r4,#0x14]         ;157
000078  4620              MOV      r0,r4                 ;159
00007a  f7fffffe          BL       OS_EventWaitListInit
                  |L2.126|
00007e  e008              B        |L2.146|
                  |L2.128|
000080  4806              LDR      r0,|L2.156|
000082  6800              LDR      r0,[r0,#0]            ;161  ; OSEventFreeList
000084  6060              STR      r0,[r4,#4]            ;161
000086  4805              LDR      r0,|L2.156|
000088  6004              STR      r4,[r0,#0]            ;162  ; OSEventFreeList
00008a  4640              MOV      r0,r8                 ;163
00008c  f7fffffe          BL       OS_CPU_SR_Restore
000090  2400              MOVS     r4,#0                 ;164
                  |L2.146|
000092  4620              MOV      r0,r4                 ;167
000094  e7bf              B        |L2.22|
;;;169    /*$PAGE*/
                          ENDP

000096  0000              DCW      0x0000
                  |L2.152|
                          DCD      OSIntNesting
                  |L2.156|
                          DCD      OSEventFreeList
                  |L2.160|
                          DCD      OSQFreeList

                          AREA ||i.OSQDel||, CODE, READONLY, ALIGN=2

                  OSQDel PROC
;;;211    #if OS_Q_DEL_EN > 0
;;;212    OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;213    {
000004  4604              MOV      r4,r0
000006  4689              MOV      r9,r1
000008  4615              MOV      r5,r2
;;;214        BOOLEAN    tasks_waiting;
;;;215        OS_EVENT  *pevent_return;
;;;216        OS_Q      *pq;
;;;217    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;218        OS_CPU_SR  cpu_sr = 0;
00000a  f04f0a00          MOV      r10,#0
;;;219    #endif
;;;220    
;;;221    
;;;222    
;;;223    #if OS_ARG_CHK_EN > 0
;;;224        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
00000e  b915              CBNZ     r5,|L3.22|
;;;225            return (pevent);
000010  4620              MOV      r0,r4
                  |L3.18|
;;;226        }
;;;227        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;228            *perr = OS_ERR_PEVENT_NULL;
;;;229            return (pevent);
;;;230        }
;;;231    #endif
;;;232        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
;;;233            *perr = OS_ERR_EVENT_TYPE;
;;;234            return (pevent);
;;;235        }
;;;236        if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
;;;237            *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
;;;238            return (pevent);
;;;239        }
;;;240        OS_ENTER_CRITICAL();
;;;241        if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
;;;242            tasks_waiting = OS_TRUE;                           /* Yes                                      */
;;;243        } else {
;;;244            tasks_waiting = OS_FALSE;                          /* No                                       */
;;;245        }
;;;246        switch (opt) {
;;;247        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
;;;248            if (tasks_waiting == OS_FALSE) {
;;;249    #if OS_EVENT_NAME_SIZE > 1
;;;250                pevent->OSEventName[0] = '?';             /* Unknown name                             */
;;;251                pevent->OSEventName[1] = OS_ASCII_NUL;
;;;252    #endif
;;;253                pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
;;;254                pq->OSQPtr             = OSQFreeList;
;;;255                OSQFreeList            = pq;
;;;256                pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
;;;257                pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
;;;258                pevent->OSEventCnt     = 0;
;;;259                OSEventFreeList        = pevent;          /* Get next free event control block        */
;;;260                OS_EXIT_CRITICAL();
;;;261                *perr                  = OS_ERR_NONE;
;;;262                pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
;;;263            } else {
;;;264                OS_EXIT_CRITICAL();
;;;265                *perr                  = OS_ERR_TASK_WAITING;
;;;266                pevent_return          = pevent;
;;;267            }
;;;268            break;
;;;269    
;;;270        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
;;;271            while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
;;;272                (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
;;;273            }
;;;274    #if OS_EVENT_NAME_SIZE > 1
;;;275            pevent->OSEventName[0] = '?';                 /* Unknown name                             */
;;;276            pevent->OSEventName[1] = OS_ASCII_NUL;
;;;277    #endif
;;;278            pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
;;;279            pq->OSQPtr             = OSQFreeList;
;;;280            OSQFreeList            = pq;
;;;281            pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
;;;282            pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
;;;283            pevent->OSEventCnt     = 0;
;;;284            OSEventFreeList        = pevent;              /* Get next free event control block        */
;;;285            OS_EXIT_CRITICAL();
;;;286            if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
;;;287                OS_Sched();                               /* Find highest priority task ready to run  */
;;;288            }
;;;289            *perr                  = OS_ERR_NONE;
;;;290            pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
;;;291            break;
;;;292    
;;;293        default:
;;;294            OS_EXIT_CRITICAL();
;;;295            *perr                  = OS_ERR_INVALID_OPT;
;;;296            pevent_return          = pevent;
;;;297            break;
;;;298        }
;;;299        return (pevent_return);
;;;300    }
000012  e8bd87f0          POP      {r4-r10,pc}
                  |L3.22|
000016  b91c              CBNZ     r4,|L3.32|
000018  2004              MOVS     r0,#4                 ;228
00001a  7028              STRB     r0,[r5,#0]            ;228
00001c  4620              MOV      r0,r4                 ;229
00001e  e7f8              B        |L3.18|
                  |L3.32|
000020  7820              LDRB     r0,[r4,#0]            ;232
000022  2802              CMP      r0,#2                 ;232
000024  d003              BEQ      |L3.46|
000026  2001              MOVS     r0,#1                 ;233
000028  7028              STRB     r0,[r5,#0]            ;233
00002a  4620              MOV      r0,r4                 ;234
00002c  e7f1              B        |L3.18|
                  |L3.46|
00002e  4838              LDR      r0,|L3.272|
000030  7800              LDRB     r0,[r0,#0]            ;236  ; OSIntNesting
000032  2800              CMP      r0,#0                 ;236
000034  dd03              BLE      |L3.62|
000036  200f              MOVS     r0,#0xf               ;237
000038  7028              STRB     r0,[r5,#0]            ;237
00003a  4620              MOV      r0,r4                 ;238
00003c  e7e9              B        |L3.18|
                  |L3.62|
00003e  f7fffffe          BL       OS_CPU_SR_Save
000042  4682              MOV      r10,r0                ;240
000044  7aa0              LDRB     r0,[r4,#0xa]          ;241
000046  b110              CBZ      r0,|L3.78|
000048  f04f0801          MOV      r8,#1                 ;242
00004c  e001              B        |L3.82|
                  |L3.78|
00004e  f04f0800          MOV      r8,#0                 ;244
                  |L3.82|
000052  f1b90f00          CMP      r9,#0                 ;246
000056  d003              BEQ      |L3.96|
000058  f1b90f01          CMP      r9,#1                 ;246
00005c  d14d              BNE      |L3.250|
00005e  e023              B        |L3.168|
                  |L3.96|
000060  f1b80f00          CMP      r8,#0                 ;248
000064  d119              BNE      |L3.154|
000066  203f              MOVS     r0,#0x3f              ;250
000068  74e0              STRB     r0,[r4,#0x13]         ;250
00006a  2100              MOVS     r1,#0                 ;251
00006c  7521              STRB     r1,[r4,#0x14]         ;251
00006e  6866              LDR      r6,[r4,#4]            ;253
000070  4828              LDR      r0,|L3.276|
000072  6800              LDR      r0,[r0,#0]            ;254  ; OSQFreeList
000074  6030              STR      r0,[r6,#0]            ;254
000076  4827              LDR      r0,|L3.276|
000078  6006              STR      r6,[r0,#0]            ;255  ; OSQFreeList
00007a  2000              MOVS     r0,#0                 ;256
00007c  7020              STRB     r0,[r4,#0]            ;256
00007e  4826              LDR      r0,|L3.280|
000080  6800              LDR      r0,[r0,#0]            ;257  ; OSEventFreeList
000082  6060              STR      r0,[r4,#4]            ;257
000084  2000              MOVS     r0,#0                 ;258
000086  8120              STRH     r0,[r4,#8]            ;258
000088  4823              LDR      r0,|L3.280|
00008a  6004              STR      r4,[r0,#0]            ;259  ; OSEventFreeList
00008c  4650              MOV      r0,r10                ;260
00008e  f7fffffe          BL       OS_CPU_SR_Restore
000092  2000              MOVS     r0,#0                 ;261
000094  7028              STRB     r0,[r5,#0]            ;261
000096  2700              MOVS     r7,#0                 ;262
000098  e005              B        |L3.166|
                  |L3.154|
00009a  4650              MOV      r0,r10                ;264
00009c  f7fffffe          BL       OS_CPU_SR_Restore
0000a0  2049              MOVS     r0,#0x49              ;265
0000a2  7028              STRB     r0,[r5,#0]            ;265
0000a4  4627              MOV      r7,r4                 ;266
                  |L3.166|
0000a6  e02f              B        |L3.264|
                  |L3.168|
0000a8  e005              B        |L3.182|
                  |L3.170|
0000aa  2300              MOVS     r3,#0                 ;272
0000ac  2204              MOVS     r2,#4                 ;272
0000ae  4619              MOV      r1,r3                 ;272
0000b0  4620              MOV      r0,r4                 ;272
0000b2  f7fffffe          BL       OS_EventTaskRdy
                  |L3.182|
0000b6  7aa0              LDRB     r0,[r4,#0xa]          ;271
0000b8  2800              CMP      r0,#0                 ;271
0000ba  d1f6              BNE      |L3.170|
0000bc  203f              MOVS     r0,#0x3f              ;275
0000be  74e0              STRB     r0,[r4,#0x13]         ;275
0000c0  2100              MOVS     r1,#0                 ;276
0000c2  7521              STRB     r1,[r4,#0x14]         ;276
0000c4  6866              LDR      r6,[r4,#4]            ;278
0000c6  4813              LDR      r0,|L3.276|
0000c8  6800              LDR      r0,[r0,#0]            ;279  ; OSQFreeList
0000ca  6030              STR      r0,[r6,#0]            ;279
0000cc  4811              LDR      r0,|L3.276|
0000ce  6006              STR      r6,[r0,#0]            ;280  ; OSQFreeList
0000d0  2000              MOVS     r0,#0                 ;281
0000d2  7020              STRB     r0,[r4,#0]            ;281
0000d4  4810              LDR      r0,|L3.280|
0000d6  6800              LDR      r0,[r0,#0]            ;282  ; OSEventFreeList
0000d8  6060              STR      r0,[r4,#4]            ;282
0000da  2000              MOVS     r0,#0                 ;283
0000dc  8120              STRH     r0,[r4,#8]            ;283
0000de  480e              LDR      r0,|L3.280|
0000e0  6004              STR      r4,[r0,#0]            ;284  ; OSEventFreeList
0000e2  4650              MOV      r0,r10                ;285
0000e4  f7fffffe          BL       OS_CPU_SR_Restore
0000e8  f1b80f01          CMP      r8,#1                 ;286
0000ec  d101              BNE      |L3.242|
0000ee  f7fffffe          BL       OS_Sched
                  |L3.242|
0000f2  2000              MOVS     r0,#0                 ;289
0000f4  7028              STRB     r0,[r5,#0]            ;289
0000f6  2700              MOVS     r7,#0                 ;290
0000f8  e006              B        |L3.264|
                  |L3.250|
0000fa  4650              MOV      r0,r10                ;294
0000fc  f7fffffe          BL       OS_CPU_SR_Restore
000100  2007              MOVS     r0,#7                 ;295
000102  7028              STRB     r0,[r5,#0]            ;295
000104  4627              MOV      r7,r4                 ;296
000106  bf00              NOP                            ;297
                  |L3.264|
000108  bf00              NOP                            ;268
00010a  4638              MOV      r0,r7                 ;299
00010c  e781              B        |L3.18|
;;;301    #endif
                          ENDP

00010e  0000              DCW      0x0000
                  |L3.272|
                          DCD      OSIntNesting
                  |L3.276|
                          DCD      OSQFreeList
                  |L3.280|
                          DCD      OSEventFreeList

                          AREA ||i.OSQFlush||, CODE, READONLY, ALIGN=1

                  OSQFlush PROC
;;;323    #if OS_Q_FLUSH_EN > 0
;;;324    INT8U  OSQFlush (OS_EVENT *pevent)
000000  b570              PUSH     {r4-r6,lr}
;;;325    {
000002  4605              MOV      r5,r0
;;;326        OS_Q      *pq;
;;;327    #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
;;;328        OS_CPU_SR  cpu_sr = 0;
000004  2600              MOVS     r6,#0
;;;329    #endif
;;;330    
;;;331    
;;;332    
;;;333    #if OS_ARG_CHK_EN > 0
;;;334        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
000006  b90d              CBNZ     r5,|L4.12|
;;;335            return (OS_ERR_PEVENT_NULL);
000008  2004              MOVS     r0,#4
                  |L4.10|
;;;336        }
;;;337        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
;;;338            return (OS_ERR_EVENT_TYPE);
;;;339        }
;;;340    #endif
;;;341        OS_ENTER_CRITICAL();
;;;342        pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
;;;343        pq->OSQIn      = pq->OSQStart;
;;;344        pq->OSQOut     = pq->OSQStart;
;;;345        pq->OSQEntries = 0;
;;;346        OS_EXIT_CRITICAL();
;;;347        return (OS_ERR_NONE);
;;;348    }
00000a  bd70              POP      {r4-r6,pc}
                  |L4.12|
00000c  7828              LDRB     r0,[r5,#0]            ;337
00000e  2802              CMP      r0,#2                 ;337
000010  d001              BEQ      |L4.22|
000012  2001              MOVS     r0,#1                 ;338
000014  e7f9              B        |L4.10|
                  |L4.22|
000016  f7fffffe          BL       OS_CPU_SR_Save
00001a  4606              MOV      r6,r0                 ;341
00001c  686c              LDR      r4,[r5,#4]            ;342
00001e  6860              LDR      r0,[r4,#4]            ;343
000020  60e0              STR      r0,[r4,#0xc]          ;343
000022  6860              LDR      r0,[r4,#4]            ;344
000024  6120              STR      r0,[r4,#0x10]         ;344
000026  2000              MOVS     r0,#0                 ;345
000028  82e0              STRH     r0,[r4,#0x16]         ;345
00002a  4630              MOV      r0,r6                 ;346
00002c  f7fffffe          BL       OS_CPU_SR_Restore
000030  2000              MOVS     r0,#0                 ;347
000032  e7ea              B        |L4.10|
;;;349    #endif
                          ENDP


                          AREA ||i.OSQPend||, CODE, READONLY, ALIGN=2

                  OSQPend PROC
;;;387    
;;;388    void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;389    {
000004  4606              MOV      r6,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
;;;390        void      *pmsg;
;;;391        OS_Q      *pq;
;;;392        INT8U      pend_stat;
;;;393    #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;394        OS_CPU_SR  cpu_sr = 0;
00000a  f04f0a00          MOV      r10,#0
;;;395    #endif
;;;396    
;;;397    
;;;398    
;;;399    #if OS_ARG_CHK_EN > 0
;;;400        if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
00000e  b915              CBNZ     r5,|L5.22|
;;;401            return ((void *)0);
000010  2000              MOVS     r0,#0
                  |L5.18|
;;;402        }
;;;403        if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
;;;404            *perr = OS_ERR_PEVENT_NULL;
;;;405            return ((void *)0);
;;;406        }
;;;407        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
;;;408            *perr = OS_ERR_EVENT_TYPE;
;;;409            return ((void *)0);
;;;410        }
;;;411    #endif
;;;412        if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
;;;413            *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
;;;414            return ((void *)0);
;;;415        }
;;;416        if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
;;;417            *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
;;;418            return ((void *)0);
;;;419        }
;;;420        OS_ENTER_CRITICAL();
;;;421        pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
;;;422        if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
;;;423            pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
;;;424            pq->OSQEntries--;                        /* Update the number of entries in the queue          */
;;;425            if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
;;;426                pq->OSQOut = pq->OSQStart;
;;;427            }
;;;428            OS_EXIT_CRITICAL();
;;;429            *perr = OS_ERR_NONE;
;;;430            return (pmsg);                           /* Return message received                            */
;;;431        }
;;;432        OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
;;;433        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
;;;434        OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
;;;435        OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
;;;436        OS_EXIT_CRITICAL();
;;;437        OS_Sched();                                  /* Find next highest priority task ready to run       */
;;;438        OS_ENTER_CRITICAL();
;;;439        if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) { /* Was task readied because timed-out or aborted?*/
;;;440            pend_stat = OSTCBCur->OSTCBStatPend;
;;;441            OS_EventTOAbort(pevent);
;;;442            OS_EXIT_CRITICAL();
;;;443            switch (pend_stat) {
;;;444            case OS_STAT_PEND_TO:
;;;445            default:
;;;446                *perr = OS_ERR_TIMEOUT;         /*     Indicate a timeout occured                     */
;;;447                break;
;;;448    
;;;449            case OS_STAT_PEND_ABORT:
;;;450                *perr = OS_ERR_PEND_ABORT;      /*     Indicate that we aborted                       */
;;;451                break;
;;;452            }
;;;453            return ((void *)0);                      /*     No message received                            */
;;;454        }
;;;455        pmsg                    = OSTCBCur->OSTCBMsg;/* No, Extract message from TCB (Put there by QPost)  */
;;;456        OSTCBCur->OSTCBMsg      = (void *)0;
;;;457        OSTCBCur->OSTCBStat     = OS_STAT_RDY;
;;;458        OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;     /*     No longer waiting for event                    */
;;;459        OS_EXIT_CRITICAL();
;;;460        *perr                   = OS_ERR_NONE;
;;;461        return (pmsg);                               /*     Return message received                        */
;;;462    }
000012  e8bd87f0          POP      {r4-r10,pc}
                  |L5.22|
000016  b91e              CBNZ     r6,|L5.32|
000018  2004              MOVS     r0,#4                 ;404
00001a  7028              STRB     r0,[r5,#0]            ;404
00001c  2000              MOVS     r0,#0                 ;405
00001e  e7f8              B        |L5.18|
                  |L5.32|
000020  7830              LDRB     r0,[r6,#0]            ;407
000022  2802              CMP      r0,#2                 ;407
000024  d003              BEQ      |L5.46|
000026  2001              MOVS     r0,#1                 ;408
000028  7028              STRB     r0,[r5,#0]            ;408
00002a  2000              MOVS     r0,#0                 ;409
00002c  e7f1              B        |L5.18|
                  |L5.46|
00002e  483e              LDR      r0,|L5.296|
000030  7800              LDRB     r0,[r0,#0]            ;412  ; OSIntNesting
000032  2800              CMP      r0,#0                 ;412
000034  dd03              BLE      |L5.62|
000036  2002              MOVS     r0,#2                 ;413
000038  7028              STRB     r0,[r5,#0]            ;413
00003a  2000              MOVS     r0,#0                 ;414
00003c  e7e9              B        |L5.18|
                  |L5.62|
00003e  483b              LDR      r0,|L5.300|
000040  7800              LDRB     r0,[r0,#0]            ;416  ; OSLockNesting
000042  2800              CMP      r0,#0                 ;416
000044  dd03              BLE      |L5.78|
000046  200d              MOVS     r0,#0xd               ;417
000048  7028              STRB     r0,[r5,#0]            ;417
00004a  2000              MOVS     r0,#0                 ;418
00004c  e7e1              B        |L5.18|
                  |L5.78|
00004e  f7fffffe          BL       OS_CPU_SR_Save
000052  4682              MOV      r10,r0                ;420
000054  6874              LDR      r4,[r6,#4]            ;421
000056  8ae0              LDRH     r0,[r4,#0x16]         ;422
000058  2800              CMP      r0,#0                 ;422
00005a  dd13              BLE      |L5.132|
00005c  6921              LDR      r1,[r4,#0x10]         ;423
00005e  1d08              ADDS     r0,r1,#4              ;423
000060  6120              STR      r0,[r4,#0x10]         ;423
000062  680f              LDR      r7,[r1,#0]            ;423
000064  8ae0              LDRH     r0,[r4,#0x16]         ;424
000066  1e40              SUBS     r0,r0,#1              ;424
000068  82e0              STRH     r0,[r4,#0x16]         ;424
00006a  68a1              LDR      r1,[r4,#8]            ;425
00006c  6920              LDR      r0,[r4,#0x10]         ;425
00006e  4288              CMP      r0,r1                 ;425
000070  d101              BNE      |L5.118|
000072  6860              LDR      r0,[r4,#4]            ;426
000074  6120              STR      r0,[r4,#0x10]         ;426
                  |L5.118|
000076  4650              MOV      r0,r10                ;428
000078  f7fffffe          BL       OS_CPU_SR_Restore
00007c  2000              MOVS     r0,#0                 ;429
00007e  7028              STRB     r0,[r5,#0]            ;429
000080  4638              MOV      r0,r7                 ;430
000082  e7c6              B        |L5.18|
                  |L5.132|
000084  482a              LDR      r0,|L5.304|
000086  6800              LDR      r0,[r0,#0]            ;432  ; OSTCBCur
000088  f890002c          LDRB     r0,[r0,#0x2c]         ;432
00008c  f0400004          ORR      r0,r0,#4              ;432
000090  4927              LDR      r1,|L5.304|
000092  6809              LDR      r1,[r1,#0]            ;432  ; OSTCBCur
000094  f881002c          STRB     r0,[r1,#0x2c]         ;432
000098  2000              MOVS     r0,#0                 ;433
00009a  4925              LDR      r1,|L5.304|
00009c  6809              LDR      r1,[r1,#0]            ;433  ; OSTCBCur
00009e  f881002d          STRB     r0,[r1,#0x2d]         ;433
0000a2  4823              LDR      r0,|L5.304|
0000a4  6800              LDR      r0,[r0,#0]            ;434  ; OSTCBCur
0000a6  f8a0802a          STRH     r8,[r0,#0x2a]         ;434
0000aa  4630              MOV      r0,r6                 ;435
0000ac  f7fffffe          BL       OS_EventTaskWait
0000b0  4650              MOV      r0,r10                ;436
0000b2  f7fffffe          BL       OS_CPU_SR_Restore
0000b6  f7fffffe          BL       OS_Sched
0000ba  f7fffffe          BL       OS_CPU_SR_Save
0000be  4682              MOV      r10,r0                ;438
0000c0  481b              LDR      r0,|L5.304|
0000c2  6800              LDR      r0,[r0,#0]            ;439  ; OSTCBCur
0000c4  f890002d          LDRB     r0,[r0,#0x2d]         ;439
0000c8  b1c8              CBZ      r0,|L5.254|
0000ca  4819              LDR      r0,|L5.304|
0000cc  6800              LDR      r0,[r0,#0]            ;440  ; OSTCBCur
0000ce  f890902d          LDRB     r9,[r0,#0x2d]         ;440
0000d2  4630              MOV      r0,r6                 ;441
0000d4  f7fffffe          BL       OS_EventTOAbort
0000d8  4650              MOV      r0,r10                ;442
0000da  f7fffffe          BL       OS_CPU_SR_Restore
0000de  f1b90f01          CMP      r9,#1                 ;443
0000e2  d003              BEQ      |L5.236|
0000e4  f1b90f02          CMP      r9,#2                 ;443
0000e8  d003              BEQ      |L5.242|
0000ea  bf00              NOP                            ;444
                  |L5.236|
0000ec  200a              MOVS     r0,#0xa               ;446
0000ee  7028              STRB     r0,[r5,#0]            ;446
0000f0  e002              B        |L5.248|
                  |L5.242|
0000f2  200e              MOVS     r0,#0xe               ;450
0000f4  7028              STRB     r0,[r5,#0]            ;450
0000f6  bf00              NOP                            ;451
                  |L5.248|
0000f8  bf00              NOP                            ;447
0000fa  2000              MOVS     r0,#0                 ;453
0000fc  e789              B        |L5.18|
                  |L5.254|
0000fe  480c              LDR      r0,|L5.304|
000100  6800              LDR      r0,[r0,#0]            ;455  ; OSTCBCur
000102  6a07              LDR      r7,[r0,#0x20]         ;455
000104  2000              MOVS     r0,#0                 ;456
000106  490a              LDR      r1,|L5.304|
000108  6809              LDR      r1,[r1,#0]            ;456  ; OSTCBCur
00010a  6208              STR      r0,[r1,#0x20]         ;456
00010c  4908              LDR      r1,|L5.304|
00010e  6809              LDR      r1,[r1,#0]            ;457  ; OSTCBCur
000110  f881002c          STRB     r0,[r1,#0x2c]         ;457
000114  4906              LDR      r1,|L5.304|
000116  6809              LDR      r1,[r1,#0]            ;458  ; OSTCBCur
000118  61c8              STR      r0,[r1,#0x1c]         ;458
00011a  4650              MOV      r0,r10                ;459
00011c  f7fffffe          BL       OS_CPU_SR_Restore
000120  2000              MOVS     r0,#0                 ;460
000122  7028              STRB     r0,[r5,#0]            ;460
000124  4638              MOV      r0,r7                 ;461
000126  e774              B        |L5.18|
;;;463    /*$PAGE*/
                          ENDP

                  |L5.296|
                          DCD      OSIntNesting
                  |L5.300|
                          DCD      OSLockNesting
                  |L5.304|
                          DCD      OSTCBCur

                          AREA ||i.OSQPendAbort||, CODE, READONLY, ALIGN=1

                  OSQPendAbort PROC
;;;496    #if OS_Q_PEND_ABORT_EN > 0
;;;497    INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;498    {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;499        INT8U      nbr_tasks;
;;;500    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;501        OS_CPU_SR  cpu_sr = 0;
00000a  f04f0800          MOV      r8,#0
;;;502    #endif
;;;503    
;;;504    
;;;505    
;;;506    #if OS_ARG_CHK_EN > 0
;;;507        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
00000e  b914              CBNZ     r4,|L6.22|
;;;508            return (0);
000010  2000              MOVS     r0,#0
                  |L6.18|
;;;509        }
;;;510        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;511            *perr = OS_ERR_PEVENT_NULL;
;;;512            return (0);
;;;513        }
;;;514    #endif
;;;515        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
;;;516            *perr = OS_ERR_EVENT_TYPE;
;;;517            return (0);
;;;518        }
;;;519        OS_ENTER_CRITICAL();
;;;520        if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
;;;521            nbr_tasks = 0;
;;;522            switch (opt) {
;;;523            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
;;;524                while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
;;;525                    (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
;;;526                    nbr_tasks++;
;;;527                }
;;;528                break;
;;;529    
;;;530            case OS_PEND_OPT_NONE:                         /* No,  ready HPT       waiting on queue    */
;;;531            default:
;;;532                (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
;;;533                nbr_tasks++;
;;;534                break;
;;;535            }
;;;536            OS_EXIT_CRITICAL();
;;;537            OS_Sched();                                        /* Find HPT ready to run                    */
;;;538            *perr = OS_ERR_PEND_ABORT;
;;;539            return (nbr_tasks);
;;;540        }
;;;541        OS_EXIT_CRITICAL();
;;;542        *perr = OS_ERR_NONE;
;;;543        return (0);                                            /* No tasks waiting on queue                */
;;;544    }
000012  e8bd81f0          POP      {r4-r8,pc}
                  |L6.22|
000016  b91d              CBNZ     r5,|L6.32|
000018  2004              MOVS     r0,#4                 ;511
00001a  7020              STRB     r0,[r4,#0]            ;511
00001c  2000              MOVS     r0,#0                 ;512
00001e  e7f8              B        |L6.18|
                  |L6.32|
000020  7828              LDRB     r0,[r5,#0]            ;515
000022  2802              CMP      r0,#2                 ;515
000024  d003              BEQ      |L6.46|
000026  2001              MOVS     r0,#1                 ;516
000028  7020              STRB     r0,[r4,#0]            ;516
00002a  2000              MOVS     r0,#0                 ;517
00002c  e7f1              B        |L6.18|
                  |L6.46|
00002e  f7fffffe          BL       OS_CPU_SR_Save
000032  4680              MOV      r8,r0                 ;519
000034  7aa8              LDRB     r0,[r5,#0xa]          ;520
000036  b320              CBZ      r0,|L6.130|
000038  2600              MOVS     r6,#0                 ;521
00003a  b17f              CBZ      r7,|L6.92|
00003c  2f01              CMP      r7,#1                 ;522
00003e  d10c              BNE      |L6.90|
000040  e007              B        |L6.82|
                  |L6.66|
000042  2302              MOVS     r3,#2                 ;525
000044  2204              MOVS     r2,#4                 ;525
000046  2100              MOVS     r1,#0                 ;525
000048  4628              MOV      r0,r5                 ;525
00004a  f7fffffe          BL       OS_EventTaskRdy
00004e  1c70              ADDS     r0,r6,#1              ;526
000050  b2c6              UXTB     r6,r0                 ;526
                  |L6.82|
000052  7aa8              LDRB     r0,[r5,#0xa]          ;524
000054  2800              CMP      r0,#0                 ;524
000056  d1f4              BNE      |L6.66|
000058  e009              B        |L6.110|
                  |L6.90|
00005a  bf00              NOP                            ;530
                  |L6.92|
00005c  2302              MOVS     r3,#2                 ;532
00005e  2204              MOVS     r2,#4                 ;532
000060  2100              MOVS     r1,#0                 ;532
000062  4628              MOV      r0,r5                 ;532
000064  f7fffffe          BL       OS_EventTaskRdy
000068  1c70              ADDS     r0,r6,#1              ;533
00006a  b2c6              UXTB     r6,r0                 ;533
00006c  bf00              NOP                            ;534
                  |L6.110|
00006e  bf00              NOP                            ;528
000070  4640              MOV      r0,r8                 ;536
000072  f7fffffe          BL       OS_CPU_SR_Restore
000076  f7fffffe          BL       OS_Sched
00007a  200e              MOVS     r0,#0xe               ;538
00007c  7020              STRB     r0,[r4,#0]            ;538
00007e  4630              MOV      r0,r6                 ;539
000080  e7c7              B        |L6.18|
                  |L6.130|
000082  4640              MOV      r0,r8                 ;541
000084  f7fffffe          BL       OS_CPU_SR_Restore
000088  2000              MOVS     r0,#0                 ;542
00008a  7020              STRB     r0,[r4,#0]            ;542
00008c  bf00              NOP                            ;543
00008e  e7c0              B        |L6.18|
;;;545    #endif
                          ENDP


                          AREA ||i.OSQPost||, CODE, READONLY, ALIGN=1

                  OSQPost PROC
;;;567    #if OS_Q_POST_EN > 0
;;;568    INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;569    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;570        OS_Q      *pq;
;;;571    #if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
;;;572        OS_CPU_SR  cpu_sr = 0;
000008  2700              MOVS     r7,#0
;;;573    #endif
;;;574    
;;;575    
;;;576    
;;;577    #if OS_ARG_CHK_EN > 0
;;;578        if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
00000a  b915              CBNZ     r5,|L7.18|
;;;579            return (OS_ERR_PEVENT_NULL);
00000c  2004              MOVS     r0,#4
                  |L7.14|
;;;580        }
;;;581    #endif
;;;582        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
;;;583            return (OS_ERR_EVENT_TYPE);
;;;584        }
;;;585        OS_ENTER_CRITICAL();
;;;586        if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
;;;587            /* Ready highest priority task waiting on event */
;;;588            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
;;;589            OS_EXIT_CRITICAL();
;;;590            OS_Sched();                                    /* Find highest priority task ready to run      */
;;;591            return (OS_ERR_NONE);
;;;592        }
;;;593        pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
;;;594        if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
;;;595            OS_EXIT_CRITICAL();
;;;596            return (OS_ERR_Q_FULL);
;;;597        }
;;;598        *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
;;;599        pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
;;;600        if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
;;;601            pq->OSQIn = pq->OSQStart;
;;;602        }
;;;603        OS_EXIT_CRITICAL();
;;;604        return (OS_ERR_NONE);
;;;605    }
00000e  e8bd81f0          POP      {r4-r8,pc}
                  |L7.18|
000012  7828              LDRB     r0,[r5,#0]            ;582
000014  2802              CMP      r0,#2                 ;582
000016  d001              BEQ      |L7.28|
000018  2001              MOVS     r0,#1                 ;583
00001a  e7f8              B        |L7.14|
                  |L7.28|
00001c  f7fffffe          BL       OS_CPU_SR_Save
000020  4607              MOV      r7,r0                 ;585
000022  7aa8              LDRB     r0,[r5,#0xa]          ;586
000024  b160              CBZ      r0,|L7.64|
000026  2300              MOVS     r3,#0                 ;588
000028  2204              MOVS     r2,#4                 ;588
00002a  4631              MOV      r1,r6                 ;588
00002c  4628              MOV      r0,r5                 ;588
00002e  f7fffffe          BL       OS_EventTaskRdy
000032  4638              MOV      r0,r7                 ;589
000034  f7fffffe          BL       OS_CPU_SR_Restore
000038  f7fffffe          BL       OS_Sched
00003c  2000              MOVS     r0,#0                 ;591
00003e  e7e6              B        |L7.14|
                  |L7.64|
000040  686c              LDR      r4,[r5,#4]            ;593
000042  8ae0              LDRH     r0,[r4,#0x16]         ;594
000044  8aa1              LDRH     r1,[r4,#0x14]         ;594
000046  4288              CMP      r0,r1                 ;594
000048  db04              BLT      |L7.84|
00004a  4638              MOV      r0,r7                 ;595
00004c  f7fffffe          BL       OS_CPU_SR_Restore
000050  201e              MOVS     r0,#0x1e              ;596
000052  e7dc              B        |L7.14|
                  |L7.84|
000054  68e1              LDR      r1,[r4,#0xc]          ;598
000056  1d08              ADDS     r0,r1,#4              ;598
000058  60e0              STR      r0,[r4,#0xc]          ;598
00005a  600e              STR      r6,[r1,#0]            ;598
00005c  8ae0              LDRH     r0,[r4,#0x16]         ;599
00005e  1c40              ADDS     r0,r0,#1              ;599
000060  82e0              STRH     r0,[r4,#0x16]         ;599
000062  e9d41002          LDRD     r1,r0,[r4,#8]         ;600
000066  4288              CMP      r0,r1                 ;600
000068  d101              BNE      |L7.110|
00006a  6860              LDR      r0,[r4,#4]            ;601
00006c  60e0              STR      r0,[r4,#0xc]          ;601
                  |L7.110|
00006e  4638              MOV      r0,r7                 ;603
000070  f7fffffe          BL       OS_CPU_SR_Restore
000074  2000              MOVS     r0,#0                 ;604
000076  e7ca              B        |L7.14|
;;;606    #endif
                          ENDP


                          AREA ||i.OSQPostFront||, CODE, READONLY, ALIGN=1

                  OSQPostFront PROC
;;;629    #if OS_Q_POST_FRONT_EN > 0
;;;630    INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;631    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;632        OS_Q      *pq;
;;;633    #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
;;;634        OS_CPU_SR  cpu_sr = 0;
000008  2700              MOVS     r7,#0
;;;635    #endif
;;;636    
;;;637    
;;;638    
;;;639    #if OS_ARG_CHK_EN > 0
;;;640        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
00000a  b915              CBNZ     r5,|L8.18|
;;;641            return (OS_ERR_PEVENT_NULL);
00000c  2004              MOVS     r0,#4
                  |L8.14|
;;;642        }
;;;643    #endif
;;;644        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
;;;645            return (OS_ERR_EVENT_TYPE);
;;;646        }
;;;647        OS_ENTER_CRITICAL();
;;;648        if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
;;;649            /* Ready highest priority task waiting on event  */
;;;650            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
;;;651            OS_EXIT_CRITICAL();
;;;652            OS_Sched();                                   /* Find highest priority task ready to run       */
;;;653            return (OS_ERR_NONE);
;;;654        }
;;;655        pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
;;;656        if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
;;;657            OS_EXIT_CRITICAL();
;;;658            return (OS_ERR_Q_FULL);
;;;659        }
;;;660        if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
;;;661            pq->OSQOut = pq->OSQEnd;
;;;662        }
;;;663        pq->OSQOut--;
;;;664        *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
;;;665        pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
;;;666        OS_EXIT_CRITICAL();
;;;667        return (OS_ERR_NONE);
;;;668    }
00000e  e8bd81f0          POP      {r4-r8,pc}
                  |L8.18|
000012  7828              LDRB     r0,[r5,#0]            ;644
000014  2802              CMP      r0,#2                 ;644
000016  d001              BEQ      |L8.28|
000018  2001              MOVS     r0,#1                 ;645
00001a  e7f8              B        |L8.14|
                  |L8.28|
00001c  f7fffffe          BL       OS_CPU_SR_Save
000020  4607              MOV      r7,r0                 ;647
000022  7aa8              LDRB     r0,[r5,#0xa]          ;648
000024  b160              CBZ      r0,|L8.64|
000026  2300              MOVS     r3,#0                 ;650
000028  2204              MOVS     r2,#4                 ;650
00002a  4631              MOV      r1,r6                 ;650
00002c  4628              MOV      r0,r5                 ;650
00002e  f7fffffe          BL       OS_EventTaskRdy
000032  4638              MOV      r0,r7                 ;651
000034  f7fffffe          BL       OS_CPU_SR_Restore
000038  f7fffffe          BL       OS_Sched
00003c  2000              MOVS     r0,#0                 ;653
00003e  e7e6              B        |L8.14|
                  |L8.64|
000040  686c              LDR      r4,[r5,#4]            ;655
000042  8ae0              LDRH     r0,[r4,#0x16]         ;656
000044  8aa1              LDRH     r1,[r4,#0x14]         ;656
000046  4288              CMP      r0,r1                 ;656
000048  db04              BLT      |L8.84|
00004a  4638              MOV      r0,r7                 ;657
00004c  f7fffffe          BL       OS_CPU_SR_Restore
000050  201e              MOVS     r0,#0x1e              ;658
000052  e7dc              B        |L8.14|
                  |L8.84|
000054  6861              LDR      r1,[r4,#4]            ;660
000056  6920              LDR      r0,[r4,#0x10]         ;660
000058  4288              CMP      r0,r1                 ;660
00005a  d101              BNE      |L8.96|
00005c  68a0              LDR      r0,[r4,#8]            ;661
00005e  6120              STR      r0,[r4,#0x10]         ;661
                  |L8.96|
000060  6920              LDR      r0,[r4,#0x10]         ;663
000062  1f00              SUBS     r0,r0,#4              ;663
000064  6120              STR      r0,[r4,#0x10]         ;663
000066  6920              LDR      r0,[r4,#0x10]         ;664
000068  6006              STR      r6,[r0,#0]            ;664
00006a  8ae0              LDRH     r0,[r4,#0x16]         ;665
00006c  1c40              ADDS     r0,r0,#1              ;665
00006e  82e0              STRH     r0,[r4,#0x16]         ;665
000070  4638              MOV      r0,r7                 ;666
000072  f7fffffe          BL       OS_CPU_SR_Restore
000076  2000              MOVS     r0,#0                 ;667
000078  e7c9              B        |L8.14|
;;;669    #endif
                          ENDP


                          AREA ||i.OSQPostOpt||, CODE, READONLY, ALIGN=1

                  OSQPostOpt PROC
;;;700    #if OS_Q_POST_OPT_EN > 0
;;;701    INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;702    {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4616              MOV      r6,r2
;;;703        OS_Q      *pq;
;;;704    #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
;;;705        OS_CPU_SR  cpu_sr = 0;
00000a  f04f0800          MOV      r8,#0
;;;706    #endif
;;;707    
;;;708    
;;;709    
;;;710    #if OS_ARG_CHK_EN > 0
;;;711        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
00000e  b915              CBNZ     r5,|L9.22|
;;;712            return (OS_ERR_PEVENT_NULL);
000010  2004              MOVS     r0,#4
                  |L9.18|
;;;713        }
;;;714    #endif
;;;715        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
;;;716            return (OS_ERR_EVENT_TYPE);
;;;717        }
;;;718        OS_ENTER_CRITICAL();
;;;719        if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
;;;720            if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
;;;721                while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
;;;722                    (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
;;;723                }
;;;724            } else {                                      /* No,  Post to HPT waiting on queue             */
;;;725                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
;;;726            }
;;;727            OS_EXIT_CRITICAL();
;;;728            if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
;;;729                OS_Sched();                               /* Find highest priority task ready to run       */
;;;730            }
;;;731            return (OS_ERR_NONE);
;;;732        }
;;;733        pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
;;;734        if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
;;;735            OS_EXIT_CRITICAL();
;;;736            return (OS_ERR_Q_FULL);
;;;737        }
;;;738        if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
;;;739            if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
;;;740                pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
;;;741            }
;;;742            pq->OSQOut--;
;;;743            *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
;;;744        } else {                                          /* No,  Post as FIFO                             */
;;;745            *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
;;;746            if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
;;;747                pq->OSQIn = pq->OSQStart;
;;;748            }
;;;749        }
;;;750        pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
;;;751        OS_EXIT_CRITICAL();
;;;752        return (OS_ERR_NONE);
;;;753    }
000012  e8bd81f0          POP      {r4-r8,pc}
                  |L9.22|
000016  7828              LDRB     r0,[r5,#0]            ;715
000018  2802              CMP      r0,#2                 ;715
00001a  d001              BEQ      |L9.32|
00001c  2001              MOVS     r0,#1                 ;716
00001e  e7f8              B        |L9.18|
                  |L9.32|
000020  f7fffffe          BL       OS_CPU_SR_Save
000024  4680              MOV      r8,r0                 ;718
000026  7aa8              LDRB     r0,[r5,#0xa]          ;719
000028  b1e8              CBZ      r0,|L9.102|
00002a  f0160f01          TST      r6,#1                 ;720
00002e  d00a              BEQ      |L9.70|
000030  e005              B        |L9.62|
                  |L9.50|
000032  2300              MOVS     r3,#0                 ;722
000034  2204              MOVS     r2,#4                 ;722
000036  4639              MOV      r1,r7                 ;722
000038  4628              MOV      r0,r5                 ;722
00003a  f7fffffe          BL       OS_EventTaskRdy
                  |L9.62|
00003e  7aa8              LDRB     r0,[r5,#0xa]          ;721
000040  2800              CMP      r0,#0                 ;721
000042  d1f6              BNE      |L9.50|
000044  e005              B        |L9.82|
                  |L9.70|
000046  2300              MOVS     r3,#0                 ;725
000048  2204              MOVS     r2,#4                 ;725
00004a  4639              MOV      r1,r7                 ;725
00004c  4628              MOV      r0,r5                 ;725
00004e  f7fffffe          BL       OS_EventTaskRdy
                  |L9.82|
000052  4640              MOV      r0,r8                 ;727
000054  f7fffffe          BL       OS_CPU_SR_Restore
000058  f0160f04          TST      r6,#4                 ;728
00005c  d101              BNE      |L9.98|
00005e  f7fffffe          BL       OS_Sched
                  |L9.98|
000062  2000              MOVS     r0,#0                 ;731
000064  e7d5              B        |L9.18|
                  |L9.102|
000066  686c              LDR      r4,[r5,#4]            ;733
000068  8ae0              LDRH     r0,[r4,#0x16]         ;734
00006a  8aa1              LDRH     r1,[r4,#0x14]         ;734
00006c  4288              CMP      r0,r1                 ;734
00006e  db04              BLT      |L9.122|
000070  4640              MOV      r0,r8                 ;735
000072  f7fffffe          BL       OS_CPU_SR_Restore
000076  201e              MOVS     r0,#0x1e              ;736
000078  e7cb              B        |L9.18|
                  |L9.122|
00007a  f0160f02          TST      r6,#2                 ;738
00007e  d00b              BEQ      |L9.152|
000080  6861              LDR      r1,[r4,#4]            ;739
000082  6920              LDR      r0,[r4,#0x10]         ;739
000084  4288              CMP      r0,r1                 ;739
000086  d101              BNE      |L9.140|
000088  68a0              LDR      r0,[r4,#8]            ;740
00008a  6120              STR      r0,[r4,#0x10]         ;740
                  |L9.140|
00008c  6920              LDR      r0,[r4,#0x10]         ;742
00008e  1f00              SUBS     r0,r0,#4              ;742
000090  6120              STR      r0,[r4,#0x10]         ;742
000092  6920              LDR      r0,[r4,#0x10]         ;743
000094  6007              STR      r7,[r0,#0]            ;743
000096  e009              B        |L9.172|
                  |L9.152|
000098  68e1              LDR      r1,[r4,#0xc]          ;745
00009a  1d08              ADDS     r0,r1,#4              ;745
00009c  60e0              STR      r0,[r4,#0xc]          ;745
00009e  600f              STR      r7,[r1,#0]            ;745
0000a0  e9d41002          LDRD     r1,r0,[r4,#8]         ;746
0000a4  4288              CMP      r0,r1                 ;746
0000a6  d101              BNE      |L9.172|
0000a8  6860              LDR      r0,[r4,#4]            ;747
0000aa  60e0              STR      r0,[r4,#0xc]          ;747
                  |L9.172|
0000ac  8ae0              LDRH     r0,[r4,#0x16]         ;750
0000ae  1c40              ADDS     r0,r0,#1              ;750
0000b0  82e0              STRH     r0,[r4,#0x16]         ;750
0000b2  4640              MOV      r0,r8                 ;751
0000b4  f7fffffe          BL       OS_CPU_SR_Restore
0000b8  2000              MOVS     r0,#0                 ;752
0000ba  e7aa              B        |L9.18|
;;;754    #endif
                          ENDP


                          AREA ||i.OSQQuery||, CODE, READONLY, ALIGN=1

                  OSQQuery PROC
;;;774    #if OS_Q_QUERY_EN > 0
;;;775    INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;776    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;777        OS_Q      *pq;
;;;778        INT8U      i;
;;;779    #if OS_LOWEST_PRIO <= 63
;;;780        INT8U     *psrc;
;;;781        INT8U     *pdest;
;;;782    #else
;;;783        INT16U    *psrc;
;;;784        INT16U    *pdest;
;;;785    #endif
;;;786    #if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
;;;787        OS_CPU_SR  cpu_sr = 0;
000008  f04f0a00          MOV      r10,#0
;;;788    #endif
;;;789    
;;;790    
;;;791    
;;;792    #if OS_ARG_CHK_EN > 0
;;;793        if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
00000c  b915              CBNZ     r5,|L10.20|
;;;794            return (OS_ERR_PEVENT_NULL);
00000e  2004              MOVS     r0,#4
                  |L10.16|
;;;795        }
;;;796        if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
;;;797            return (OS_ERR_PDATA_NULL);
;;;798        }
;;;799    #endif
;;;800        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
;;;801            return (OS_ERR_EVENT_TYPE);
;;;802        }
;;;803        OS_ENTER_CRITICAL();
;;;804        p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
;;;805        psrc                 = &pevent->OSEventTbl[0];
;;;806        pdest                = &p_q_data->OSEventTbl[0];
;;;807        for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
;;;808            *pdest++ = *psrc++;
;;;809        }
;;;810        pq = (OS_Q *)pevent->OSEventPtr;
;;;811        if (pq->OSQEntries > 0) {
;;;812            p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
;;;813        } else {
;;;814            p_q_data->OSMsg = (void *)0;
;;;815        }
;;;816        p_q_data->OSNMsgs = pq->OSQEntries;
;;;817        p_q_data->OSQSize = pq->OSQSize;
;;;818        OS_EXIT_CRITICAL();
;;;819        return (OS_ERR_NONE);
;;;820    }
000010  e8bd87f0          POP      {r4-r10,pc}
                  |L10.20|
000014  b90c              CBNZ     r4,|L10.26|
000016  2009              MOVS     r0,#9                 ;797
000018  e7fa              B        |L10.16|
                  |L10.26|
00001a  7828              LDRB     r0,[r5,#0]            ;800
00001c  2802              CMP      r0,#2                 ;800
00001e  d001              BEQ      |L10.36|
000020  2001              MOVS     r0,#1                 ;801
000022  e7f5              B        |L10.16|
                  |L10.36|
000024  f7fffffe          BL       OS_CPU_SR_Save
000028  4682              MOV      r10,r0                ;803
00002a  7aa8              LDRB     r0,[r5,#0xa]          ;804
00002c  7420              STRB     r0,[r4,#0x10]         ;804
00002e  f105080b          ADD      r8,r5,#0xb            ;805
000032  f1040908          ADD      r9,r4,#8              ;806
000036  2700              MOVS     r7,#0                 ;807
000038  e005              B        |L10.70|
                  |L10.58|
00003a  f8180b01          LDRB     r0,[r8],#1            ;808
00003e  f8090b01          STRB     r0,[r9],#1            ;808
000042  1c78              ADDS     r0,r7,#1              ;807
000044  b2c7              UXTB     r7,r0                 ;807
                  |L10.70|
000046  2f08              CMP      r7,#8                 ;807
000048  dbf7              BLT      |L10.58|
00004a  686e              LDR      r6,[r5,#4]            ;810
00004c  8af0              LDRH     r0,[r6,#0x16]         ;811
00004e  2800              CMP      r0,#0                 ;811
000050  dd03              BLE      |L10.90|
000052  6930              LDR      r0,[r6,#0x10]         ;812
000054  6800              LDR      r0,[r0,#0]            ;812
000056  6020              STR      r0,[r4,#0]            ;812
000058  e001              B        |L10.94|
                  |L10.90|
00005a  2000              MOVS     r0,#0                 ;814
00005c  6020              STR      r0,[r4,#0]            ;814
                  |L10.94|
00005e  8af0              LDRH     r0,[r6,#0x16]         ;816
000060  80a0              STRH     r0,[r4,#4]            ;816
000062  8ab0              LDRH     r0,[r6,#0x14]         ;817
000064  80e0              STRH     r0,[r4,#6]            ;817
000066  4650              MOV      r0,r10                ;818
000068  f7fffffe          BL       OS_CPU_SR_Restore
00006c  2000              MOVS     r0,#0                 ;819
00006e  e7cf              B        |L10.16|
;;;821    #endif                                                 /* OS_Q_QUERY_EN                                */
                          ENDP


                          AREA ||i.OS_QInit||, CODE, READONLY, ALIGN=2

                  OS_QInit PROC
;;;838    
;;;839    void  OS_QInit (void)
000000  b570              PUSH     {r4-r6,lr}
;;;840    {
;;;841    #if OS_MAX_QS == 1
;;;842        OSQFreeList         = &OSQTbl[0];                /* Only ONE queue!                                */
;;;843        OSQFreeList->OSQPtr = (OS_Q *)0;
;;;844    #endif
;;;845    
;;;846    #if OS_MAX_QS >= 2
;;;847        INT16U  i;
;;;848        OS_Q   *pq1;
;;;849        OS_Q   *pq2;
;;;850    
;;;851    
;;;852    
;;;853        OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
000002  2160              MOVS     r1,#0x60
000004  480a              LDR      r0,|L11.48|
000006  f7fffffe          BL       OS_MemClr
;;;854        pq1 = &OSQTbl[0];
00000a  4c09              LDR      r4,|L11.48|
;;;855        pq2 = &OSQTbl[1];
00000c  f1040618          ADD      r6,r4,#0x18
;;;856        for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
000010  2500              MOVS     r5,#0
000012  e004              B        |L11.30|
                  |L11.20|
;;;857            pq1->OSQPtr = pq2;
000014  6026              STR      r6,[r4,#0]
;;;858            pq1++;
000016  3418              ADDS     r4,r4,#0x18
;;;859            pq2++;
000018  3618              ADDS     r6,r6,#0x18
00001a  1c68              ADDS     r0,r5,#1              ;856
00001c  b285              UXTH     r5,r0                 ;856
                  |L11.30|
00001e  2d03              CMP      r5,#3                 ;856
000020  dbf8              BLT      |L11.20|
;;;860        }
;;;861        pq1->OSQPtr = (OS_Q *)0;
000022  2000              MOVS     r0,#0
000024  6020              STR      r0,[r4,#0]
;;;862        OSQFreeList = &OSQTbl[0];
000026  4802              LDR      r0,|L11.48|
000028  4902              LDR      r1,|L11.52|
00002a  6008              STR      r0,[r1,#0]  ; OSQFreeList
;;;863    #endif
;;;864    }
00002c  bd70              POP      {r4-r6,pc}
;;;865    #endif                                               /* OS_Q_EN                                        */
                          ENDP

00002e  0000              DCW      0x0000
                  |L11.48|
                          DCD      OSQTbl
                  |L11.52|
                          DCD      OSQFreeList
