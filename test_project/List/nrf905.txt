; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\nrf905.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\nrf905.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\Source\APP -I.\Source\BSP -I.\Source\uCOS-II\Source -I.\Source\uCOS-II\uC-CPU -I.\Source\uCOS-II\uC-LIB -I.\Source\uCOS-II\Ports -I.\Source\uCGUI\Config -I.\Source\uCGUI\emWinDemo -I.\Source\uCGUI\inc -I.\Source\uCGUI\LCDDriver -I.\Source\uCGUI\uCGUIDemo -I.\Source\Libraries\STM32F10x_StdPeriph_Driver\inc -I.\Source\Libraries\CMSIS\Core\CM3 -I.\Source\APP\HMI -I"D:\Program Files (x86)\keil\ARM\RV31\INC" -I"D:\Program Files (x86)\keil\ARM\PACK\ARM\CMSIS\3.20.3\CMSIS\Include" -I"D:\Program Files (x86)\keil\ARM\PACK\Keil\STM32F1xx_DFP\1.0.2\Device\Include" -DSTM32F10X_HD --omf_browse=.\obj\nrf905.crf Source\APP\nrf905.c]
                          THUMB

                          AREA ||i.n95_Check_DR||, CODE, READONLY, ALIGN=2

                  n95_Check_DR PROC
;;;163    //		 return 接收成功标志,为1时表明数据接收成功
;;;164    uint8_t n95_Check_DR(uint8_t *p)
000000  b570              PUSH     {r4-r6,lr}
;;;165    {	uint8_t i=0;
000002  4605              MOV      r5,r0
000004  2400              MOVS     r4,#0
;;;166    
;;;167    	if(nPin_DR == 1){	///数据发送完成或接收到新数据都会硬件DR置1//
000006  f44f6100          MOV      r1,#0x800
00000a  4813              LDR      r0,|L1.88|
00000c  f7fffffe          BL       GPIO_ReadInputDataBit
000010  2801              CMP      r0,#1
000012  d11f              BNE      |L1.84|
;;;168    		nPin_TRX_CE_L;								// TRX_CE置低,进入待机模式
000014  0341              LSLS     r1,r0,#13
000016  4810              LDR      r0,|L1.88|
000018  f7fffffe          BL       GPIO_ResetBits
;;;169    		nPin_CSN_L;									// CSN置低,   进入SPI操作模式
00001c  2110              MOVS     r1,#0x10
00001e  480f              LDR      r0,|L1.92|
000020  f7fffffe          BL       GPIO_ResetBits
;;;170    
;;;171    		n95_SPI_WR_Byte(nCMD_R_RX_PAYLOAD);				// 向nRF905写入"读取RXFIFO"指令
000024  2024              MOVS     r0,#0x24
000026  f7fffffe          BL       n95_SPI_WR_Byte
;;;172    
;;;173    		for(i=0; i<RF_DATA_WIDTH; i++){
00002a  bf00              NOP      
00002c  e005              B        |L1.58|
                  |L1.46|
;;;174    			p[i] = 	n95_SPI_WR_Byte(0);					// 读取接收数据
00002e  2000              MOVS     r0,#0
000030  f7fffffe          BL       n95_SPI_WR_Byte
000034  5528              STRB     r0,[r5,r4]
000036  1c60              ADDS     r0,r4,#1              ;173
000038  b2c4              UXTB     r4,r0                 ;173
                  |L1.58|
00003a  2c0c              CMP      r4,#0xc               ;173
00003c  dbf7              BLT      |L1.46|
;;;175    		}
;;;176    
;;;177    		nPin_CSN_H;									// CSN置高,   退出SPI操作模式
00003e  2110              MOVS     r1,#0x10
000040  4806              LDR      r0,|L1.92|
000042  f7fffffe          BL       GPIO_SetBits
;;;178    		nPin_TRX_CE_H;								// TRX_CE置高,进入工作模式
000046  f44f5100          MOV      r1,#0x2000
00004a  4803              LDR      r0,|L1.88|
00004c  f7fffffe          BL       GPIO_SetBits
;;;179    		return(1);										// 返回接收成功标志
000050  2001              MOVS     r0,#1
                  |L1.82|
;;;180    	}
;;;181    	return(0);											// 返回未接收到数据标志
;;;182    }
000052  bd70              POP      {r4-r6,pc}
                  |L1.84|
000054  2000              MOVS     r0,#0                 ;181
000056  e7fc              B        |L1.82|
                          ENDP

                  |L1.88|
                          DCD      0x40011800
                  |L1.92|
                          DCD      0x40010800

                          AREA ||i.n95_Init_Dev||, CODE, READONLY, ALIGN=2

                  n95_Init_Dev PROC
;;;91     // 参数: 无
;;;92     void n95_Init_Dev(void)
000000  b510              PUSH     {r4,lr}
;;;93     {
;;;94     	uint8_t i=0;
000002  2400              MOVS     r4,#0
;;;95     
;;;96     	nPin_PWR_UP_H;									// PWR_UP置高,nRF905进入上电模式
000004  f44f4100          MOV      r1,#0x8000
000008  481c              LDR      r0,|L2.124|
00000a  f7fffffe          BL       GPIO_SetBits
;;;97     	nPin_TRX_CE_L;									// TRX_CE置低,进入待机和SPI操作模式
00000e  f44f5100          MOV      r1,#0x2000
000012  481a              LDR      r0,|L2.124|
000014  f7fffffe          BL       GPIO_ResetBits
;;;98     	nPin_CSN_L;										// CSN置低,   进入SPI操作模式。CSN为低时，SPI接口开始等待一条指令。任何一条新指令均由CSN的由高到低的转换开始。
000018  2110              MOVS     r1,#0x10
00001a  4819              LDR      r0,|L2.128|
00001c  f7fffffe          BL       GPIO_ResetBits
;;;99     	
;;;100    	n95_SPI_WR_Byte(nCMD_W_CONFIG);						// 向nRF905发送"写配置寄存器命令"
000020  2000              MOVS     r0,#0
000022  f7fffffe          BL       n95_SPI_WR_Byte
;;;101    	n95_SPI_WR_Byte(RF_CH & 0xFF);						// RF通道bit7:0
000026  20dc              MOVS     r0,#0xdc
000028  f7fffffe          BL       n95_SPI_WR_Byte
;;;102    	n95_SPI_WR_Byte(nRCD_AUTO_RETRAN_disanble			// 禁用自动重发 
00002c  200c              MOVS     r0,#0xc
00002e  f7fffffe          BL       n95_SPI_WR_Byte
;;;103    				  | nRCD_RX_RED_PWR_disanble			// 禁用低功耗RX模式
;;;104    				  | nRCD_PA_PWR_10dBm					// 输出功率为10dBm
;;;105    				  | nRCD_HFREQ_PLL_433MHz				// 工作在433频段
;;;106    				  | (RF_CH>>8) );						// RF通道bit8
;;;107    
;;;108    	n95_SPI_WR_Byte(nRCD_TX_AFW_4byte					// TX地址宽度为4byte
000032  2044              MOVS     r0,#0x44
000034  f7fffffe          BL       n95_SPI_WR_Byte
;;;109    				  | nRCD_RX_AFW_4byte);					// RX地址宽度为4byte
;;;110    
;;;111    	n95_SPI_WR_Byte(RF_DATA_WIDTH);						// RX数据宽度
000038  200c              MOVS     r0,#0xc
00003a  f7fffffe          BL       n95_SPI_WR_Byte
;;;112    	n95_SPI_WR_Byte(RF_DATA_WIDTH);						// TX数据宽度
00003e  200c              MOVS     r0,#0xc
000040  f7fffffe          BL       n95_SPI_WR_Byte
;;;113    
;;;114    	for(i=0; i<4; i++){
000044  bf00              NOP      
000046  e005              B        |L2.84|
                  |L2.72|
;;;115    		n95_SPI_WR_Byte(n95_RF_Addr[i]);				// RX地址 byte0~3
000048  490e              LDR      r1,|L2.132|
00004a  5d08              LDRB     r0,[r1,r4]
00004c  f7fffffe          BL       n95_SPI_WR_Byte
000050  1c60              ADDS     r0,r4,#1              ;114
000052  b2c4              UXTB     r4,r0                 ;114
                  |L2.84|
000054  2c04              CMP      r4,#4                 ;114
000056  dbf7              BLT      |L2.72|
;;;116    	}
;;;117    
;;;118    	n95_SPI_WR_Byte(nRCD_CRC_MODE_16crc					// 16bitCRC
000058  20d8              MOVS     r0,#0xd8
00005a  f7fffffe          BL       n95_SPI_WR_Byte
;;;119    				  | nRCD_CRC_EN_enable					// 启用CRC
;;;120    				  |	nRCD_XOF_16MHz						// 外部晶振频率为16MHz
;;;121    				  |	nRCD_UP_CLK_EN_disanble				// 禁用外部时钟输出
;;;122    				  | nRCD_UP_CLK_FREQ_4MHz);				// 时钟输出为4MHz
;;;123    
;;;124    	nPin_CSN_H;										// CSN置高,   退出SPI操作模式
00005e  2110              MOVS     r1,#0x10
000060  4807              LDR      r0,|L2.128|
000062  f7fffffe          BL       GPIO_SetBits
;;;125    	nPin_TX_EN_L;										// TX_EN置低 ,进入接收模式
000066  f44f4180          MOV      r1,#0x4000
00006a  4804              LDR      r0,|L2.124|
00006c  f7fffffe          BL       GPIO_ResetBits
;;;126    	nPin_TRX_CE_H;									// TRX_CE置高,进入工作模式
000070  f44f5100          MOV      r1,#0x2000
000074  4801              LDR      r0,|L2.124|
000076  f7fffffe          BL       GPIO_SetBits
;;;127    }
00007a  bd10              POP      {r4,pc}
;;;128    
                          ENDP

                  |L2.124|
                          DCD      0x40011800
                  |L2.128|
                          DCD      0x40010800
                  |L2.132|
                          DCD      n95_RF_Addr

                          AREA ||i.n95_Init_IO||, CODE, READONLY, ALIGN=2

                  n95_Init_IO PROC
;;;49     // 参数: 无
;;;50     void n95_Init_IO(void)
000000  b510              PUSH     {r4,lr}
;;;51     {
;;;52     	nRF905_GPIO_Configuration();
000002  f7fffffe          BL       nRF905_GPIO_Configuration
;;;53     //	nPin_CD_L;										// CD    置低
;;;54     	nPin_PWR_UP_H;									// PWR_UP置高,nRF905进入上电模式
000006  f44f4100          MOV      r1,#0x8000
00000a  480c              LDR      r0,|L3.60|
00000c  f7fffffe          BL       GPIO_SetBits
;;;55     	nPin_TRX_CE_L;									// TRX_CE置低,进入待机和SPI操作模式
000010  f44f5100          MOV      r1,#0x2000
000014  4809              LDR      r0,|L3.60|
000016  f7fffffe          BL       GPIO_ResetBits
;;;56     	nPin_SCK_L;            							// SCK   置低
00001a  2120              MOVS     r1,#0x20
00001c  4808              LDR      r0,|L3.64|
00001e  f7fffffe          BL       GPIO_ResetBits
;;;57     	
;;;58     		//将DR、AM、CD引脚设为浮空输入模式
;;;59     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11 | GPIO_Pin_12; 
000022  f44f50c0          MOV      r0,#0x1800
000026  4907              LDR      r1,|L3.68|
000028  8008              STRH     r0,[r1,#0]
;;;60     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz; 
00002a  2001              MOVS     r0,#1
00002c  7088              STRB     r0,[r1,#2]
;;;61     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING; 
00002e  2004              MOVS     r0,#4
000030  70c8              STRB     r0,[r1,#3]
;;;62     	GPIO_Init(GPIOA, &GPIO_InitStructure); 
000032  4803              LDR      r0,|L3.64|
000034  f7fffffe          BL       GPIO_Init
;;;63     }
000038  bd10              POP      {r4,pc}
;;;64     
                          ENDP

00003a  0000              DCW      0x0000
                  |L3.60|
                          DCD      0x40011800
                  |L3.64|
                          DCD      0x40010800
                  |L3.68|
                          DCD      GPIO_InitStructure

                          AREA ||i.n95_SPI_WR_Byte||, CODE, READONLY, ALIGN=2

                  n95_SPI_WR_Byte PROC
;;;68     //		 return 读取到的字节数据
;;;69     uint8_t n95_SPI_WR_Byte(uint8_t byte)
000000  b570              PUSH     {r4-r6,lr}
;;;70     {
000002  4604              MOV      r4,r0
;;;71     	uint8_t i;
;;;72        	for(i=0; i<8; i++){          						// 循环8次
000004  2500              MOVS     r5,#0
000006  e01c              B        |L4.66|
                  |L4.8|
;;;73     
;;;74     			if(byte & 0x80)
000008  f0140f80          TST      r4,#0x80
00000c  d004              BEQ      |L4.24|
;;;75     			{
;;;76     				nPin_MOSI_H;  					// 将byte最高位输出到MOSI
00000e  2180              MOVS     r1,#0x80
000010  480e              LDR      r0,|L4.76|
000012  f7fffffe          BL       GPIO_SetBits
000016  e003              B        |L4.32|
                  |L4.24|
;;;77     			}else
;;;78     			{
;;;79     				nPin_MOSI_L;
000018  2180              MOVS     r1,#0x80
00001a  480c              LDR      r0,|L4.76|
00001c  f7fffffe          BL       GPIO_ResetBits
                  |L4.32|
;;;80     			}
;;;81        		byte <<= 1;             						// 低一位移位到最高位
000020  0660              LSLS     r0,r4,#25
000022  0e04              LSRS     r4,r0,#24
;;;82        		nPin_SCK_H;               					// 拉高SCK，nRF24L01从MOSI读入1位数据，同时从MISO输出1位数据
000024  2120              MOVS     r1,#0x20
000026  4809              LDR      r0,|L4.76|
000028  f7fffffe          BL       GPIO_SetBits
;;;83        		byte |= nPin_MISO;       						// 读MISO到byte最低位
00002c  2140              MOVS     r1,#0x40
00002e  4807              LDR      r0,|L4.76|
000030  f7fffffe          BL       GPIO_ReadInputDataBit
000034  4304              ORRS     r4,r4,r0
;;;84        		nPin_SCK_L;            						// SCK置低
000036  2120              MOVS     r1,#0x20
000038  4804              LDR      r0,|L4.76|
00003a  f7fffffe          BL       GPIO_ResetBits
00003e  1c68              ADDS     r0,r5,#1              ;72
000040  b2c5              UXTB     r5,r0                 ;72
                  |L4.66|
000042  2d08              CMP      r5,#8                 ;72
000044  dbe0              BLT      |L4.8|
;;;85        	}
;;;86         return(byte);           							// 返回读出的一字节
000046  4620              MOV      r0,r4
;;;87     }
000048  bd70              POP      {r4-r6,pc}
;;;88     
                          ENDP

00004a  0000              DCW      0x0000
                  |L4.76|
                          DCD      0x40010800

                          AREA ||i.n95_Sendout||, CODE, READONLY, ALIGN=2

                  n95_Sendout PROC
;;;131    // 参数: p 发送数据存放地址
;;;132    void n95_Sendout(uint8_t *p)
000000  b570              PUSH     {r4-r6,lr}
;;;133    {
000002  4605              MOV      r5,r0
;;;134    	uint8_t i=0;
000004  2400              MOVS     r4,#0
;;;135    	nPin_PWR_UP_H;									// PWR_UP置高,nRF905进入上电模式
000006  f44f4100          MOV      r1,#0x8000
00000a  4824              LDR      r0,|L5.156|
00000c  f7fffffe          BL       GPIO_SetBits
;;;136    	nPin_TRX_CE_L;									// TRX_CE置低,进入待机和SPI操作模式
000010  f44f5100          MOV      r1,#0x2000
000014  4821              LDR      r0,|L5.156|
000016  f7fffffe          BL       GPIO_ResetBits
;;;137    	nPin_TX_EN_H;										// TX_EN置高 ,进入发送模式
00001a  f44f4180          MOV      r1,#0x4000
00001e  481f              LDR      r0,|L5.156|
000020  f7fffffe          BL       GPIO_SetBits
;;;138    	nPin_CSN_L;										// CSN置低,   进入SPI操作模式
000024  2110              MOVS     r1,#0x10
000026  481e              LDR      r0,|L5.160|
000028  f7fffffe          BL       GPIO_ResetBits
;;;139    
;;;140    	n95_SPI_WR_Byte(nCMD_W_TX_ADDRESS);					// 向nRF905写入"写TX地址"指令
00002c  2022              MOVS     r0,#0x22
00002e  f7fffffe          BL       n95_SPI_WR_Byte
;;;141    	
;;;142    	for(i=0; i<4; i++){
000032  bf00              NOP      
000034  e005              B        |L5.66|
                  |L5.54|
;;;143    		n95_SPI_WR_Byte(n95_RF_Addr[i]);				// 写入TX地址 byte0~3,注意此处应与"nRCD_TX_AFW"的配置一致
000036  491b              LDR      r1,|L5.164|
000038  5d08              LDRB     r0,[r1,r4]
00003a  f7fffffe          BL       n95_SPI_WR_Byte
00003e  1c60              ADDS     r0,r4,#1              ;142
000040  b2c4              UXTB     r4,r0                 ;142
                  |L5.66|
000042  2c04              CMP      r4,#4                 ;142
000044  dbf7              BLT      |L5.54|
;;;144    	}
;;;145    	nPin_CSN_H;										// CSN置高,   退出SPI操作模式
000046  2110              MOVS     r1,#0x10
000048  4815              LDR      r0,|L5.160|
00004a  f7fffffe          BL       GPIO_SetBits
;;;146    
;;;147    	nPin_CSN_L;										// CSN置低,   进入SPI操作模式
00004e  2110              MOVS     r1,#0x10
000050  4813              LDR      r0,|L5.160|
000052  f7fffffe          BL       GPIO_ResetBits
;;;148    	n95_SPI_WR_Byte(nCMD_W_TX_PAYLOAD);					// 向nRF905写入"写TX数据"指令
000056  2020              MOVS     r0,#0x20
000058  f7fffffe          BL       n95_SPI_WR_Byte
;;;149    
;;;150    	for(i=0; i<RF_DATA_WIDTH; i++){
00005c  2400              MOVS     r4,#0
00005e  e004              B        |L5.106|
                  |L5.96|
;;;151    		n95_SPI_WR_Byte(p[i]);							// 写入待发送数据
000060  5d28              LDRB     r0,[r5,r4]
000062  f7fffffe          BL       n95_SPI_WR_Byte
000066  1c60              ADDS     r0,r4,#1              ;150
000068  b2c4              UXTB     r4,r0                 ;150
                  |L5.106|
00006a  2c0c              CMP      r4,#0xc               ;150
00006c  dbf8              BLT      |L5.96|
;;;152    	}
;;;153    
;;;154    	nPin_CSN_H;										// CSN置高,   退出SPI操作模式
00006e  2110              MOVS     r1,#0x10
000070  480b              LDR      r0,|L5.160|
000072  f7fffffe          BL       GPIO_SetBits
;;;155    	nPin_TRX_CE_H;									// TRX_CE置高,进入发送模式
000076  f44f5100          MOV      r1,#0x2000
00007a  4808              LDR      r0,|L5.156|
00007c  f7fffffe          BL       GPIO_SetBits
;;;156    	while(nPin_DR == 0);								// 等待DR置高,发送完成
000080  bf00              NOP      
                  |L5.130|
000082  f44f6100          MOV      r1,#0x800
000086  4805              LDR      r0,|L5.156|
000088  f7fffffe          BL       GPIO_ReadInputDataBit
00008c  2800              CMP      r0,#0
00008e  d0f8              BEQ      |L5.130|
;;;157    	nPin_TX_EN_L;										// TX_EN置低 ,进入接收模式
000090  f44f4180          MOV      r1,#0x4000
000094  4801              LDR      r0,|L5.156|
000096  f7fffffe          BL       GPIO_ResetBits
;;;158    }
00009a  bd70              POP      {r4-r6,pc}
;;;159    
                          ENDP

                  |L5.156|
                          DCD      0x40011800
                  |L5.160|
                          DCD      0x40010800
                  |L5.164|
                          DCD      n95_RF_Addr

                          AREA ||i.nRF905_GPIO_Configuration||, CODE, READONLY, ALIGN=2

                  nRF905_GPIO_Configuration PROC
;;;29     
;;;30     void nRF905_GPIO_Configuration(void)
000000  b510              PUSH     {r4,lr}
;;;31     { 
;;;32     	// Enable GPIOA, GPIOE clocks */
;;;33       RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOE, ENABLE);
000002  2101              MOVS     r1,#1
000004  2044              MOVS     r0,#0x44
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;34     	 
;;;35     	//初始化TXEN POW TRX CD DR CSN SCK MOSI
;;;36     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15; 
00000a  f44f4078          MOV      r0,#0xf800
00000e  490a              LDR      r1,|L6.56|
000010  8008              STRH     r0,[r1,#0]
;;;37     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz; 
000012  2001              MOVS     r0,#1
000014  7088              STRB     r0,[r1,#2]
;;;38     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 
000016  2010              MOVS     r0,#0x10
000018  70c8              STRB     r0,[r1,#3]
;;;39     	GPIO_Init(GPIOE, &GPIO_InitStructure); 
00001a  4808              LDR      r0,|L6.60|
00001c  f7fffffe          BL       GPIO_Init
;;;40     	
;;;41     	//初始化MISO
;;;42     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6; 
000020  2040              MOVS     r0,#0x40
000022  4905              LDR      r1,|L6.56|
000024  8008              STRH     r0,[r1,#0]
;;;43     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz; 
000026  2001              MOVS     r0,#1
000028  7088              STRB     r0,[r1,#2]
;;;44     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING; 
00002a  2004              MOVS     r0,#4
00002c  70c8              STRB     r0,[r1,#3]
;;;45     	GPIO_Init(GPIOA, &GPIO_InitStructure);
00002e  4804              LDR      r0,|L6.64|
000030  f7fffffe          BL       GPIO_Init
;;;46     }
000034  bd10              POP      {r4,pc}
;;;47     // 函数: n95_Init_IO()
                          ENDP

000036  0000              DCW      0x0000
                  |L6.56|
                          DCD      GPIO_InitStructure
                  |L6.60|
                          DCD      0x40011800
                  |L6.64|
                          DCD      0x40010800

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  n95_RX_Buff
                          %        12
                  n95_TX_Buff
                          %        12

                          AREA ||.data||, DATA, ALIGN=1

                  n95_RF_Addr
000000  babbbcbd          DCB      0xba,0xbb,0xbc,0xbd
                  GPIO_InitStructure
                          DCDU     0x00000000
